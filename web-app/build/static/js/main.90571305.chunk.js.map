{"version":3,"sources":["services/firebase.js","components/Language/index.js","contexts/AuthContext.js","components/SecureRoute.js","components/Signup.js","components/Login.js","components/HomePage.js","utils/Meals.js","utils/Days.js","components/Notification.js","components/NutritionalPlan.js","components/NutritionalPlan/TemplateNutritionalPlan.js","components/Foods/index.js","views/Foods/index.js","components/Workouts/index.js","components/create-patient/PersonalData.js","components/create-patient/OtherDetails.js","components/create-patient/Account.js","components/create-patient/Resume.js","components/create-patient/CreatePatient.js","components/PatientStatistics.js","views/therapy-status/PatientWeightsGraph.js","views/therapy-status/PatientNutrientsGraph.js","views/therapy-status/PatientWorkoutsGraph.js","components/TherapyStatus.js","components/Notifications.js","views/Notes/index.js","views/Patients/index.js","components/PhysicalExercises/index.js","components/ForgotPassword.js","components/DoctorProfile.js","components/UpdateProfile.js","views/Visit/index.js","components/Typography/TitleStepper.js","components/Visit/FamilyHistory/index.js","components/RadioGroup/index.js","components/Checkbox/index.js","components/Visit/PersonalData/index.js","components/Visit/PhysiologicalAnamnesis/index.js","components/Typography/SubTittleStepper.js","components/Dialog/Pathologies/index.js","components/Visit/PathologicalHistory/index.js","components/Visit/PhysicalExamination/index.js","components/Visit/BloodChemistryTest/index.js","components/Visit/MetabolismCalculation/index.js","components/Visit/BioimpedanceAnalysis/index.js","components/Switch/index.js","components/Visit/WeightHistory/index.js","components/Visit/FoodAnamnesis/index.js","components/Visit/EatingBehavior/index.js","components/Visit/NutritionalPlan/index.js","components/Visit/Allergies/index.js","components/Visit/PerformanceTest/index.js","components/Visit/PsychometricTest/index.js","components/Visit/index.js","components/PatientDetails/index.js","components/VisitData/index.js","components/VisitData/Export.js","views/modify-patient/index.js","views/ControlGroup/index.js","views/DroppedPatients/index.js","routes.js","views/Workouts/index.js","layouts/AppLayout.js","layouts/AuthLayout.js","views/NotFound/index.js","App.js","index.js"],"names":["app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","measurementId","analytics","getAnalytics","storage","getStorage","auth","getAuth","db","getFirestore","collections","patients","collection","workouts","documents","uid","doc","LocalizedStrings","en","pageTitles","therapy_status","notifications","nutritional_plan","physical_exercises","add_patient","foods","medical_visit","details_patient","patient_statistics","export_data","nutritional_plans","notes","update_profile","measures","height","weight","age","middle_age","steps","minutes","patient","first_name","last_name","full_name","gender","email","dateOfBirth","search","occupation","educational_qualification","marital_status","ethnicity","overweight","diabetes","heartAttack","hypertension","dyslipidemia","thyroid","smoker","smoker_ex","alcoholic","laxatives_uses","incontinence","snoring","insomnia","menopause","pregnancies","pregnant","abortions","amount_cigarettes","alvo","menstrual_cycles","patient_account","remove_patient","patient_id","patient_age","therapy","start","end","account","sign_in","sign_out","sign_up","forgot_password","have_account","password","confirm_password","confirm_email","avatar_upload","no_account","remember_me","reset","modify_profile","verify_email","profile","doctor","modify_patient_data","personal_data","general","cancel","error","done","confirm","modify","save","create","from_patient_list","all_patient_data","select_choice_before_confirmation","select_day_time","create_new_appointment","male","female","anonym","consent","back","next","choose","year","month","day","time","graphs","tables","under_construction","data_saved","see_more","patients_number","phone_number","empty_list","add","days","mon","tue","wed","thu","fri","sat","sun","meals","breakfast","morning_break","lunch","afternoon_break","dinner","relationship","father","mother","siblings","uncle","grandparents","visit","data_patient","family_history","physiological_anamnesis","pathological_anamnesis","physical_examination","blood_chemistry","calculation_metabolism","bioimpedance","weight_history","food_anamnesis","eating_behavior","allergies","test_performance","test_psychometric","eating_disorder","mood_disturbance","anxiety_disorder","psychosis","personality_disorder","pathologies_inprogress","pathologies_previous","pathologies","middleweight","middleheight","heart_tones","heart_murmur","heart_rate","mv_chest","pathological_noises","murphy_blumberg","palpable_liver","palpable_thyroid","declining_edema","carotid_murmurs","min_blood_pressure","max_blood_pressure","bmi","nutrients","under","over","new_visit","no_visits","visit_name","select_pathologies","carbs","prots","fats","calcium","energy","chol","it","description","neck_circumference","waist_circumference","narrowest_point","waist_circumference_narrowest_point","iliac_spine_height","waist_circumference_iliac_spine_height","patient_occupation","ex_smoker","use_laxatives","eating","mood","anxiety","personality","hb","cholesterol","hdl","ldl","triglycerides","glycemia","glycated_hb","uric_acid","creatininemia","alt","ggt","tsh","daily_energy_expenditure","tot_energy_expenditure","body_fat","body_water","lean_mass","yourselfDiets","proDiets","heavyweight","weightMaintained","maximumWeightLoss","yearGetFat","diets","weightGain","weightLoss","averageCalories","AuthContext","React","createContext","COLLECTIONS","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","localStorage","getItem","detectBrowserLanguage","currentLanguage","setCurrentLanguage","a","firstname","lastname","createUserWithEmailAndPassword","userCredentials","logEvent","providerId","authUpdateProfile","user","displayName","patientsRef","q","query","where","getDocs","empty","data","doctorId","createdAt","Timestamp","now","addDoc","Error","rememberMe","setPersistence","browserSessionPersistence","then","signInWithEmailAndPassword","useEffect","setItem","Language","setLanguage","unsubscribe","onAuthStateChanged","console","message","debug","value","getPatientNotes","patientId","orderBy","updatePatientNote","noteId","updateDoc","deletePatientNote","deleteDoc","createPatientNote","createPatient","login","signup","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","authUpdateEmail","updatePassword","authUpdatePassword","createWorkout","updateWorkout","setDoc","getWorkouts","rowsPerPage","limit","deleteInBatch","rows","batch","writeBatch","forEach","row","delete","commit","getPatientWorkouts","getPatients","getPatient","getDoc","removePatient","runTransaction","transaction","patientDocRef","get","patientDoc","exists","set","unlinkPatient","deleteField","verifyEmail","sendEmailVerification","updateProfile","updateWorkoutEntry","createWorkoutEntry","removeWorkoutEntry","getPatientNutritionalPlan","updatePatientNutritionalPlan","doc_id","createPatientNutritionalPlan","docRef","getFoods","getBackendFoods","url","concat","axios","headers","accessToken","getFoodEntries","newDocRef","collection_path","pushPatientVisitData","visitId","patientRef","control_group","update","pullPatientVisitData","getUrlNotificationIcon","getDownloadURL","ref","sendNotification","body","post","getNotifications","createNotification","notificationDocRef","updateNotification","notification_id","getPathologies","listWorkouts","updatePatientAppointments","appointments","updatePatientWorkouts","getPatientNotifications","collectionGroup","getPatientVisits","visitsRef","getDailyPatientNutrients","formData","FormData","append","user_id","today_date","config","updateSeenNotificationStatus","notificationId","notificationDocument","seen","getNutritionalPlanTemplates","updateNutritionalPlanTemplate","createNutritionalPlanTemplate","deleteNutritionalPlanTemplate","templateId","updateCurrentLanguage","languageCode","getPatientNutrients","getPatientKcals","updatePatientStatus","newStatus","status","getPatientVisit","createPatientVisit","removePatientVisit","updatePatient","getPatientProtected","patientData","id","getStatistics","dropOutPatient","droppedAt","getDroppedPatients","createPatientGroupControl","collectionRef","removeControlGroupPatient","newRef","getPatientById","removePathology","pathologyId","createPathology","pathology","updateFood","food","getPathologyById","getFoodsAfter","items","after","startAfter","getFoodsBefore","before","endBefore","searchFoodByName","queryText","getFoodsWithLimit","setPatientDroppedOut","dropped","recoverDroppedPatient","undefined","exportPatientVisits","modifyPatientVisit","patientVisit","deletePatientVisit","patientVisitRef","Provider","SecureRoute","Component","component","rest","render","props","to","theme","createTheme","useStyles","makeStyles","errorAlert","width","marginTop","spacing","backdrop","zIndex","drawer","color","mainLogo","skeleton","paddingTop","withStyles","root","label","name","Notification","handleClose","event","reason","close","this","open","severity","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","action","IconButton","key","aria-label","onClick","Alert","elevation","variant","defaultProps","headerTable","backgroundColor","formControl","margin","minWidth","palette","background","paper","position","overflow","maxHeight","borderRadius","shape","alpha","common","black","marginLeft","breakpoints","up","searchIcon","padding","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","StyledTableRow","hover","TableRow","StyledTableCell","head","white","fontSize","TableCell","StyledDialogTitle","DialogTitle","BootstrapDialogTitle","other","style","right","top","table","container","DenseTable","handleModifyDialog","classes","page","setPage","setRowsPerPage","Paper","className","TableContainer","Table","size","stickyHeader","TableHead","strings","align","TableBody","slice","map","i","scope","proteins","TablePagination","rowsPerPageOptions","count","length","onPageChange","newPage","onRowsPerPageChange","parseInt","target","closeButton","grey","ModifyDialogFood","inputMeal","handleChangeValues","meal","setMeal","handleChange","prop","Dialog","maxWidth","fullWidth","scroll","Typography","DialogContent","TextField","type","onChange","inputProps","step","DialogActions","Button","PersonalData","handleGenderChange","handleTextFieldChange","handlePregnantChange","lastName","firstName","isPregnant","Fragment","gutterBottom","Grid","item","xs","sm","required","autoComplete","FormControl","InputLabel","Select","labelId","MenuItem","InputLabelProps","shrink","helperText","FormGroup","FormControlLabel","disabled","control","Checkbox","checked","pageName","OtherDetails","therapyStartDate","therapyEndDate","handleGroupChange","controlGroup","md","Account","phoneNumber","isPasswordShown","setIsPasswordShown","direction","InputProps","endAdornment","InputAdornment","onMouseDown","e","preventDefault","Resume","AlertTitle","List","dense","ListItem","ListItemText","secondary","primary","Divider","layout","marginRight","marginBottom","stepper","buttons","button","CreatePatient","activeStep","setActiveStep","Set","skipped","setSkipped","isStepOptional","isStepSkipped","has","state","setState","setError","setMessage","isMountedRef","useRef","s","handleSave","current","surname","fromDate","Date","String","trim","toLowerCase","bcryptjs","hashSync","genSaltSync","toString","Backdrop","CircularProgress","Container","Stepper","indexStep","stepProps","labelProps","optional","completed","Step","StepLabel","getStepContent","prevActiveStep","prevSkipped","newSkipped","values","card","minHeight","PatientWeightsGraph","labels","backdropOpen","fetchData","useCallback","_fetchData","snapshot","sort","b","toDate","w","push","toLocaleDateString","datasets","borderColor","borderWidth","PatientNutrientsGraph","data_fats","data_proteins","data_carbs","data_sum","filter","kcal_today_limit","kcal_actual","kcal_carbs_actual","kcal_proteins_actual","kcal_fats_actual","kcal_carbs_today_limit","kcal_proteins_today_limit","kcal_fats_today_limit","food_entries","quantity","group_day","total_kcal","kcal_carb","kcal_prot","kcal_fat","group_month","group_year","currentDate","setCurrentDate","offSet","getTimezoneOffset","getTime","toISOString","split","offset","Promise","all","snapShotEntries","_data","docs","find","food_id","grams","kcal_fats","kcal_prots","kcal_carbs","Object","keys","object_day","object_month","object_year","zoom","setZoom","options","plugins","legend","usePointStyle","pointStyle","textAlign","title","text","tooltip","callbacks","footer","tooltipItem","dataIndex","dataset","v","reduce","prev","cur","parseFloat","toFixed","defaultValue","date","valueAsDate","moment","isValid","toLocaleString","divider","PatientWorkoutsGraph","list_patient_workouts","duration","result","statusText","kcals","tot_kcal","workout","flat","useTabPanelStyles","TabPanel","index","role","hidden","aria-labelledby","classNames","Box","p","a11yProps","useVerticalTabsStyles","flexGrow","tabs","borderRight","useFullWidthTabsStyles","FullWidthTabs","setValue","AppBar","Tabs","newValue","indicatorColor","textColor","centered","Tab","input","cardActions","Notifications","useParams","token","location","nextFetch","image","filtered","tokenError","emptyTitle","emptyDescription","notification","setNotification","handleCreateNotification","res","doc_notification","event_time","category","catch","err","handleFilterChange","event_time_timestamp","handleNotificationChanges","Card","CardHeader","avatar","Avatar","subheader","CardContent","multiline","maxRows","minRows","CardActions","endIcon","paddingBottom","Chip","useCardStyles","expand","transform","shortest","expandOpen","NoteCard","deleteRequest","newTitle","newDescription","modifyPatientNote","note","handleModifyClick","expanded","setExpanded","disableSpacing","clsx","aria-expanded","dividers","DialogContentText","Collapse","in","timeout","unmountOnExit","paragraph","visuallyHidden","border","clip","WarningIconStyled","ErrorIconStyled","CheckCircleIconStyled","PATIENT_STATUS","useToolbarStyles","paddingRight","highlight","main","lighten","light","dark","flex","EnhancedTableToolbar","numSelected","handleSearch","onRequestDropOut","onRequestNotes","onRequestVisit","onRequestChangeStatus","onRequestRecoverDropped","Toolbar","Tooltip","getMainActionButtons","EnhancedTableHead","onSelectAllClick","order","rowCount","onRequestSort","headCells","indeterminate","headCell","numeric","disablePadding","sortDirection","TableSortLabel","active","property","descendingComparator","TablePatients","history","handleDropout","changePatientStatus","recoverDropped","setOrder","setOrderBy","selected","setSelected","isSelected","indexOf","emptyRows","Math","min","overrides","MuiTableRow","selectedOpacity","ThemeProvider","titlePage","newSelecteds","n","array","comparator","stabilizedThis","el","stableSort","getComparator","tabIndex","selectedIndex","newSelected","handleClick","isDropped","getPatientStatusIcon","colSpan","MuiSwitch","colorSecondary","form","flexDirection","innerBox","ConfirmDeletionDialog","autoFocus","SEVERITY","FamilyHistory","onClickBack","onClickNext","obesity","setChecked","handleNextClick","selection","under_55","formatString","over_55","parts","TitleStepper","ListSubheader","under_obesity","enable_obesity","ListItemIcon","edge","disableRipple","ListItemSecondaryAction","Switch","under_diabetes","enable_diabetes","under_heartAttack","enable_heartAttack","under_hypertension","enable_hypertension","under_dyslipidemia","enable_dyslipidemia","under_thyroid","enable_thyroid","ButtonGroup","startIcon","RadioButtonsGroup","FormLabel","RadioGroup","Radio","CheckboxComponent","labelPlacement","patientAge","patientOccupation","educationalQualification","maritalStatus","handleTextfieldChange","readOnly","PhysiologicalAnamnesis","exSmoker","useLaxatives","amountCigarettes","menstrualCycles","handleSelectChange","SelectPathologiesDialog","setValues","setPathologies","pathologyName","setPathologyName","addPathology","pats","fetchPathologies","handleCancel","currIndex","newChecked","splice","handleToggle","k","handleSelect","PathologicalHistory","previous_pathologies","previous_dialog_open","inprogress_pathologies","inprogess_dialog_open","c","SubTittleStepper","PhysicalExamination","abdomen","BloodChemistryTest","exam_date","MetabolismCalculation","daily","tot","BioimpedanceAnalysis","bodyFat","bodyWater","leanMass","SwitchLabels","WeightHistory","handleSwitchChange","monthsGetFat","placeholder","FoodAnamnesis","alcoholCalories","carbohydrates","lipids","grams_carbs","grams_lipidi","grams_prots","EatingBehavior","prandial_hyperphagia","compulsive_binge","plucking","emotional_eating","night_eating","selective_craving","NutritionalPlan","kcal_therapeutic_target","kcal_carb_target","kcal_prot_target","kcal_lipids_target","exercise_target","Allergies","medications","medications_text","foods_text","TestPerformance","liftedFromChair","gateSpeed","walkingTestMeters","walkingTestTime","handgripMano","lifted_from_chair","gate_speed","walking_test_meters","walking_test_time","clean_body","setVelocity","PsychometricTest","som","obs_comp","interp_sens","dep","anx","anger_host","phob","paran","psych","sleep","tot_tefq51","tot_orwell","restriz","disinibiz","fame","sint_fis","impatto_psisoc","scl90_score","bes_score","free_desc_psycho_test","scoreIpaq","openBackdrop","fetchPatientVisitData","parseToFloat","isNaN","sum","arr","handleORWELLChange","handleTEFQ51Change","SlideTransition","Slide","alternativeLabel","left","line","borderTopWidth","StepConnector","circle","heading","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","useRowStyles","borderBottom","tableContainer","Row","setOpen","visits","join","includes","csvContent","header","link","document","createElement","setAttribute","encodeURI","appendChild","click","parentNode","removeChild","fontWeight","row_label","j","strValue","TableToolbar","GENDER","ControlGroupPatientsTable","isItemSelected","authRoutes","path","setBackdropOpen","handleSubmit","currentTarget","setRememberMe","CssBaseline","sx","src","onSubmit","noValidate","mt","prevState","mb","pathname","confirmPassword","handleShowPassword","handleMouseDownPassword","confirmEmail","appRoutes","fetchPatients","dropPatientOut","handleChangePatientStatus","handleRecoverDropped","createData","searchText","visitName","errorVisitName","nextUpdate","snackbar","confirmDeletion","selectedVisit","fetchPatientVisits","icons","icon","handleSnackbarClose","handleClickDeletePatientVisit","handleClickModifyPatientVisit","handleClickNewVisit","prevVisit","keepMounted","confirmation","visitFound","handleListItemClick","goToPatientVisit","checked_food","template_uid","new_checked_food","newRows","messageNotification","openNotification","templates","promises","templates_nutritional_plan","snap_foods","snap_nutritional_plan","notEmpty","plans","currentPlan","handleQuantityChange","disableEscapeKeyDown","_food","f","fullDays","_","FormHelperText","Autocomplete","multiple","disableCloseOnSelect","getOptionSelected","option","getOptionLabel","renderOption","checkedIcon","renderInput","params","currentIndex","template","handleClickDelete","emptyPlan","name_templates","new_name_template","openNewTemplateDialog","isNewTemplate","handleCloseNewTemplateDialog","lastOne","newName","newDoc","filteredFood","selectedFood","searchFood","updatedFood","newUpdatedFood","updatedFoods","parsedFood","fetchNextItems","lastFood","fetchPreviousItems","firstFood","handleSearchRemote","fetchWorkouts","statistics","fetchStatistics","eldest","lowest","tallest","youngest","responsive","orientation","patient_workouts","updateWorkouts","handleSaveClick","patient_data","difficulty","from","ListItemAvatar","handleCheckWorkout","isMounted","finally","m","bgcolor","refreshPage","fetchPatientData","panel","isExpanded","ordered_appointments","gender_value","valueOf","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","flexWrap","currentTime","timestamp","isLoading","_exportPatientVisits","exportVisits","fetchPatientNotes","addPatientNote","removePatientNote","handleCreateClick","unshift","handleDeleteClick","handleNext","newStep","handleExport","handleBack","handleCloseSnackbar","nonLinear","StepButton","TransitionComponent","weights","error_name","error_surname","error_phone_number","error_email","error_password","error_weight","error_height","handleRemovePatients","patientIds","AppLayout","appBar","drawerPaper","toolbar","mixins","drawerContainer","grow","content","fontWeightBold","textTransform","sectionDesktop","nested","ElevationScroll","window","trigger","useScrollTrigger","disableHysteresis","threshold","cloneElement","colorPrimary","KeyboardArrowRightIcon","StyledBadge","badge","boxShadow","animation","opacity","Badge","ConfirmationDialog","valueProp","remove","NewAppointmentDialog","persist","AuthLayout","getPageName","meanHeight","meanWeight","meanAges","males","females","openConfirmationDialog","confirmState","openNewAppointmentDialog","newAppointment","updatePatientData","anchorEl","openMenu","menu","openExportCollapseMenuList","fetchPatientsData","fetchPatientById","handleMenuClose","handleSignout","verifyAccount","renderNotificationsMenu","Menu","transformOrigin","renderMenu","getContentAnchorEl","emailVerified","handleOnCloseAppointmentDialog","handleOnCloseDialog","avg_reducer","snapPatients","abs","mean_ages","mean_weight","mean_height","code","locale","isoCode","fromCodePoint","toUpperCase","replace","char","charCodeAt","disableFocusListener","disableTouchListener","overlap","Boolean","aria-haspopup","Drawer","anchor","firebase_device_token","my","exact","Helmet","Copyright","Link","href","getFullYear","NotFound","App","ReactDOM","getElementById"],"mappings":"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A,oBACA,OACA,mBACA,SACA,OACA,UACA,YACA,cACA,SACA,SACA,MACA,qBACA,sBACA,cACA,eACA,aACA,WACA,sBACA,kBACA,iBACA,mBACA,kBACA,kBACA,qBACA,qBACA,UACA,yCACA,sCACA,KACA,cACA,MACA,MACA,gBACA,WACA,cACA,YACA,gBACA,MACA,MACA,MACA,YACA,2BACA,yBACA,WACA,YACA,aACA,gBACA,WACA,aACA,aACA,cACA,mBACA,oBACA,aACA,eACA,QACA,kBACA,YACA,kBACA,cACA,eACA,cACA,uBACA,mBACA,WACA,mBACA,eACA,oBACA,YACA,0BACA,mBACA,qBACA,mBACA,kBACA,QACA,aACA,cACA,mBACA,oBACA,aACA,sBACA,oBACA,eACA,MACA,WACA,cACA,MACA,MACA,aACA,OACA,QACA,QACA,QACA,aACA,aACA,UACA,YACA,OACA,WACA,iBACA,YACA,cACA,wBACA,YACA,UAEJzH,KAAM,GACNmR,WAAW,IAnIf,mBAAO7nB,EAAP,KAAcC,EAAd,KAqIA,EAA8Clb,IAAtC+M,EAAR,EAAQA,oBAAqBxH,EAA7B,EAA6BA,YACvBw9B,EAAuBljC,IAAM6d,aAAY,SAACvsB,EAAUiW,GAAX,OAAuB2F,EAAoB5b,EAAUiW,KAAU,IACxGiU,EAAexb,IAAMyb,OAAO,MAClCzb,IAAM6C,WAAU,WAqBZ,OAJA2Y,EAAaI,SAAU,EAIhB,kBAAMJ,EAAaI,SAAU,KAErC,CAACsnB,EAAsB9nB,EAAMme,OAAQne,EAAM9pB,WAE9C,IAAM6xC,EAAY,uCAAG,sCAAAliC,EAAA,6DACX3P,EAAqB8pB,EAArB9pB,SAAUioC,EAAWne,EAAXme,OADC,kBAIM2J,EAAqB5xC,EAAUioC,GAJrC,OAIT/V,EAJS,OAMPvhB,EAASuhB,EAATvhB,KAEFq3B,EAAa,+BAEjBA,GAAcC,EAAOH,KAAK,KAAK/xB,OAAO,MAEtCpF,EAAKk3B,OAAO9zB,SAAQ,SAACnL,EAAOya,GACxB4kB,EAAOl0B,SAAQ,SAACk0B,EAAQY,GAEpBb,GAAcp/B,EAAMq/B,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E,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,EACD,OACI,kBAAC84B,GAAD,CACIzE,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,EACD,OACI,kBAACg5B,GAAD,CACI3E,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,EACD,OACI,kBAACm5B,GAAD,CACI9E,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,EACD,OACI,kBAACw5B,GAAD,CACInF,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,EACD,OACI,kBAAC45B,GAAD,CACIvF,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,GACD,OACI,kBAACm6B,GAAD,CACI9F,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,GACD,OACI,kBAAC,GAAD,CACIq0B,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,GACD,OACI,kBAACg7B,GAAD,CACI3G,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,GACD,OACI,kBAACo7B,GAAD,CACI/G,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB,EAAMyjB,GAChBxc,MAAOA,IAGnB,KAAK,GACD,OACI,kBAACg8B,GAAD,CACI3H,YAAasV,EACbrV,YAAakV,EACbvwC,QAASA,EACTulB,SAAUzlB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","file":"static/js/main.90571305.chunk.js","sourcesContent":["// import firebase from \"firebase/compat/app\"\nimport { initializeApp } from \"firebase/app\"\nimport { getStorage } from \"firebase/storage\"\nimport { doc, getFirestore, collection } from \"firebase/firestore\"\nimport { getAuth } from \"firebase/auth\";\nimport { getAnalytics } from \"firebase/analytics\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_ID,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n}\n\nconst app = initializeApp(firebaseConfig)\nexport const analytics = getAnalytics(app);\nexport const storage = getStorage(app);\nexport const auth = getAuth();\nexport const db = getFirestore();\n\nexport const collections = {\n    patients: collection(db, \"patients\"),\n    workouts: collection(db, \"workouts\"),\n}\n\nexport const documents = {\n    patient: (uid) => doc(db, \"patients\", uid),\n}\n","import LocalizedStrings from \"react-localization\";\nexport default new LocalizedStrings({\n    en: {\n        pageTitles: {\n            therapy_status: \"Therapy Status\",\n            notifications: \"Notifications\",\n            nutritional_plan: \"Nutritional Plan\",\n            physical_exercises: \"Physical Exercises\",\n            patients: \"Patients\",\n            add_patient: \"Add patient\",\n            foods: \"Foods\",\n            workouts: \"Workouts\",\n            medical_visit: \"Medical visit\",\n            details_patient: \"Patient details\",\n            patient_statistics: \"Patients statistics\",\n            export_data: \"Export data\",\n            nutritional_plans: \"Nutritional Plans\",\n            notes: \"Notes\",\n            update_profile: \"Update profile\",\n        },\n        measures: {\n            height: \"Height\",\n            weight: \"Weight\",\n            age: \"Age\",\n            middle_age: \"Middle age\",\n            steps: \"Steps\",\n            minutes: \"Minutes\",\n        },\n        patient: {\n            first_name: \"First name\",\n            last_name: \"Last name\",\n            full_name: \"{0} {1}\",\n            gender: \"Gender\",\n            email: \"Email\",\n            dateOfBirth: \"Date of birth\",\n            search: \"Search patient...\",\n            occupation: \"Occupation\",\n            educational_qualification: \"Educational qualification\",\n            marital_status: \"Marital status\",\n            ethnicity: \"Ethnicity\",\n            overweight: \"Overweight\",\n            diabetes: \"Diabetes\",\n            heartAttack: \"Heart attack\",\n            hypertension: \"Hypertension\",\n            dyslipidemia: \"Dyslipidemia\",\n            thyroid: \"Thyroid\",\n            smoker: \"Smoker\",\n            smoker_ex: \"Ex smoker\",\n            alcoholic: \"Alcohol\",\n            laxatives_uses: \"Use laxatives\",\n            incontinence: \"Incontinence\",\n            snoring: \"Snoring\",\n            insomnia: \"Insomnia\",\n            menopause: \"Menopause\",\n            pregnancies: \"Pregnacies\",\n            pregnant: \"Pregnant\",\n            abortions: \"Abortions\",\n            amount_cigarettes: \"Amount of cigarettes\",\n            alvo: \"Alvo\",\n            menstrual_cycles: \"Menstrual cycles\",\n            patient_account: \"Patient account\",\n            remove_patient: \"Remove patient\",\n            patient_id: \"Patient ID\",\n            patient_age: \"Age\",\n        },\n        therapy: {\n            start: \"Therapy start date\",\n            end: \"Therapy end date\",\n        },\n        account: {\n            sign_in: \"Sign in\",\n            sign_out: \"Sign out\",\n            sign_up: \"Sign up\",\n            forgot_password: \"Forgot password?\",\n            have_account: \"Already have an account?\",\n            password: \"Password\",\n            confirm_password: \"Confirm Password\",\n            confirm_email: \"Confirm Email\",\n            avatar_upload: \"Upload avatar\",\n            no_account: \"Don't have an account?\",\n            remember_me: \"Remember me\",\n            reset: \"Reset\",\n            modify_profile: \"Modify profile\",\n            verify_email: \"Verify email\",\n            profile: \"Profile\",\n            doctor: \"Doctor\",\n            modify_patient_data: \"Modify patient data\",\n            personal_data: \"Personal data\",\n        },\n        general: {\n            cancel: \"Cancel\",\n            error: \"Error\",\n            done: \"Done\",\n            confirm: \"Confirm\",\n            modify: \"Modify\",\n            save: \"Save\",\n            create: \"Create\",\n            from_patient_list: \"from patient list\",\n            all_patient_data: \"all patient data\",\n            select_choice_before_confirmation: \"Select a choice before confirmation\",\n            select_day_time: \"Select a day and time\",\n            create_new_appointment: \"New appointment\",\n            male: \"Male\",\n            female: \"Female\",\n            anonym: \"anonym\",\n            consent: \"Patient informed consent\",\n            back: \"Back\",\n            next: \"Next\",\n            choose: \"Choose\",\n            year: \"Year\",\n            month: \"Month\",\n            day: \"Day\",\n            time: \"Time\",\n            graphs: \"Graphs\",\n            tables: \"Tables\",\n            under_construction: \"Working on...\",\n            data_saved: \"All data has been saved\",\n            see_more: \"See more\",\n            patients_number: \"Patients number\",\n            phone_number: \"Phone\",\n            empty_list: \"Empty list\",\n            add: \"Add\",\n        },\n        days: {\n            mon: \"Monday\",\n            tue: \"Tuesday\",\n            wed: \"Wednesday\",\n            thu: \"Thursday\",\n            fri: \"Friday\",\n            sat: \"Saturday\",\n            sun: \"Sunday\",\n        },\n        meals: {\n            breakfast: \"Breakfast\",\n            morning_break: \"Morning\",\n            lunch: \"Lunch\",\n            afternoon_break: \"Afternoon break\",\n            dinner: \"Dinner\",\n            meals: \"Meals\",\n        },\n        relationship: {\n            father: \"Father\",\n            mother: \"Mother\",\n            siblings: \"Siblings\",\n            uncle: \"Uncles\",\n            grandparents: \"Grandparents\",\n        },\n        visit: {\n            steps: {\n                data_patient: \"Patient Data\",\n                family_history: \"Family History\",\n                physiological_anamnesis: \"Physiological Anamnesis\",\n                pathological_anamnesis: \"Pathological Anamnesis\",\n                physical_examination: \"Physical Examination\",\n                blood_chemistry: \"Blood chemistry test\",\n                calculation_metabolism: \"Calculation Metabolism\",\n                bioimpedance: \"Bioimpedance analysis\",\n                weight_history: \"Weight history\",\n                food_anamnesis: \"Food anamnesis data\",\n                eating_behavior: \"Eating behavior\",\n                nutritional_plan: \"Nutritional plan\",\n                allergies: \"Allergies\",\n                test_performance: \"Test performance\",\n                test_psychometric: \"Test Psychometric\",\n            },\n            eating_disorder: \"Eating disorder\",\n            mood_disturbance: \"Mood disturbance\",\n            anxiety_disorder: \"Anxiety disorder\",\n            psychosis: \"Psychosis\",\n            personality_disorder: \"Personality disorder\",\n            pathologies_inprogress: \"Pathologies in progress\",\n            pathologies_previous: \"Previous pathologies\",\n            pathologies: \"Pathologies\",\n            weight: \"Weight\",\n            middleweight: \"Middleweight\",\n            height: \"Height\",\n            middleheight: \"Middleheight\",\n            heart_tones: \"Heart tones\",\n            heart_murmur: \"\",\n            heart_rate: \"Heart rate\",\n            mv_chest: \"MV Chest\",\n            pathological_noises: \"Pathological noises\",\n            murphy_blumberg: \"\",\n            palpable_liver: \"\",\n            palpable_thyroid: \"\",\n            declining_edema: \"Declining edema\",\n            carotid_murmurs: \"\",\n            min_blood_pressure: \"\",\n            max_blood_pressure: \"\",\n            bmi: \"BMI\",\n            nutrients: \"Nutrients\",\n            under: \"Under {age}\",\n            over: \"Sopra {age}\",\n            new_visit: \"Add new visit\",\n            no_visits: \"No visits\",\n            visit_name: \"Name medical visit\",\n            select_pathologies: \"Select pathologies\",\n            patient_age: \"Age\",\n            gender: \"Sex\",\n        },\n        nutrients: {\n            carbs: \"Carbohydrates\",\n            prots: \"Proteins\",\n            fats: \"Fats\",\n            calcium: \"Calcium\",\n            energy: \"Energy\",\n            chol: \"Cholesterol\",\n        },\n    },\n    it: {\n        nutrients: {\n            carbs: \"Carboidrati\",\n            prots: \"Proteine\",\n            fats: \"Grassi\",\n            calcium: \"Calcio\",\n            energy: \"Energia\",\n            chol: \"Colesterolo\",\n        },\n        pageTitles: {\n            therapy_status: \"Status terapia\",\n            notifications: \"Notifiche\",\n            nutritional_plan: \"Piano nutrizionale\",\n            physical_exercises: \"Esercizi fisici\",\n            patients: \"Pazienti\",\n            add_patient: \"Aggiungi paziente\",\n            foods: \"Pasti\",\n            workouts: \"Allenamenti\",\n            medical_visit: \"Visita medica\",\n            details_patient: \"Dettagli paziente\",\n            patient_statistics: \"Statistiche pazienti\",\n            export_data: \"Esporta dati\",\n            nutritional_plans: \"Piani nutrizionali\",\n            notes: \"Note\",\n            update_profile: \"Aggiorna profilo\",\n        },\n        measures: {\n            height: \"Altezza\",\n            weight: \"Peso\",\n            age: \"Eta'\",\n            middle_age: \"Eta' media\",\n            steps: \"Passi\",\n            minutes: \"Minuti\",\n        },\n        patient: {\n            first_name: \"Nome\",\n            last_name: \"Cognome\",\n            full_name: \"{0} {1}\",\n            gender: \"Genere\",\n            email: \"Email\",\n            dateOfBirth: \"Data di nascita\",\n            search: \"Cerca paziente...\",\n            occupation: \"Professione\",\n            educational_qualification: \"Titolo di studio\",\n            marital_status: \"Stato civile\",\n            ethnicity: \"Etnia\",\n            overweight: \"Sovrappeso\",\n            diabetes: \"Diabete\",\n            heartAttack: \"Infarto del cuore\",\n            hypertension: \"Ipertensione\",\n            dyslipidemia: \"Dislipidemia\",\n            thyroid: \"Malattia della tiroide\",\n            smoker: \"Fumatore\",\n            smoker_ex: \"Ex fumatore\",\n            alcoholic: \"Alcool\",\n            laxatives_uses: \"Uso lassativi\",\n            incontinence: \"Incontinenza\",\n            snoring: \"Russamento\",\n            insomnia: \"Insonnia\",\n            menopause: \"Menopausa\",\n            pregnancies: \"Gravidanze\",\n            pregnant: \"Incinta\",\n            abortions: \"Aborti\",\n            amount_cigarettes: \"Quantita' sigarette\",\n            alvo: \"Alvo\",\n            menstrual_cycles: \"Cicli mestruali\",\n            patient_account: \"Account paziente\",\n            remove_patient: \"Rimuovi paziente\",\n            patient_id: \"ID Paziente\",\n            patient_age: \"Eta'\",\n\n        },\n        therapy: {\n            start: \"Data inizio terapia\",\n            end: \"Data fine terapia\",\n        },\n        account: {\n            sign_in: \"Accedi\",\n            sign_out: \"Esci\",\n            sign_up: \"Registrati\",\n            forgot_password: \"Password dimenticata?\",\n            have_account: \"Sei già registrato?\",\n            password: \"Password\",\n            // reset_password: \"Reimposta password\",\n            confirm_password: \"Conferma Password\",\n            confirm_email: \"Conferma Email\",\n            avatar_upload: \"Carica avatar\",\n            no_account: \"Non sei registrato?\",\n            remember_me: \"Ricorda\",\n            reset: 'Reimposta',\n            modify_profile: \"Modifica profilo\",\n            verify_email: \"Verifica email\",\n            profile: \"Profilo\",\n            doctor: \"Dottore\",\n            modify_patient_data: \"Modifica dati paziente\",\n            personal_data: \"Data anagrafici\",\n        },\n        general: {\n            cancel: \"Annulla\",\n            error: \"Errore\",\n            done: \"Fatto\",\n            confirm: \"Conferma\",\n            save: \"Salva\",\n            modify: \"Modifica\",\n            create: \"Crea\",\n            from_patient_list: \"dalla propria lista pazienti\",\n            all_patient_data: \"tutti i dati del paziente\",\n            select_choice_before_confirmation: \"Seleziona una voce prima di confermare\",\n            select_day_time: \"Seleziona il giorno e l'ora\",\n            create_new_appointment: \"Nuovo appuntamento\",\n            male: \"Maschio\",\n            female: \"Femmina\",\n            anonym: \"anonimo\",\n            consent: \"Consenso informato paziente\",\n            back: \"Indietro\",\n            next: \"Avanti\",\n            choose: \"Seleziona\",\n            description: \"Description\",\n            year: \"Anno\",\n            month: \"Mese\",\n            day: \"Giorno\",\n            time: \"Orario\",\n            tables: \"Tabelle\",\n            graphs: \"Grafici\",\n            under_construction: \"Lavori in corso ...\",\n            data_saved: \"Tutti i dati sono stati salvati\",\n            patients_number: \"Numero di pazienti\",\n            see_more: \"Vedi di piu'\",\n            phone_number: \"Cellulare\",\n            empty_list: \"Lista vuota\",\n            add: \"Aggiungi\",\n        },\n        days: {\n            mon: \"Lunedì\",\n            tue: \"Martedì\",\n            wed: \"Mercoledì\",\n            thu: \"Giovedì\",\n            fri: \"Venerdì\",\n            sat: \"Sabato\",\n            sun: \"Domenica\",\n        },\n        meals: {\n            breakfast: \"Colazione\",\n            morning_break: \"Spuntino\",\n            lunch: \"Pranzo\",\n            afternoon_break: \"Pausa pomeridiana\",\n            dinner: \"Cena\",\n            meals: \"Pasti\"\n        },\n        relationship: {\n            father: \"Padre\",\n            mother: \"Madre\",\n            siblings: \"Fratelli\",\n            uncle: \"Zio\",\n            grandparents: \"Nonni\",\n        },\n        visit: {\n            steps: {\n                data_patient: \"Dati paziente\",\n                family_history: \"Anamnesi Familiare\",\n                physiological_anamnesis: \"Anamnesi Fisiologica\",\n                pathological_anamnesis: \"Anamnesi Patologica\",\n                physical_examination: \"Esame Obiettivo\",\n                blood_chemistry: \"Esami Ematochimici\",\n                calculation_metabolism: \"Calcolo Metabolismo\",\n                bioimpedance: \"Bioimpedenziometria\",\n                weight_history: \"Storia del peso\",\n                food_anamnesis: \"Dati anamnesi alimentare\",\n                eating_behavior: \"Comportamento alimentare\",\n                nutritional_plan: \"Piano nutrizionale\",\n                allergies: \"Allergie\",\n                test_performance: \"Test performance\",\n                test_psychometric: \"Test psicometrici\",\n            },\n            eating_disorder: \"Disturbo alimentare\",\n            mood_disturbance: \"Disturbo dell'umore\",\n            anxiety_disorder: \"Disturbo di ansia\",\n            psychosis: \"Psicosi\",\n            personality_disorder: \"Disturbo di personalita'\",\n            pathologies_inprogress: \"Patologie in atto\",\n            pathologies_previous: \"Patologie pregresse\",\n            neck_circumference: \"Circonferenza collo\",\n            waist_circumference: \"Circonferenza vita\",\n            narrowest_point: \"punto piu' stretto\",\n            waist_circumference_narrowest_point: \"punto piu' stretto\",\n            iliac_spine_height: \"altezza spina iliaca anterusperiore\",\n            waist_circumference_iliac_spine_height: \"altezza spina iliaca anterusperiore\",\n            pathologies: \"Patologie\",\n            select_pathologies: \"Seleziona patologie\",\n            weight: \"Peso\",\n            middleweight: \"Peso medio\",\n            height: \"Altezza\",\n            middleheight: \"Altezza media\",\n            heart_tones: \"Toni cardiaci\",\n            heart_murmur: \"Soffio cardiaco\",\n            heart_rate: \"Frequenza cardiaca\",\n            mv_chest: \"MV al torace\",\n            pathological_noises: \"Rumori patologici\",\n            murphy_blumberg: \"Segni di Murphy e Blumberg\",\n            palpable_liver: \"Fegato palpabile\",\n            palpable_thyroid: \"Tiroide palpabile\",\n            declining_edema: \"Edemi declivi\",\n            carotid_murmurs: \"Soffi carotidei\",\n            min_blood_pressure: \"Pressione arteriosa MIN\",\n            max_blood_pressure: \"Pressione arteriosa MAX\",\n            bmi: \"BMI\",\n            nutrients: \"Nutrienti\",\n            under: \"Sotto {age}\",\n            over: \"Sopra {age}\",\n            new_visit: \"Aggiungi nuova visita\",\n            no_visits: \"Nessuna visita\",\n            visit_name: \"Nome visita medica\",\n            patient_age: \"Eta'\",\n            gender: \"Sesso\",\n            patient_occupation: \"Professione\",\n            educational_qualification: \"Titolo di studio\",\n            marital_status: \"Stato civile\",\n            ethnicity: \"Etnia\",\n            smoker: \"Fumatore\",\n            ex_smoker: \"Ex fumatore\",\n            alcoholic: \"Alcool\",\n            use_laxatives: \"Uso lassativi\",\n            incontinence: \"Incontinenza\",\n            snoring: \"Russamento\",\n            insomnia: \"Insonnia\",\n            menopause: \"Menopausa\",\n            pregnancies: \"Gravidanze\",\n            abortions: \"Aborti\",\n            amount_cigarettes: \"Quantita' sigaretta\",\n            alvo: \"Alvo\",\n            menstrual_cycles: \"Cicli mestruali\",\n            eating: \"Disturbo alimentare\",\n            mood: \"Disturbo dell'umore\",\n            anxiety: \"Disturbo di ansia\",\n            personality: \"Disturbo di personalita'\",\n            hb: \"Hb (g/dl)\",\n            cholesterol: \"Colesterolo totale (mg/dl)\",\n            hdl: \"HDL (mg/dl)\",\n            ldl: \"LDL (mg/dl)\",\n            triglycerides: \"Trigliceridi (mg/dl)\",\n            glycemia: \"Glicemia (mg/dl)\",\n            glycated_hb: \"Hb glicata (mmol/mol Hb)\",\n            uric_acid: \"Acido urico (mg/dl)\",\n            consent: \"Consenso informato paziente\",\n            creatininemia: \"Creatininemia (mg/dl)\",\n            alt: \"Alt (U/I)\",\n            ggt: \"GGT (U/I)\",\n            tsh: \"TSH (mUI/I)\",\n            daily_energy_expenditure: \"Disp. energ. gg a riposo kcal/die\",\n            tot_energy_expenditure: \"Tot. disp. energ. kcal/die\",\n            body_fat: \"Grasso corporeo %\",\n            body_water: \"Acqua corporea %\",\n            lean_mass: \"Masso magra %\",\n            yourselfDiets: \"Diete fatte da te\",\n            proDiets: \"Diete con professionista\",\n            heavyweight: \"Peso massimo kg\",\n            weightMaintained: \"Peso mantenuto kg\",\n            maximumWeightLoss: \"Massima perdita di peso kg\",\n            yearGetFat: \"Anno inizio aumento peso\",\n            diets: \"Tot. diete fatte\",\n            weightGain: \"Aumento graduale di peso si/no\",\n            weightLoss: \"Cali di peso si/no\",\n            averageCalories: \"Tot. cal. assunte in media\",\n            nutrients: \"Nutrienti\",\n            grams_carbs: \"Grammi nutrienti (carboidrati)\",\n            grams_lipidi: \"Grammi nutrienti (lipidi)\",\n            grams_prots: \"Grammi nutrienti (proteine)\",\n            alcoholCalories: \"Calorie da alcool\",\n            prandial_hyperphagia: \"Iperfagia prandiale\",\n            compulsive_binge: \"Abbuffata compulsiva (binge)\",\n            plucking: \"Piluccamento\",\n            emotional_eating: \"Emotional eating\",\n            night_eating: \"Night eating\",\n            selective_craving: \"Bramosia selettiva o craving\",\n            monthsGetFat: \"In quanti mesi\",\n            kcal_therapeutic_target: \"Target terapeutico\",\n            kcal_carb_target: \"Target % carboidrati\",\n            kcal_lipids_target: \"Target % lipidi\",\n            kcal_prot_target: \"Target % proteine\",\n            exercise_target: \"Target esericizio fisico\",\n            foods_text: \"Allimenti\",\n            medications_text: \"Farmaci\",\n            lifted_from_chair: \"lifted from chair\",\n            gate_speed: \"Camminata veloce\",\n            walking_test_meters: \"walking test meters\",\n            walking_test_time: \"walking test time\",\n            handgripMano: \"hand grip\",\n            som: \"som\",\n            obs_comp: \"obs comp\",\n            interp_sens: \" interp sens\",\n            dep: \"dep\",\n            anx: \"anx\",\n            anger_host: \"anger host\",\n            phob: \"phob\",\n            paran: \"paran\",\n            psych: \"psych\",\n            sleep: \"sleep\",\n            tot_tefq51: \"tefq51 punteggio\",\n            tot_orwell: \"orwell punteggio\",\n            restriz: \"restriz\",\n            disinibiz: \"disinibiz\",\n            fame: \"fame\",\n            sint_fis: \"sint fis\",\n            impatto_psisoc: \"impatto psisoc.\",\n            bes_score: \"bes punteggio\",\n            scl90_score: \"scl90 punteggio\",\n            free_desc_psycho_test: \"descrizione\",\n            scoreIpaq: \"ipaq punteggio\",\n            active: \"comportamento\",\n            exam_date: \"Data esame\",\n            createdAt: \"Data creazione visita\",\n            foods: \"Allimenti\",\n            medications: \"Farmaci\",\n            abdomen: \"Addome\",\n        },\n    },\n});\n","import React, { useContext, useState, useEffect } from \"react\"\nimport { auth, db, analytics, storage, collections, documents } from \"../services/firebase\"\nimport {\n    createUserWithEmailAndPassword,\n    setPersistence,\n    signInWithEmailAndPassword,\n    browserSessionPersistence,\n    signOut,\n    onAuthStateChanged,\n    sendPasswordResetEmail,\n    updateEmail as authUpdateEmail,\n    updatePassword as authUpdatePassword,\n    sendEmailVerification,\n    updateProfile as authUpdateProfile\n} from \"firebase/auth\";\nimport {\n    doc,\n    setDoc,\n    addDoc,\n    collection,\n    query, limit,\n    writeBatch, getDocs,\n    updateDoc, where,\n    deleteDoc, getDoc, deleteField, orderBy, collectionGroup, runTransaction, Timestamp,\n    startAfter, endBefore,\n} from \"firebase/firestore\";\nimport { logEvent } from 'firebase/analytics';\nimport { ref, getDownloadURL } from 'firebase/storage'\nimport axios from 'axios'\nimport Language from \"../components/Language\";\nimport detectBrowserLanguage from 'detect-browser-language'\n// import configuration from \"../configuration/config\";\n\nconst PATIENTS_DROPPED = \"dropped_patients\";\n\nconst AuthContext = React.createContext();\n\n/**\n * Use constants in order to avoid typos.\n */\nconst COLLECTIONS = {\n    PATIENTS: \"patients\",\n    CONTROL_GROUP: \"control_group_patients\",\n}\n\n/**\n * Custom hook\n * @returns React context\n */\nexport function useAuth() {\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider({ children }) {\n    const [currentUser, setCurrentUser] = useState()\n    const [loading, setLoading] = useState(true)\n\n    const [currentLanguage, setCurrentLanguage] = useState(localStorage.getItem('lang') || detectBrowserLanguage());\n\n    function updateCurrentLanguage(languageCode) {\n        setCurrentLanguage(() => languageCode);\n        Language.setLanguage(languageCode);\n    }\n\n    function getPatientWorkouts(patient_id, rows) {\n        return getDocs(query(collection(db, `patients/${patient_id}/workout_entry`), orderBy(\"time\", 'asc'), limit(rows)));\n    }\n\n    function verifyEmail() {\n        return sendEmailVerification(currentUser);\n    }\n\n    /**\n     * @description Run transaction that verifies if patient with given ID exists and its owner is the current user.\n     * @param {*} appointments List of appointment data time instances.\n     * @param {*} patientId Unique patient id.\n     * @returns {Promise} Result of transaction.\n     */\n    function updatePatientAppointments(appointments, patientId) {\n        return runTransaction(db, async (transaction) => {\n\n            const patientRef = doc(db, \"patients\", patientId);\n\n            const patient = await transaction.get(patientRef);\n\n            if (!patient.exists()) {\n                throw new Error(\"Patient does not exist\");\n            }\n\n            const { doctorId } = patient.data();\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            }\n\n            // update patient appointments list\n            transaction.update(patientRef, { appointments: appointments });\n\n        });\n    }\n\n    function modifyPatientVisit(patientId, visitId, data) {\n        return runTransaction(db, async (transaction) => {\n            const patientRef = doc(db, \"patients\", patientId);\n\n            const patient = await transaction.get(patientRef);\n\n            if (!patient.exists()) {\n                throw new Error(\"Patient does not exist\");\n            }\n\n            const { doctorId } = patient.data();\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            }\n\n            const patientVisit = doc(db, `patients/${patientId}/visits`, visitId);\n            transaction.update(patientVisit, data);\n        })\n    }\n\n    function recoverDroppedPatient(patientId) {\n        return runTransaction(db, async (transaction) => {\n            const patientRef = doc(db, \"patients\", patientId);\n\n            const patient = await transaction.get(patientRef);\n\n            if (!patient.exists()) {\n                throw new Error(\"Patient does not exist\");\n            }\n\n            const { doctorId, dropped } = patient.data();\n\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            }\n\n            if (dropped !== undefined && dropped) {\n                transaction.update(patientRef, {\n                    dropped: false,\n                })\n            }\n\n        })\n    }\n\n    function setPatientDroppedOut(patientId) {\n        return runTransaction(db, async (transaction) => {\n            const patientRef = doc(db, \"patients\", patientId);\n\n            const patient = await transaction.get(patientRef);\n\n            if (!patient.exists()) {\n                throw new Error(\"Patient does not exist\");\n            }\n\n            const { doctorId } = patient.data();\n\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            }\n\n            transaction\n                .update(patientRef, {\n                    dropped: true,\n                    droppedAt: Timestamp.now(),\n                });\n            //.get(patientRef);\n        });\n    }\n\n    /**\n     * \n     * @param {String} patientId Patient unique id\n     * @returns Transaction promise\n     */\n    function dropOutPatient(patientId) {\n        return runTransaction(db, async (transaction) => {\n            // get patient reference with given uid\n            const patientRef = doc(db, \"patients\", patientId);\n\n            // get patient data\n            const patient = await transaction.get(patientRef);\n\n            // verify if it exists\n            if (!patient.exists()) {\n                throw new Error(\"Patient does not exist\");\n            }\n\n            const { doctorId } = patient.data();\n            // check for doctor id\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            }\n\n            // change patient collection in order to drop out\n            transaction.set(doc(db, PATIENTS_DROPPED, patientId), {\n                ...patient.data(),\n                id: patientId,\n                droppedAt: Timestamp.now(),\n            })\n                .delete(patientRef);\n\n            // delete patient from previous collection\n            // return transaction.delete(patientRef);\n        });\n    }\n\n    /**\n     * @deprecated\n     * @param {*} workouts List of workouts\n     * @param {*} patientId Patient uid\n     * @returns Promise\n     */\n    function updatePatientWorkouts(workouts, patientId) {\n        return updateDoc(documents.patient(patientId), workouts);\n    }\n\n    /**\n     * @deprecated\n     * @param {*} body \n     * @param {*} patient_id \n     * @param {*} notification_id \n     * @returns \n     */\n    function updateNotification(body, patient_id, notification_id) {\n        return updateDoc(doc(db, `patients/${patient_id}/notifications`, notification_id), body);\n    }\n\n    /**\n     * @description Create patient notification\n     * @param {*} body Notification body\n     * @param {*} patientId Patient unique id\n     * @returns {Promise}\n     */\n    function createNotification(body, patientId) {\n        return runTransaction(db, async (transaction) => {\n            const patientRef = doc(db, \"patients\", patientId);\n\n            const patient = await transaction.get(patientRef);\n\n            if (!patient.exists()) {\n                throw new Error(\"Patient does not exist\");\n            }\n\n            const { doctorId } = patient.data();\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            }\n\n            const notificationDocRef = doc(collection(db, `patients/${patientId}/notifications`))\n            transaction.set(notificationDocRef, body);\n        })\n        //return setDoc(doc(collection(db, `patients/${patient_id}/notifications`)), body);\n    }\n\n    function getNotifications(patient_id) {\n        // given patient id return all patient notifications\n        return getDocs(query(collection(db, `patients/${patient_id}/notifications`), orderBy(\"event_time\", \"desc\")));\n    }\n\n    /**\n     * \n     * @param {object} body Notification body with the patient device token\n     * @returns {Promise} Axios Promise result.\n     */\n    function sendNotification(body) {\n\n        const api = \"notification\";\n\n        let host = process.env.REACT_APP_SERVER_URL;\n\n        let url = host.concat(api);\n\n        return axios.post(url, body, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${currentUser.accessToken}`,\n                \"Access-Control-Allow-Origin\": \"*\"\n            },\n        });\n    }\n\n    function getUrlNotificationIcon() {\n        return getDownloadURL(ref(storage, 'mobile/aovr.png'));\n    }\n\n    async function signup(email, password, { firstname, lastname }) {\n\n        const userCredentials = await createUserWithEmailAndPassword(auth, email, password);\n        logEvent(analytics, 'sign_up', { providerId: userCredentials.providerId });\n        /*const storageRef = ref(storage, 'doctors/' + userCredentials.user.uid + '/avatars/' + file.name);\n        const metadata = { contentType: 'image/jpeg' }\n        const uploadTask = uploadBytesResumable(storageRef, file, metadata);\n        uploadTask.on('state_changed', (snapshot) => {\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            console.log('Upload is ' + progress + '% done');\n            switch (snapshot.state) {\n                case 'paused':\n                    console.log('Upload is paused');\n                    break;\n                case 'running':\n                    console.log('Upload is running');\n                    break;\n            }\n        },\n            (error) => {\n                // A full list of error codes is available at\n                // https://firebase.google.com/docs/storage/web/handle-errors\n                switch (error.code) {\n                    case 'storage/unauthorized':\n                        // User doesn't have permission to access the object\n                        console.debug(\"User doesn't have permission to access the object\")\n                        break;\n                    case 'storage/canceled':\n                        // User canceled the upload\n                        console.debug(\"User canceled the upload\")\n                        break;\n\n                    // ...\n\n                    case 'storage/unknown':\n                        // Unknown error occurred, inspect error.serverResponse\n                        console.debug(\"Unknown error occurred, inspect error.serverResponse\");\n                        break;\n                }\n            },\n            () => {\n                // Upload completed successfully, now we can get the download URL\n                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n                    console.log('File available at', downloadURL);\n                });\n            });*/\n\n        return authUpdateProfile(userCredentials.user, { displayName: `${firstname} ${lastname}` });\n    }\n\n    function getPatientNutritionalPlan(uid) {\n        return getDocs(collection(db, `patients/${uid}/nutritional_plans`));\n    }\n\n    function getNutritionalPlanTemplates() {\n        return getDocs(collection(db, \"templates_nutritional_plan\"));\n    }\n\n    function deleteNutritionalPlanTemplate(templateId) {\n        const docRef = doc(db, \"templates_nutritional_plan\", templateId);\n        return deleteDoc(docRef);\n    }\n\n    function deletePatientVisit(patientId, visitId) {\n        const patientVisitRef = doc(db, `patients/${patientId}/visits`, visitId);\n        return deleteDoc(patientVisitRef);\n    }\n\n    function updateSeenNotificationStatus(patientId, notificationId) {\n        // read and write in oneshot: update seen notification value\n        return runTransaction(db, async (transaction) => {\n            const docRef = doc(db, `patients/${patientId}/notifications`, notificationId);\n            const notificationDocument = await transaction.get(docRef);\n            if (!notificationDocument.exists()) {\n                throw new Error(\"Document does not exists.\");\n            }\n\n            const { seen } = notificationDocument.data();\n            transaction.update(docRef, { seen: !seen });\n        });\n    }\n\n    function updatePatientStatus(patientId, newStatus) {\n        return runTransaction(db, async (transaction) => transaction\n            .update(documents.patient(patientId), {\n                status: newStatus,\n            })\n        );\n    }\n\n    /**\n     * @description Update patient data by giving id and payload\n     * @param {String} patientId Unique patient id\n     * @param {Object} data Payload data to update\n     * @returns Update document promise\n     */\n    function updatePatient(patientId, data) {\n\n        return runTransaction(db, async (transaction) => {\n            const patientDocRef = doc(db, \"patients\", patientId);\n            let patient = await transaction.get(patientDocRef);\n\n            if (!patient.exists()) {\n                throw new Error(\"Patient does not exists\");\n            }\n\n            const { doctorId } = patient.data();\n\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It's not your patient\");\n            }\n\n            return transaction.update(patientDocRef, data);\n\n        })\n    }\n\n    /**\n     * Fetch all the food items from firestore\n     * Do not use this function because it consumes reading accesses\n     * @returns Promise query\n     */\n    function getFoods() {\n        return getDocs(query(collection(db, \"foods\"), orderBy('name', 'asc')));\n    }\n\n    function searchFoodByName(queryText) {\n        const q = query(collection(db, \"foods\"),\n            orderBy('name', 'asc'),\n            where('name', '<=', queryText + '\\uf8ff'),\n            where('name', '>=', queryText),\n            limit(25));\n        return getDocs(q);\n    }\n\n    function getFoodsWithLimit(items) {\n        const q = query(collection(db, \"foods\"), orderBy(\"name\", 'asc'), limit(items))\n        return getDocs(q);\n    }\n\n    function getFoodsAfter(items, after) {\n        const q = query(collection(db, \"foods\"), orderBy(\"name\", 'asc'), limit(items), startAfter(after));\n        return getDocs(q);\n    }\n\n    function getFoodsBefore(items, before) {\n        const q = query(collection(db, \"foods\"), orderBy(\"name\", 'asc'), limit(items), endBefore(before));\n        return getDocs(q);\n    }\n\n    function updateFood(uid, food) {\n        return updateDoc(doc(db, \"foods\", uid), food);\n    }\n\n    function getBackendFoods() {\n\n        let host = process.env.REACT_APP_SERVER_URL;\n\n        const api = \"all-foods\";\n\n        const url = host.concat(api);\n\n        return axios.get(url, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${currentUser.accessToken}`,\n                \"Access-Control-Allow-Origin\": \"*\",\n            },\n        });\n\n    }\n\n    function getDailyPatientNutrients(body) {\n\n        let host = process.env.REACT_APP_SERVER_URL;\n\n        const api = \"diet-stats\";\n\n        const url = host.concat(api);\n\n        let formData = new FormData();\n        formData.append('user_id', body.user_id);\n        formData.append('today_date', body.today_date);\n\n        let config = {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n                'Authorization': `Bearer ${currentUser.accessToken}`,\n                \"Access-Control-Allow-Origin\": \"*\"\n            }\n        }\n\n        return axios.post(url, formData, config);\n    }\n\n    /**\n     * \n     * @param {string} collection_path Collection path.\n     * @returns Firestore Document Reference with generated unique id.\n     */\n    function newDocRef(collection_path) {\n        return doc(collection(db, collection_path))\n    }\n\n    function createPatientNutritionalPlan(docRef, data) {\n        return setDoc(docRef, data);\n    }\n\n    function createNutritionalPlanTemplate(docRef, data) {\n        return setDoc(docRef, data);\n    }\n\n    function updatePatientNutritionalPlan(data, patient_id, doc_id) {\n        return setDoc(doc(db, `patients/${patient_id}/nutritional_plans`, doc_id), data);\n    }\n\n    function updateNutritionalPlanTemplate(data, doc_id) {\n        return setDoc(doc(db, \"templates_nutritional_plan\", doc_id), data);\n    }\n\n    function updateProfile(data) {\n        return authUpdateProfile(currentUser, data);\n    }\n\n    function getFoodEntries(patient_id) {\n        return getDocs(query(collection(db, `patients/${patient_id}/food_entry`), orderBy(\"time\", \"desc\")));\n    }\n\n    function updateWorkoutEntry(uid, data) {\n        return updateDoc(doc(db, \"workout_entry\", uid), data);\n    }\n\n    function removeWorkoutEntry(uid) {\n        // given uid workout entry doc\n        return deleteDoc(doc(db, \"workout_entry\", uid));\n    }\n\n    function createWorkoutEntry(doc) {\n        // add new element\n        return addDoc(collection(db, \"workout_entry\"), doc);\n    }\n\n    function getPatients() {\n        const q = query(\n            collection(db, \"patients\"),\n            where(\"doctorId\", \"==\", currentUser.uid),\n            //orderBy(\"createdAt\", 'asc')\n            orderBy(\"therapyStartDate\", 'desc')\n        );\n        return getDocs(q);\n    }\n\n    function getDroppedPatients() {\n        const q = query(collection(db, \"dropped_patients\"), where(\"doctorId\", \"==\", currentUser.uid));\n        return getDocs(q);\n    }\n\n    function getPathologies() {\n        return getDocs(collection(db, \"pathologies\"));\n    }\n\n    function removePathology(pathologyId) {\n        const docRef = doc(db, \"pathologies\", pathologyId);\n        return deleteDoc(docRef)\n    }\n\n    function createPathology(docRef, pathology) {\n        return setDoc(docRef, pathology);\n    }\n\n    function getPathologyById(id) {\n        return getDoc(doc(db, \"pathologies\", id));\n    }\n\n    function removeControlGroupPatient(patients) {\n        //const batch = writeBatch(db);\n        runTransaction(db, async (transaction) => {\n            patients.forEach(async (id) => {\n                let patientRef = doc(db, COLLECTIONS.CONTROL_GROUP, id);\n                let patient = await transaction.get(patientRef);\n                if (patient.exists()) {\n                    let newRef = doc(db, \"patients\", id);\n                    if (!((await transaction.get(newRef)).exists())) {\n                        transaction.set(newRef, patient.data());\n                        //batch.set(newRef, patient.data());\n                    }\n                    else\n                        console.debug(\"patient already exist \", newRef.id);\n                } else {\n                    console.debug(\"patient does not exist \", id);\n                }\n            });\n        });\n        //return await batch.commit();\n\n    }\n\n    function removeControlGroupPatient_(patientIds) {\n        // remove one or more patients\n        const batch = writeBatch(db);\n        patientIds.forEach(id => {\n            batch.delete(doc(db, COLLECTIONS.CONTROL_GROUP, id));\n        });\n        return batch.commit();\n        //return deleteDoc(doc(db, COLLECTIONS.CONTROL_GROUP, patientId));\n    }\n\n    function removePatient(patientId) {\n        //return deleteDoc(documents.patient(patientId));\n        return runTransaction(db, async (transaction) => {\n            let patientDocRef = doc(db, \"patients\", patientId);\n            let patientDoc = await transaction.get(patientDocRef);\n\n            if (!patientDoc.exists()) {\n                throw new Error(`Patient with uid ${patientId} does not exists`);\n            }\n\n            let { doctorId } = patientDoc.data();\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It's not your patient\");\n            }\n\n            transaction.set(doc(collection(db, \"removed_patients\")), {\n                ...patientDoc.data(),\n                patientId: patientId,\n            });\n\n            transaction.delete(patientDocRef);\n\n        })\n    }\n\n    function unlinkPatient(patientId) {\n        return updateDoc(doc(db, \"patients\", patientId), { doctorId: deleteField() });\n    }\n\n    async function createPatient(patient) {\n\n        // get reference to patients collection\n        const patientsRef = collection(db, 'patients');\n\n        // query to get doctor patients with the same new patient email\n        const q = query(patientsRef, where('email', '==', patient?.email));\n\n        try {\n            const snapshot = await getDocs(q);\n            // if there is no patient with same email\n            if (snapshot.empty) {\n                let data = {\n                    ...patient,\n                    doctorId: currentUser.uid,\n                    createdAt: Timestamp.now(),\n                }\n                // then add new one\n                return addDoc(patientsRef, data);\n            } else {\n                // the email is already taken\n                throw new Error('There exists patient with the same email address');\n            }\n        } catch (e) {\n            throw e;\n        }\n\n    }\n\n    function createPatientGroupControl(patient) {\n        const collectionRef = collection(db, COLLECTIONS.CONTROL_GROUP);\n        const docRef = doc(collectionRef);\n        return setDoc(docRef, {\n            ...patient,\n            doctorId: currentUser.uid,\n            createdAt: Timestamp.now(),\n        });\n    }\n\n    function getPatient(patientId) {\n        return getDoc(doc(db, \"patients\", patientId));\n    }\n\n    /**\n     * \n     * @param {String} patientId Patient uid\n     * @returns get doc promise\n     */\n    function getPatientById(patientId) {\n        return runTransaction(db, async (transaction) => {\n            const patientRef = doc(db, \"patients\", patientId);\n            const patient = await transaction.get(patientRef);\n\n            if (patient.exists()) {\n                return patient.data();\n            } else {\n                return (await transaction.get(doc(db, \"control_group_patients\", patientId))).data();\n            }\n        })\n        //return getDoc(doc(db, collectionName, patientId));\n    }\n\n    function getPatientProtected(patientId) {\n        return runTransaction(db, async (transaction) => {\n\n            const patientRef = doc(db, \"patients\", patientId);\n\n            const patient = await transaction.get(patientRef);\n\n            if (!patient.exists()) {\n                throw new Error(\"Patient does not exist\");\n            }\n\n            const patientData = patient.data();\n            if (patientData.doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            } else {\n                return ({ ...patientData, uid: patient.id });\n            }\n\n        });\n    }\n\n    function getStatistics() {\n        let host = process.env.REACT_APP_SERVER_URL;\n\n        const api = \"patients/statistics\";\n\n        const url = host.concat(api);\n        return axios.get(url, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${currentUser.accessToken}`,\n                \"Access-Control-Allow-Origin\": \"*\"\n            }\n        })\n    }\n\n    function getWorkouts(rowsPerPage) {\n        // list of workouts on firestore db\n        return getDocs(query(collections.workouts, limit(rowsPerPage)))\n    }\n\n    function listWorkouts() {\n        return getDocs(collections.workouts);\n    }\n\n    function createWorkout(data) {\n        return addDoc(collections.workouts, data);\n    }\n\n    function updateWorkout(uid, data) {\n        return setDoc(doc(db, \"workouts\", uid), data);\n    }\n\n    function deleteInBatch(rows) {\n        const batch = writeBatch(db);\n        rows.forEach(row => batch.delete(doc(db, \"workouts\", row)));\n        return batch.commit();\n    }\n\n    async function login(email, password, rememberMe) {\n        if (!rememberMe) {\n            return setPersistence(auth, browserSessionPersistence).then(async () => {\n                return signInWithEmailAndPassword(auth, email, password)\n                    .then((userCredentials) => logEvent(analytics, 'login', { providerId: userCredentials.providerId }));\n            });\n        } else {\n            return signInWithEmailAndPassword(auth, email, password)\n                .then((userCredentials) => logEvent(analytics, 'login', { providerId: userCredentials.providerId }));\n        }\n    }\n\n    function logout() {\n        return signOut(auth)\n    }\n\n    function resetPassword(email) {\n        return sendPasswordResetEmail(auth, email)\n    }\n\n    function updateEmail(email) {\n        return authUpdateEmail(currentUser, email)\n    }\n\n    function updatePassword(password) {\n        return authUpdatePassword(currentUser, password)\n    }\n\n    function pushPatientVisitData(data, visitId, patientId) {\n\n        return runTransaction(db, async (transaction) => {\n            const patientRef = doc(db, \"patients\", patientId);\n            let patient = await transaction.get(patientRef);\n\n            let control_group = false;\n\n            if (!patient.exists()) {\n                //throw new Error(\"Patient does not exist\");\n                control_group = true;\n                patient = await transaction.get(doc(db, \"control_group_patients\", patientId));\n            }\n\n            const { doctorId } = patient.data();\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            }\n\n            if (control_group) {\n                const docRef = doc(db, `control_group_patients/${patientId}/visits`, visitId);\n                return transaction.update(docRef, data);\n\n            }\n\n            const docRef = doc(db, `patients/${patientId}/visits`, visitId);\n            return transaction.update(docRef, data);\n\n        });\n\n        //const docRef = doc(db, `patients/${patient_id}/visits`, visit);\n        //return setDoc(docRef, data, { merge: true });\n    }\n\n    function pullPatientVisitData(visitId, patientId) {\n        return runTransaction(db, async (transaction) => {\n            const patientRef = doc(db, \"patients\", patientId);\n            let patient = await transaction.get(patientRef);\n            let control_group = false;\n            if (!patient.exists()) {\n                //throw new Error(\"Patient does not exist\");\n                control_group = true;\n                patient = await transaction.get(doc(db, \"control_group_patients\", patientId));\n\n            }\n            const { doctorId } = patient.data();\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            }\n\n            if (control_group) {\n                const docRef = doc(db, `control_group_patients/${patientId}/visits`, visitId);\n                return transaction.get(docRef);\n            }\n            const docRef = doc(db, `patients/${patientId}/visits`, visitId);\n            return transaction.get(docRef);\n        });\n\n    }\n\n    function getPatientVisits(patientId) {\n\n        return runTransaction(db, async (transaction) => {\n\n            const patientRef = doc(db, \"patients\", patientId);\n            const patient = await transaction.get(patientRef);\n\n            if (patient.exists()) {\n\n                const visitsRef = collection(db, `patients/${patientId}/visits`);\n                const q = query(visitsRef, orderBy(\"createdAt\", 'asc'));\n                return getDocs(q);\n\n            } else {\n                // if does not exist then should be in control group collection\n                const visitsRef = collection(db, `control_group_patients/${patientId}/visits`);\n                const q = query(visitsRef, orderBy(\"createdAt\", 'asc'));\n                return getDocs(q);\n            }\n\n            /*if (!patient.exists()) {\n                throw new Error(\"Patient does not exist\");\n            }\n\n            const { doctorId } = patient.data();\n            if (doctorId !== currentUser.uid) {\n                throw new Error(\"It is not your patient\");\n            }\n\n            const visitsRef = collection(db, `patients/${patientId}/visits`);\n            const q = query(visitsRef, orderBy(\"createdAt\", 'asc'));\n            return getDocs(q);*/\n\n        });\n\n        //return getDocs(collection(db, ))\n        //return getDocs(query(collection(db, `patients/${patient_id}/visits`), orderBy(\"createdAt\", \"asc\")));\n    }\n\n    function getPatientVisit(patientId, visitId) {\n        const docRef = doc(db, `patients/${patientId}/visits`, visitId);\n        return getDoc(docRef);\n    }\n\n    /**\n     * Add new visit in patient visits sub collection\n     * @param {*} patientId Patient uid\n     * @param {*} visit New data visit\n     * @returns transaction Promise set\n     */\n    function createPatientVisit(patientId, visit) {\n\n        return runTransaction(db, async (transaction) => {\n\n            const patientRef = doc(db, \"patients\", patientId);\n\n            const patient = await transaction.get(patientRef);\n\n            let { doctorId } = patient.data();\n\n            // check if patient with gived uid exist and has the same doctor id\n            if (patient.exists() && doctorId === currentUser.uid) {\n                return transaction\n                    .set(doc(collection(db, `patients/${patientId}/visits`)), visit);\n            } else {\n                return transaction\n                    .set(doc(collection(db, `control_group_patients/${patientId}/visits`)), visit);\n            }\n        });\n\n    }\n\n    function removePatientVisit(patientId, visitId) {\n        const docRef = doc(db, `patients/${patientId}/visits`, visitId);\n        return deleteDoc(docRef);\n    }\n\n    function getPatientNotifications() {\n        // for each patient return all notifications\n        return getDocs(collectionGroup(db, 'notifications'))\n    }\n\n    function getPatientNotes(patientId) {\n        // read patient notes\n        return getDocs(query(collection(db, `patients/${patientId}/notes`), orderBy(\"time\", \"desc\")));\n    }\n\n    function createPatientNote(patientId, data) {\n        // crete patient note\n        // const docRef = doc(collection(db, `patients/${patientId}/notes`));\n        // return setDoc(docRef, data);\n        return addDoc(collection(db, `patients/${patientId}/notes`), data);\n    }\n\n    function updatePatientNote(patientId, noteId, data) {\n        // update patient note\n        return updateDoc(doc(db, `patients/${patientId}/notes`, noteId), data);\n    }\n\n    function deletePatientNote(patientId, noteId) {\n        // delete patient note\n        return deleteDoc(doc(db, `patients/${patientId}/notes`, noteId));\n    }\n\n    function exportPatientVisits(patients, headers) {\n        let host = process.env.REACT_APP_SERVER_URL;\n        const api = \"export-patient-visits\";\n        const url = host.concat(api);\n        const data = {\n            patients: patients, // list of patients id\n            headers: headers, // visit fields to recover\n        }\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${currentUser.accessToken}`,\n                \"Access-Control-Allow-Origin\": \"*\"\n            }\n        }\n        return axios.post(url, data, config);\n    }\n\n    function getPatientNutrients(patientId) {\n\n        let host = process.env.REACT_APP_SERVER_URL;\n\n        const api = \"nutrients-stats\";\n\n        const url = host.concat(api);\n\n        const data = {\n            patient_id: patientId,\n        }\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${currentUser.accessToken}`,\n                \"Access-Control-Allow-Origin\": \"*\"\n            }\n        }\n\n        return axios.post(url, data, config)\n\n    }\n\n    function getPatientKcals(patientId) {\n        let host = process.env.REACT_APP_SERVER_URL;\n        const api = \"workouts-stats\";\n        const url = host.concat(api);\n        let body = { user_id: patientId }\n        let config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${currentUser.accessToken}`,\n                \"Access-Control-Allow-Origin\": \"*\",\n            }\n        }\n        return axios.post(url, body, config)\n    }\n\n    useEffect(() => {\n\n        localStorage.setItem('lang', currentLanguage);\n        Language.setLanguage(currentLanguage);\n\n    }, [currentLanguage]);\n\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(\n            auth,\n            (user) => {\n                // console.debug(user?.accessToken);\n                setCurrentUser(() => user)\n                setLoading(() => false)\n            },\n            (error) => console.error(error.message),\n            () => console.debug(\"Observer was removed\")\n        )\n        return () => unsubscribe()\n    }, []);\n\n    const value = {\n        getPatientNotes,\n        updatePatientNote,\n        deletePatientNote,\n        createPatientNote,\n        currentUser,\n        createPatient,\n        login,\n        signup,\n        logout,\n        resetPassword,\n        updateEmail,\n        updatePassword,\n        createWorkout,\n        updateWorkout,\n        getWorkouts,\n        deleteInBatch,\n        getPatientWorkouts,\n        getPatients,\n        getPatient,\n        removePatient,\n        unlinkPatient,\n        verifyEmail,\n        updateProfile,\n        updateWorkoutEntry,\n        createWorkoutEntry,\n        removeWorkoutEntry,\n        getPatientNutritionalPlan,\n        updatePatientNutritionalPlan,\n        createPatientNutritionalPlan,\n        getFoods,\n        getBackendFoods,\n        getFoodEntries,\n        newDocRef,\n        pushPatientVisitData,\n        pullPatientVisitData,\n        getUrlNotificationIcon,\n        sendNotification,\n        getNotifications,\n        createNotification,\n        updateNotification,\n        getPathologies,\n        listWorkouts,\n        updatePatientAppointments,\n        updatePatientWorkouts,\n        getPatientNotifications,\n        getPatientVisits,\n        getDailyPatientNutrients,\n        updateSeenNotificationStatus,\n        getNutritionalPlanTemplates,\n        updateNutritionalPlanTemplate,\n        createNutritionalPlanTemplate,\n        deleteNutritionalPlanTemplate,\n        currentLanguage,\n        updateCurrentLanguage,\n        getPatientNutrients,\n        getPatientKcals,\n        updatePatientStatus,\n        getPatientVisit,\n        createPatientVisit,\n        removePatientVisit,\n        updatePatient,\n        getPatientProtected,\n        getStatistics,\n        dropOutPatient,\n        getDroppedPatients,\n        createPatientGroupControl,\n        removeControlGroupPatient,\n        getPatientById,\n        removePathology,\n        createPathology,\n        updateFood,\n        getPathologyById,\n        getFoodsAfter,\n        getFoodsBefore,\n        searchFoodByName,\n        getFoodsWithLimit,\n        setPatientDroppedOut,\n        recoverDroppedPatient,\n        exportPatientVisits,\n        modifyPatientVisit,\n        deletePatientVisit,\n    }\n\n    return (\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    )\n}\n","import React from \"react\"\nimport {\n    Route,\n    Redirect,\n    //useHistory,\n    //useParams,\n} from \"react-router-dom\"\nimport { useAuth } from \"../contexts/AuthContext\"\n\n/**\n * @description Secure route verifies if the user is logged in. Render the layout app pages if current user is not null.\n * @param {*} param0 \n * @returns {Route} React route application\n */\nexport default function SecureRoute({ component: Component, ...rest }) {\n    const { currentUser } = useAuth();\n    //console.debug(\"history\", useHistory());\n    //console.debug(\"params\", useParams());\n    return (\n        <Route\n            {...rest}\n            render={(props) => {\n                return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />\n            }}\n        />\n    )\n}\n","import React, { useState } from 'react';\nimport {\n    Avatar,\n    Button,\n    CssBaseline,\n    TextField,\n    Grid,\n    Box,\n    Typography,\n    Container,\n    CircularProgress,\n    Backdrop,\n    IconButton,\n    InputAdornment,\n} from '@material-ui/core';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { ThemeProvider, createTheme, makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport { Alert, AlertTitle } from '@material-ui/lab'\nimport strings from './Language/'\n\nconst theme = createTheme();\nconst useStyles = makeStyles((theme) => ({\n    errorAlert: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    mainLogo: {\n        width: theme.spacing(12),\n        height: theme.spacing(12),\n    },\n}));\n\nexport default function SignUp(props) {\n    const { history } = props;\n    const [error, setError] = useState('');\n    const [backdropOpen, setBackdropOpen] = useState(false);\n\n    //const [file, setFile] = useState({});\n\n    //let upload = null;\n    //const myref = (ref) => (upload = ref) // !Important\n\n    const { signup } = useAuth();\n\n    const classes = useStyles();\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        const email = data.get('email');\n        const password = data.get('password');\n        const confirmPassword = data.get('confirmPassword')\n        const firstName = data.get('firstName');\n        const lastName = data.get('lastName');\n\n        // clear error message\n        setError(() => \"\");\n\n        if (firstName.toString().trim().length === 0 || lastName.toString().trim().length === 0) {\n            return setError(\"Insert your First Name and Last Name.\")\n        }\n\n        if (confirmPassword !== password) {\n            return setError(\"Passwords do not match.\");\n        }\n\n        // const { file, filename } = state;\n        setBackdropOpen(true);\n\n        try {\n            await signup(email.toString(),\n                password.toString(),\n                {\n                    firstname: firstName.toString(),\n                    lastname: lastName.toString()\n                });\n\n            setBackdropOpen(false);\n            // console.debug(result);\n            history.push('/');\n        } catch (error) {\n            // console.error(error);\n            setBackdropOpen(false);\n            setError(error.message);\n        }\n    }\n\n    const [isPasswordShown, setIsPasswordShown] = useState(false);\n\n    const handleShowPassword = () => setIsPasswordShown((isPasswordShown) => !isPasswordShown);\n\n    const handleMouseDownPassword = (e) => e.preventDefault()\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <Backdrop className={classes.backdrop} open={backdropOpen}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar alt=\"osp\" src=\"/aovr.png\" className={classes.mainLogo} />\n\n                    <Typography component=\"h1\" variant=\"h5\">\n                        {strings.account.sign_up}\n                    </Typography>\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} className={classes.errorAlert}>\n                                {\n                                    error && <Alert severity=\"error\">\n                                        <AlertTitle>{strings.general.error}</AlertTitle>\n                                        {error}\n                                    </Alert>\n                                }\n                            </Grid>\n                            {/*<Grid item xs={12}>\n                                <input\n                                    // style={{ width: '100%' }}\n                                    id={\"avatar-input-file\"}\n                                    name={\"avatar\"}\n                                    onChange={(e) => setFile(() => e.target.files[0])}\n                                    type=\"file\"\n                                    ref={myref}\n                                    style={{ display: 'none' }}\n                                />\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    fullWidth\n                                    size=\"medium\"\n                                    // style={{ backgroundColor: '#131246', color: 'white' }}\n                                    onClick={() => upload.click()}>\n                                    {strings.account.avatar_upload}\n                                </Button>\n                            </Grid>*/}\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    autoComplete=\"fname\"\n                                    name=\"firstName\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label={strings.patient.first_name}\n                                    autoFocus\n                                    type='text'\n                                    variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label={strings.patient.last_name}\n                                    name=\"lastName\"\n                                    autoComplete=\"lname\"\n                                    type='text'\n                                    variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label={strings.patient.email}\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                    variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label={strings.account.password}\n                                    type={isPasswordShown ? \"text\" : \"password\"}\n                                    id=\"password\"\n                                    autoComplete=\"new-password\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">\n                                            <IconButton\n                                                aria-label=\"toggle password visibility\"\n                                                onClick={handleShowPassword}\n                                                onMouseDown={handleMouseDownPassword}\n                                            >\n                                                {isPasswordShown ? <Visibility /> : <VisibilityOff />}\n                                            </IconButton>\n                                        </InputAdornment>\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"confirmPassword\"\n                                    label={strings.account.confirm_password}\n                                    type={isPasswordShown ? \"text\" : \"password\"}\n                                    id=\"confirm-password\"\n                                    autoComplete=\"new-password\"\n                                    variant=\"outlined\"\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">\n                                            <IconButton\n                                                aria-label=\"toggle password visibility\"\n                                                onClick={handleShowPassword}\n                                                onMouseDown={handleMouseDownPassword}\n                                            >\n                                                {isPasswordShown ? <Visibility /> : <VisibilityOff />}\n                                            </IconButton>\n                                        </InputAdornment>\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                {/* <FormControlLabel\n                                    control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                                    label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n                                /> */}\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                            disabled={backdropOpen}\n                            color=\"primary\"\n                        >\n                            {strings.account.sign_up}\n                        </Button>\n                        <Grid container justifyContent=\"space-between\" spacing={1}>\n                            <Grid item>\n                                <Link to={location => ({ ...location, pathname: \"/login\" })} variant=\"body2\">\n                                    {`${strings.account.have_account} ${strings.account.sign_in}`}\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link to={location => ({ ...location, pathname: \"/forgot-password\" })} variant=\"body2\">\n                                    {strings.account.forgot_password}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n}","import bcryptjs from \"bcryptjs\"\nimport React, { useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { db } from \"../services/firebase\"\nimport { store, useGlobalState } from \"state-pool\"\nimport {\n    Box,\n    Button,\n    Grid,\n    TextField,\n    Backdrop,\n    CircularProgress,\n    FormControlLabel,\n    Checkbox, Paper, InputAdornment, IconButton\n} from \"@material-ui/core\";\nimport {\n    Avatar,\n    CssBaseline,\n    Typography,\n    Container\n} from \"@material-ui/core\";\nimport {\n    ThemeProvider, createTheme, makeStyles\n} from \"@material-ui/core/styles\"\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport {\n    LockOutlined as LockOutlinedIcon\n} from \"@material-ui/icons\";\nimport { useAuth } from '../contexts/AuthContext'\nimport { Alert, AlertTitle } from '@material-ui/lab'\nimport strings from './Language/'\n\n// Variabile globale utilizzata per memorizzare il dottore che ha eseguito il login\n// store.setState(\"doctor\", null)\n\nexport function Login_(props) {\n    const [, setDoctor] = useGlobalState(\"doctor\")\n    const [email, setEmail] = useState()\n    const [password, setPassword] = useState()\n    const { history } = props;\n    // let history = useHistory()\n    function handleSubmit(e) {\n        e.preventDefault()\n\n        getDoctor().then(result => {\n            if (result != null) {\n                console.log(result)\n\n                history.push({\n                    pathname: \"/HomePage\",\n                    state: { doctor: result }\n                })\n            }\n            else\n                console.log(\"doctor not found\")\n        })\n    }\n\n    async function getDoctor() {\n        let salt = bcryptjs.genSaltSync(10)\n        let hash = bcryptjs.hashSync(password, salt)\n\n        const query = await db.collection(\"doctors\")\n            .where(\"email\", \"==\", email)\n            .get()\n\n        if (!query.empty) {\n            if (bcryptjs.compareSync(password, hash)) {\n                console.log(\"doctor found\")\n                setDoctor(query.docs[0].id)\n                console.log(\"doctor:\" + store.getState(\"doctor\").getValue())\n                return query.docs[0].id\n            }\n        }\n\n        return null\n    }\n\n    return (\n        <Grid container direction=\"column\" alignItems=\"center\" justifyContent=\"center\" spacing={5} component=\"form\" onSubmit={handleSubmit}>\n            <Grid item>\n                <TextField\n                    style={{ width: \"300px\" }}\n                    margin=\"dense\"\n                    fullWidth\n                    required\n                    name=\"email\"\n                    type=\"email\"\n                    label=\"Email\"\n                    onChange={e => setEmail(e.target.value)}\n                />\n            </Grid>\n            <Grid item>\n                <TextField\n                    style={{ width: \"300px\" }}\n                    margin=\"dense\"\n                    fullWidth\n                    required\n                    name=\"password\"\n                    type=\"password\"\n                    label=\"Password\"\n                    onChange={e => setPassword(e.target.value)}\n                />\n            </Grid>\n            <Grid item>\n                <Button variant=\"contained\" type=\"submit\" color=\"secondary\"> Log in </Button>\n            </Grid>\n        </Grid>\n    )\n}\n\nconst theme = createTheme();\nconst useStyles = makeStyles((theme) => ({\n    errorAlert: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    mainLogo: {\n        width: theme.spacing(12),\n        height: theme.spacing(12),\n    }\n}));\n\nexport default function Login(props) {\n    const { history } = props;\n    const { login } = useAuth();\n    const [backdropOpen, setBackdropOpen] = useState(false)\n    const [error, setError] = useState('')\n    const classes = useStyles();\n    // const isMountedRef = useRef(null);\n\n    /*const validateEmail = (email) => {\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(String(email).toLowerCase());\n    }*/\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        const password = data.get('password').toString();\n        const email = data.get('email').toString();\n        if (password.length === 0) {\n            return setError('Password missing');\n        }\n        if (email.length === 0) {\n            return setError('Email is missing');\n        }\n        // isMountedRef.current = true;\n        try {\n            // if (isMountedRef.current) {\n            setBackdropOpen(true)\n            setError('')\n\n            await login(email, password, rememberMe);\n            // if (isMountedRef.current)\n            setBackdropOpen(false);\n            // setError('')\n            // isMountedRef.current = false;\n            history.push('/')\n        } catch (error) {\n            // if (isMountedRef.current)\n            setError(error.message)\n            setBackdropOpen(false);\n            // isMountedRef.current = false;\n        }\n        // finally {\n        //     if (isMountedRef.current)\n        //         setBackdropOpen(false)\n        // }\n    };\n\n    const [rememberMe, setRememberMe] = React.useState(true);\n\n    const handleRememberMe = () => setRememberMe((prevState) => !prevState)\n\n    const [isPasswordShown, setIsPasswordShown] = useState(false);\n\n    const handleShowPassword = () => setIsPasswordShown((isPasswordShown) => !isPasswordShown);\n\n    const handleMouseDownPassword = (e) => e.preventDefault()\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <Backdrop className={classes.backdrop} open={backdropOpen}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n\n                    <Avatar alt=\"osp\" src=\"/aovr.png\" className={classes.mainLogo} />\n\n                    <Typography component=\"h1\" variant=\"h5\">\n                        {strings.account.sign_in}\n                    </Typography>\n                    <Grid item xs={12} className={classes.errorAlert}>\n                        {\n                            error && <Alert severity=\"error\">\n                                <AlertTitle>{strings.general.error}</AlertTitle>\n                                {error}\n                            </Alert>\n                        }\n                    </Grid>\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label={strings.patient.email}\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                            variant=\"outlined\"\n                        // error={!validateEmail(email)}\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label={strings.account.password}\n                            type={isPasswordShown ? \"text\" : \"password\"}\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                            variant=\"outlined\"\n                            InputProps={{\n                                endAdornment: <InputAdornment position=\"end\">\n                                    <IconButton\n                                        aria-label=\"toggle password visibility\"\n                                        onClick={handleShowPassword}\n                                        onMouseDown={handleMouseDownPassword}\n                                    >\n                                        {isPasswordShown ? <Visibility /> : <VisibilityOff />}\n                                    </IconButton>\n                                </InputAdornment>\n                            }}\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    color=\"primary\"\n                                    checked={rememberMe}\n                                    onChange={handleRememberMe}\n                                />\n                            }\n                            label={strings.account.remember_me}\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                            disabled={backdropOpen}\n                            color=\"primary\"\n                        >\n                            {strings.account.sign_in}\n                        </Button>\n                        <Grid container justifyContent=\"space-between\" spacing={1}>\n                            <Grid item>\n                                <Link\n                                    to={location => ({\n                                        ...location,\n                                        pathname: \"/signup\",\n                                        // state: { from: location.pathname }\n                                    })}\n                                    variant=\"body2\">\n                                    {`${strings.account.no_account} ${strings.account.sign_up}`}\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link to={location => ({ ...location, pathname: \"/forgot-password\" })} variant=\"body2\">\n                                    {strings.account.forgot_password}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n}","import React, { useRef, useState, useEffect } from \"react\"\nimport { useAuth } from \"../contexts/AuthContext\"\nimport {\n    Grid,\n    TextField,\n    Container,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    InputAdornment,\n    IconButton,\n    ListItemIcon,\n    Menu,\n    MenuItem,\n    Divider,\n    CircularProgress,\n    Backdrop,\n    Paper,\n} from \"@material-ui/core\"\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport AppsIcon from '@material-ui/icons/Apps';\nimport BlockIcon from '@material-ui/icons/Block';\nimport DvrOutlinedIcon from '@material-ui/icons/DvrOutlined';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SearchIcon from '@material-ui/icons/Search';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport strings from './Language'\nimport { Timestamp } from \"firebase/firestore\";\n\nconst useStyles = makeStyles((theme) => ({\n    skeleton: {\n        paddingTop: theme.spacing(2)\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nconst WarningIconStyled = withStyles(() => ({\n    root: {\n        color: \"#ffc107\",\n    },\n}))(({ children, ...rest }) => <WarningIcon {...rest} />);\n\nconst ErrorIconStyled = withStyles(() => ({\n    root: {\n        color: '#f44336',\n    },\n}))(({ children, ...rest }) => <ErrorIcon {...rest} />);\n\nconst CheckCircleIconStyled = withStyles(() => ({\n    root: {\n        color: \"#4caf50\",\n    },\n}))(({ children, ...rest }) => <CheckCircleIcon {...rest} />)\n\nconst PATIENT_STATUS = {\n    YELLOW: \"yellow\",\n    GREEN: \"green\",\n    RED: \"red\",\n}\n\n/**\n * @description Main page. It shows list of patients.\n * @version 1.0.1\n * @name HomePage\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @param {*} props \n * @returns \n */\nexport default function HomePage(props) {\n    const { history } = props;\n    const [state, setState] = useState({\n        query: \"\",\n        patients: [],\n        labels: [],\n        data: [],\n        patient: {\n            firebase_device_token: \"\",\n            id: \"\",\n            status: PATIENT_STATUS.GREEN,\n            name: \"\",\n            surname: \"\",\n            email: \"\"\n        },\n        backdropOpen: false,\n        //nextUpdate: 1,\n    });\n\n    const {\n        currentLanguage,\n        getPatients,\n        updatePatientStatus,\n        dropOutPatient,\n        setPatientDroppedOut,\n    } = useAuth();\n\n    const fetchPatients = React.useCallback(() => getPatients(), [getPatients]);\n    //const filteredPatients = getFilteredPatients();\n    const isMountedRef = useRef(null);\n\n    const dropOut = React.useCallback((id) => dropOutPatient(id), [dropOutPatient]);\n\n    const dropPatientOut = React.useCallback((patientId) => {\n        return setPatientDroppedOut(patientId);\n    }, [setPatientDroppedOut]);\n\n    const handleDropoutPatient = async (patientId) => {\n        try {\n\n            // await dropOut(patientId);\n\n            handleClose();\n\n            await dropPatientOut(patientId);\n\n            setState(state => {\n                const { patients } = state;\n                return ({\n                    ...state,\n                    patients: patients.map((patient) => {\n                        if (patient.id === patientId) {\n                            return ({\n                                ...patient,\n                                dropped: true,\n                                droppedAt: Timestamp.now(),\n                            });\n                        } else {\n                            return patient;\n                        }\n                    })\n                })\n            })\n\n\n            /*\n            setState(state => {\n                const { patients } = state;\n                const filtered = patients.filter(patient => patient.id !== patientId)\n                return ({\n                    ...state,\n                    patients: filtered,\n                })\n            });\n            */\n\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    function getFilteredPatients() {\n        const { query, patients } = state;\n        if (query === undefined || query.length === 0)\n            return patients;\n\n        const q = query.trim().toLowerCase(); // one or more words\n\n        return patients.filter(patient => (patient.name.toLowerCase().includes(q) || patient.surname.toLowerCase().includes(q)))\n    }\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        const _fetchPatients = async () => {\n            //const { backdropOpen } = state;\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdropOpen: true }));\n\n            const labels = [];\n            const _data = [];\n            const patients = [];\n\n            try {\n                const snapPatients = await fetchPatients();\n\n                if (snapPatients.empty) {\n                    return setState(s => ({ ...s, backdropOpen: false }))\n                }\n\n                //const patients = \n                snapPatients.docs.forEach((doc) => {\n\n                    // if not empty then data is defined\n                    const data = doc.data();\n\n                    let patient = { ...data }\n\n                    const { createdAt, dateOfBirth, therapyStartDate, therapyEndDate, } = data;\n\n                    if (typeof createdAt === 'string') {\n\n                        //const seconds = Date.parse(createdAt);\n                        //const timestamp = new Timestamp(seconds);\n                        const date = new Date(createdAt);\n                        //const locale_date = date.toLocaleString(currentLanguage);\n                        patient = {\n                            ...patient,\n                            createdAt: date,\n                            //createdAt: new Timestamp(Date.parse(createdAt)).toDate().toLocaleString(currentLanguage),\n                        }\n                    } else if (createdAt instanceof Timestamp) {\n                        patient = {\n                            ...patient,\n                            createdAt: createdAt.toDate(),//.toLocaleString(currentLanguage),\n                        }\n                    }\n\n                    if (typeof dateOfBirth === 'string') {\n                        const date = new Date(createdAt);\n                        //const locale_date = date.toLocaleString(currentLanguage);\n                        patient = {\n                            ...patient,\n                            dateOfBirth: date,\n                            //dateOfBirth: new Timestamp(Date.parse(dateOfBirth)).toDate().toLocaleString(currentLanguage),\n                        }\n                    } else if (dateOfBirth instanceof Timestamp) {\n                        patient = {\n                            ...patient,\n                            dateOfBirth: dateOfBirth.toDate(),//.toLocaleString(currentLanguage),\n                        }\n                    }\n\n                    if (typeof therapyStartDate === 'string') {\n                        const date = new Date(createdAt);\n                        //const locale_date = date.toLocaleString(currentLanguage);\n                        patient = {\n                            ...patient,\n                            therapyStartDate: date,\n                            //therapyStartDate: new Timestamp(Date.parse(therapyStartDate)).toDate().toLocaleString(currentLanguage),\n                        }\n                    } else if (therapyStartDate instanceof Timestamp) {\n                        patient = {\n                            ...patient,\n                            therapyStartDate: therapyStartDate.toDate(),//.toLocaleString(currentLanguage),\n                        }\n\n                    }\n\n                    if (typeof therapyEndDate === 'string') {\n                        const date = new Date(therapyEndDate);\n                        //const locale_date = date.toLocaleString(currentLanguage);\n                        patient = {\n                            ...patient,\n                            therapyEndDate: date,\n                            //therapyEndDate: new Timestamp(Date.parse(therapyEndDate)).toDate().toLocaleString(currentLanguage),\n                        }\n                    } else if (therapyEndDate instanceof Timestamp) {\n                        patient = {\n                            ...patient,\n                            therapyEndDate: therapyEndDate.toDate(),//.toLocaleString(currentLanguage),\n                        }\n                    }\n\n                    patient = {\n                        ...patient,\n                        weights: data.weight,\n                        height: parseInt(data.height),\n                    }\n\n                    const weights = patient.weights.sort((a, b) => a.time.toDate() - b.time.toDate()).map((w) => {\n                        const label = w.time.toDate();\n                        _data.push(w.value);\n                        labels.push(label.toDateString())\n                        return ({ time: label, value: w.value });\n                    });\n\n                    //return ({ ...patient, id: doc.id, weights: weights });\n                    patients.push({\n                        ...patient,\n                        id: doc.id,\n                        weights: weights,\n                    });\n                });\n\n                if (isMountedRef.current)\n                    setState((s) => ({\n                        ...s,\n                        patients: patients\n                            .sort((a, b) => b.createdAt - a.createdAt),\n                        /*.map((patient) => {\n                            const { createdAt, dateOfBirth, therapyStartDate, therapyEndDate } = patient;\n                            return ({\n                                ...patient,\n                                createdAt: createdAt.toLocaleString(currentLanguage),\n                                dateOfBirth: dateOfBirth.toLocaleString(currentLanguage),\n                                therapyEndDate: therapyEndDate.toLocaleString(currentLanguage),\n                                therapyStartDate: therapyStartDate.toLocaleString(currentLanguage),\n                            })\n                        }),*/\n                        labels: labels,\n                        data: _data,\n                        backdropOpen: false,\n                    }));\n\n            } catch (error) {\n\n                if (isMountedRef.current)\n                    setState(s => ({\n                        ...s,\n                        backdropOpen: false,\n                    }))\n\n                console.error(error)\n            }\n        }\n        isMountedRef.current = true;\n        _fetchPatients()\n        return () => (isMountedRef.current = false)\n    }, []);\n\n    const handleUpdatePatientStatus = async () => {\n\n        // set loading\n        setState((state) => ({ ...state, backdropOpen: true }))\n\n        let { id } = state.patient;\n\n        handleClose();\n\n        try {\n\n            await updatePatientStatus(id, PATIENT_STATUS.GREEN);\n\n            //setState(s => ({ ...s, nextUpdate: s.nextUpdate + 1 }));\n\n            setState(state => ({\n                ...state,\n                patient: {\n                    ...state.patient,\n                    status: PATIENT_STATUS.GREEN,\n                },\n                patients: state.patients.map(patient => {\n                    if (patient.id === id) {\n                        return ({\n                            ...patient, status: PATIENT_STATUS.GREEN,\n                        })\n                    } else {\n                        return patient;\n                    }\n                }),\n                backdropOpen: false,\n            }))\n\n        } catch (e) {\n            console.error(e);\n            // close loading\n            setState((state) => ({ ...state, backdropOpen: false }))\n        }\n    }\n\n    const isDropped = (patient) => {\n        if (typeof patient.dropped !== 'undefined') {\n            return patient.dropped;\n        } else {\n            return false;\n        }\n    }\n\n    const getDroppedDate = (patient) => {\n        if (isDropped(patient)) {\n            return patient.droppedAt.toDate().toLocaleDateString();\n        } else return \"\";\n    }\n\n    const handleQueryChange = ({ target }) => setState(s => ({ ...s, [target.name]: target.value }))\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleClose = () => setAnchorEl(null)\n\n    const handlePatientClick = (patientId) => {\n        history.push(`/${patientId}/patient-details`, {\n            patientId: patientId,\n            titlePage: strings.pageTitles.details_patient,\n        })\n    }\n\n    const { backdropOpen } = state;\n\n    if (backdropOpen) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={backdropOpen}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid\n                container\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                spacing={2}\n            // style={{ paddingTop: 16, paddingBottom: 16 }}\n            >\n                <Grid item xs={5}>\n                    <TextField\n                        fullWidth\n                        error={getFilteredPatients().length === 0}\n                        placeholder={strings.patient.search}\n                        type=\"text\"\n                        id=\"query\"\n                        name=\"query\"\n                        variant=\"outlined\"\n                        value={state.query}\n                        onChange={handleQueryChange}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <SearchIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </Grid>\n                {getFilteredPatients().length ? (\n                    <Grid item xs={8}>\n                        <Paper>\n                            <Menu\n                                id=\"long-menu\"\n                                anchorEl={anchorEl}\n                                keepMounted\n                                open={open}\n                                onClose={handleClose}\n                            >\n                                {[{\n                                    path: `/${state.patient.id}/nutritional-plan`,\n                                    titlePage: strings.pageTitles.nutritional_plan,\n                                    icon: <AppsIcon />,\n                                    id: 1,\n                                }, {\n                                    path: `/${state.patient.id}/therapy-status`,\n                                    titlePage: strings.pageTitles.therapy_status,\n                                    icon: <DvrOutlinedIcon />,\n                                    id: 2,\n                                }, {\n                                    path: `/${state.patient.id}/medical-visit`,\n                                    titlePage: strings.pageTitles.medical_visit,\n                                    icon: <LocalHospitalIcon />,\n                                    id: 3,\n                                }, {\n                                    path: `/${state.patient.id}/notifications`,\n                                    titlePage: strings.pageTitles.notifications,\n                                    icon: <NotificationsIcon />,\n                                    id: 4,\n                                }].map((item) => {\n                                    const { patient } = state;\n                                    return (\n                                        <MenuItem key={`${item.id}-menu-item-id`}\n                                            onClick={() => {\n                                                item.id === 4 ? (\n                                                    history.push(item.path, {\n                                                        titlePage: item.titlePage,\n                                                        patientId: patient.id,\n                                                        token: patient.firebase_device_token,\n                                                    })\n                                                ) : (\n                                                    history.push(item.path, {\n                                                        titlePage: item.titlePage,\n                                                        patientId: patient.id,\n                                                    })\n                                                )\n                                            }}>\n                                            <ListItemIcon>\n                                                {item.icon}\n                                            </ListItemIcon>\n                                            <ListItemText primary={item.titlePage} />\n                                        </MenuItem>\n                                    )\n                                })}\n                                {\n                                    (state.patient.status === PATIENT_STATUS.RED ||\n                                        state.patient.status === PATIENT_STATUS.YELLOW\n                                    ) ? (<Divider />) : null}\n                                {\n                                    (state.patient.status === PATIENT_STATUS.RED ||\n                                        state.patient.status === PATIENT_STATUS.YELLOW\n                                    ) ? (\n                                        <MenuItem onClick={handleUpdatePatientStatus}>\n                                            <ListItemIcon>\n                                                <CheckCircleIconStyled />\n                                            </ListItemIcon>\n                                            <ListItemText primary=\"Torna regolare\" />\n                                        </MenuItem>\n                                    ) : (null)\n                                }\n                                {\n                                    <MenuItem onClick={() => handleDropoutPatient(state.patient.id)}>\n                                        <ListItemIcon>\n                                            <BlockIcon />\n                                        </ListItemIcon>\n                                        <ListItemText primary={\"Drop out\"} />\n                                    </MenuItem>\n                                }\n                            </Menu>\n                            <List dense>\n                                {getFilteredPatients().map((patient, idx) => {\n\n                                    let icon = <CheckCircleIconStyled />\n\n                                    switch (patient.status) {\n                                        case PATIENT_STATUS.YELLOW: {\n                                            icon = <WarningIconStyled />\n                                            break;\n                                        }\n\n                                        case PATIENT_STATUS.RED: {\n                                            icon = <ErrorIconStyled />\n                                            break;\n                                        }\n\n                                        default: {\n                                            break;\n                                        }\n                                    }\n\n                                    return (\n                                        <ListItem\n                                            dense\n                                            selected={isDropped(patient)}\n                                            key={patient.id}\n                                            divider={getFilteredPatients().length !== (idx + 1)}\n                                            button\n                                            onClick={() => handlePatientClick(patient.id)}>\n                                            <ListItemIcon>\n                                                <IconButton disabled>\n                                                    {icon}\n                                                </IconButton>\n                                            </ListItemIcon>\n                                            <ListItemText\n                                                primary={`${patient.name} ${patient.surname}`}\n                                                secondary={getDroppedDate(patient)}\n                                            //secondary={patient.createdAt.toLocaleString(currentLanguage)}\n                                            />\n                                            <ListItemSecondaryAction>\n                                                <IconButton\n                                                    aria-label=\"more\"\n                                                    aria-controls=\"long-menu\"\n                                                    aria-haspopup=\"true\"\n                                                    onClick={(e) => {\n                                                        setAnchorEl(e.currentTarget);\n                                                        setState((s) => ({ ...s, patient: patient }));\n                                                    }}\n                                                //size=\"small\"\n                                                >\n                                                    <MoreVertIcon />\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    )\n                                })}\n                            </List>\n                        </Paper>\n                    </Grid>\n                ) : (\n                    <Grid item xs={8}></Grid>\n                )}\n            </Grid>\n        </Container>\n    )\n}","const meals = [\n    { id: \"breakfast\", label: \"Breakfast\" },\n    { id: \"morning_break\", label: \"Morning\" },\n    { id: \"lunch\", label: \"Lunch\" },\n    { id: \"afternoon_break\", label: \"Afternoon break\" },\n    { id: \"dinner\", label: \"Dinner\" }\n]\n\nexport default meals;","const days = [\n    {\n        id: \"mon\",\n        name: \"Monday\"\n    },\n    {\n        id: \"tue\",\n        name: \"Tuesday\"\n    },\n    {\n        id: \"wed\",\n        name: \"Wednesday\"\n    },\n    {\n        id: \"thu\",\n        name: \"Thursday\"\n    },\n    {\n        id: \"fri\",\n        name: \"Friday\",\n    },\n    {\n        id: \"sat\",\n        name: \"Saturday\"\n    },\n    {\n        id: \"sun\",\n        name: \"Sunday\"\n    }\n]\n\nexport default days;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Alert } from '@material-ui/lab';\n\nclass Notification extends React.Component {\n    handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        this.props.close();\n    };\n\n    render() {\n        const { message, open, severity } = this.props;\n        return (\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                open={open}\n                autoHideDuration={5000}\n                onClose={() => this.handleClose()}\n                ContentProps={{\n                    'aria-describedby': 'message-id',\n                }}\n                // message={message}\n                action={[\n                    <IconButton\n                        key=\"close\"\n                        aria-label=\"Close\"\n                        color=\"inherit\"\n                        onClick={() => this.handleClose()}\n                    >\n                        <CloseIcon />\n                    </IconButton>,\n                ]}\n            >\n                <Alert severity={severity} elevation={6} variant=\"filled\">\n                    {message}\n                </Alert>\n            </Snackbar>\n\n        );\n    }\n}\n\nNotification.propTypes = {\n    // classes: PropTypes.object.isRequired,\n    close: PropTypes.func.isRequired,\n    message: PropTypes.string.isRequired,\n    severity: PropTypes.oneOf([\"success\", \"error\", \"warning\", \"info\"])\n};\n\nNotification.defaultProps = {\n    severity: \"success\"\n}\n\nexport default Notification;\n","import React, { useState, useEffect, useRef } from \"react\"\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    IconButton,\n    DialogContent,\n    DialogTitle,\n    Dialog,\n    Button,\n    DialogActions,\n    CircularProgress,\n    Container,\n    Grid,\n    Backdrop,\n    Toolbar,\n    InputLabel,\n    FormHelperText,\n    FormControl,\n    MenuItem,\n    Select,\n    List,\n    ListItem,\n    ListItemText,\n    Checkbox,\n    ListItemSecondaryAction,\n    TextField,\n    ListItemIcon,\n    alpha,\n    ButtonGroup,\n    Typography,\n    Tooltip,\n} from \"@material-ui/core\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\"\nimport { Autocomplete } from \"@material-ui/lab\";\nimport PropTypes from 'prop-types';\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CheckboxIcon from \"@material-ui/icons/CheckBox\";\nimport CheckboxIconOutlinedIcon from \"@material-ui/icons/CheckBoxOutlineBlank\"\nimport SaveIcon from '@material-ui/icons/Save';\nimport { useAuth } from \"../contexts/AuthContext\";\nimport meals from \"../utils/Meals\";\nimport fullDays from \"../utils/Days\";\nimport Notification from \"./Notification\";\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport strings from '../components/Language/index';\nimport { Timestamp } from \"firebase/firestore\";\nimport { useParams } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    headerTable: {\n        backgroundColor: '#f1f1f1'\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    // headerTableText: {\n    //     fontWeight: 'bold',\n    //     textTransform: 'capitalize'\n    // },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    foods: {\n        width: '100%',\n        // maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n        position: 'relative',\n        overflow: 'auto',\n        maxHeight: 300,\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: alpha(theme.palette.common.black, 0.15),\n        '&:hover': {\n            backgroundColor: alpha(theme.palette.common.black, 0.05),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledDialogTitle = withStyles(() => ({\n    root: {\n        backgroundColor: '#fff', //white\n        color: '#000' //black\n    }\n}))(DialogTitle);\n\nconst BootstrapDialogTitle = (props) => {\n    const { children, onClose, ...other } = props;\n\n    return (\n        <StyledDialogTitle  {...other}>\n            {children}\n            {onClose ? (\n                <IconButton\n                    aria-label=\"close\"\n                    onClick={onClose}\n                    style={{ position: 'absolute', right: 8, top: 8 }}\n                >\n                    <CloseIcon />\n                </IconButton>\n            ) : (null)}\n        </StyledDialogTitle>\n    );\n};\n\nBootstrapDialogTitle.propTypes = {\n    children: PropTypes.node,\n    onClose: PropTypes.func.isRequired,\n};\n\nexport default function NutritionalPlan() {\n    //const { location } = props;\n    let { patientId } = useParams();\n\n    const patient_id = patientId;//patientId === undefined ? location.state?.patientId : patientId;\n    const ref = useRef(null);\n    const classes = useStyles();\n    const { getPatientNutritionalPlan,\n        updatePatientNutritionalPlan,\n        createPatientNutritionalPlan,\n        //getFoods,\n        newDocRef,\n        getBackendFoods,\n        getNutritionalPlanTemplates,\n    } = useAuth();\n\n    const handleClickOpen = () => {\n        // on dialog opens\n\n        // selected day, meal, rows and all fetched foods\n        const { day, meal, rows, foods } = state;\n        const meals = rows[day][meal];\n\n        const checked_food = [];\n        meals.forEach(food => {\n            const _food = foods.find((f) => (f.food_id == String(food.food_id)) || (f.food == food.food));\n            if (_food !== undefined)\n                checked_food.push({ ..._food, quantity: food.quantity })\n        });\n        // const newChecked = meals?.filter(({ food_id }, _) => typeof food_id === \"string\" && food_id.length > 0).map(({ food_id }, _) => food_id);\n        setState(s => ({\n            ...s,\n            open: true,\n            // checked: newChecked,\n            checked_food: checked_food\n        }));\n    }\n\n    const handleClose = () => setState(s => ({ ...s, open: false }))\n\n    const handleSave = async () => {\n        const { day, meal, checked_food, rows, template_uid } = state;\n        const { uid } = rows;\n        const meals = rows[day];\n        // console.debug(checked_food);\n        const new_checked_food = checked_food.map(({ food_id, food, quantity }) => ({ food_id: food_id, food: food, quantity: quantity }));\n        // const obj = { [day]: { [meal]: new_checked_food } };\n        // const obj = { [`${day}.${meal}`]: new_checked_food }\n        const newRows = {\n            templateId: template_uid,\n            ...rows,\n            [day]: {\n                ...meals,\n                [meal]: new_checked_food,\n            },\n            modifiedAt: Timestamp.now(),\n        }\n\n        try {\n            // !uid could be undefined, set it as empty string on creation document\n\n            if (uid === undefined) {\n                const docRef = newDocRef(`patients/${patient_id}/nutritional_plans`);\n                newRows.uid = docRef.id\n                await createPatientNutritionalPlan(docRef, newRows);\n            } else {\n                await updatePatientNutritionalPlan(newRows, patient_id, uid);\n            }\n        } catch (error) {\n            console.error(error);\n        }\n\n        setState(s => ({\n            ...s,\n            messageNotification: \"Aggiornato\",\n            openNotification: true,\n            open: false,\n            rows: newRows,\n            nextUpdate: s.nextUpdate + 1,\n        }));\n    }\n\n    const handleToggle = (value) => () => {\n        const { checked_food } = state;\n        const currentIndex = checked_food.indexOf(checked_food.find(f => f.food_id == value));\n        let newChecked = [...checked_food];\n\n        if (currentIndex === -1) {\n            // if new food\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setState(s => ({ ...s, checked_food: newChecked }))\n    };\n\n    const [state, setState] = useState({\n        messageNotification: '',\n        openNotification: false,\n        checked_food: [],\n        backdrop: false,\n        open: false,\n        checked: ['0'],\n        day: \"mon\", // !used as default value - first in list\n        meal: \"breakfast\", // !used as default value - first in list\n        foods: [], // all fetched foods\n        rows: { // bellow is just a template, anyway rows are fetched at first load\n            mon: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            tue: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            wed: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            thu: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            fri: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            sat: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            sun: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            uid: undefined\n        },\n        templates: [],\n        template_uid: \"\",\n        nextUpdate: 0,\n    });\n\n    useEffect(() => {\n        ref.current = true;\n        async function fetchData() {\n\n            if (ref.current)\n                setState(s => ({ ...s, backdrop: true }));\n\n            const promises = [];\n            // fetch templates\n            promises.push(getNutritionalPlanTemplates());\n            // fetch all foods\n            promises.push(getBackendFoods());\n            // fetch patient nutritional plan\n            promises.push(getPatientNutritionalPlan(patient_id));\n\n            try {\n\n                const [\n                    templates_nutritional_plan,\n                    { data: snap_foods },\n                    snap_nutritional_plan,\n                ] = await Promise.all(promises);\n\n                const foods = snap_foods.map(data => ({\n                    food_id: String(data.id),\n                    food: data.name,\n                    carbs: data.carbs,\n                    fats: data.fats,\n                    proteins: data.proteins,\n                    quantity: 0,\n                }));\n\n                const templates = templates_nutritional_plan.docs.map((doc) => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    // console.debug('template', data.uid, id);\n                    return ({ ...data, templateId: id, uid: undefined });\n                });\n\n                const notEmpty = !snap_nutritional_plan.empty;\n\n                const plans = snap_nutritional_plan.docs.map((doc) => {\n                    const data = doc.data();\n                    const id = doc.id;\n\n                    return ({ ...data, uid: id })\n                });\n\n                let currentPlan = templates[0];\n                if (notEmpty) {\n                    // if there is any plan then it has uid\n                    currentPlan = plans[0];\n                }\n                // else currentPlan is a template, so its uid is undefined -> new on firestore\n\n                if (ref.current)\n\n                    setState(s => ({\n                        ...s,\n                        foods: foods,\n                        rows: currentPlan,\n                        template_uid: currentPlan.templateId,\n                        backdrop: false,\n                        templates: templates,\n                    }))\n\n\n            } catch (error) {\n                console.error(error.message);\n            }\n\n        }\n\n        fetchData();\n\n        return () => (ref.current = false)\n    }, [state.nextUpdate]);\n\n    const handleDayChange = ({ target }) => {\n        const day = target.value;\n        const { meal, rows, foods } = state;\n        const meals = rows[day][meal];\n        const checked_food = [];\n        // console.debug(day, meal, meals);\n        if (meals !== undefined)\n            meals.forEach(food => {\n                const _food = foods.find((f) => f.food_id == String(food?.food_id) || f.food == food?.food);\n                // console.debug(_food);\n                if (_food !== undefined)\n                    checked_food.push({ ..._food, quantity: food?.quantity });\n            })\n        // const newChecked = foods?.filter(({ food_id }, _) => typeof food_id === \"string\" && food_id.length > 0).map(({ food_id }, _) => food_id);\n        // console.debug('new checked foods', newChecked);\n        setState(s => ({\n            ...s,\n            day: day,\n            // checked: newChecked,\n            checked_food: checked_food\n        }))\n    }\n\n    const handleMealChange = ({ target }) => {\n        const meal = target?.value;\n        const { day, rows, foods } = state;\n        const meals = rows[day][meal];\n        // console.debug(day, meal, meals);\n        const checked_food = [];\n        if (meals !== undefined) {\n            meals.forEach(food => {\n                const _food = foods.find((f) => f.food_id == String(food?.food_id) || f.food == food?.food);\n                if (_food !== undefined)\n                    checked_food.push(({ ..._food, quantity: food?.quantity }))\n            })\n        }\n        // const newChecked = meals?.filter(({ food_id }, _) => typeof food_id === \"string\" && food_id.length > 0).map(({ food_id }, _) => food_id)\n        setState(s => ({\n            ...s,\n            meal: meal,\n            // checked: newChecked,\n            checked_food: checked_food\n        }))\n    }\n\n    const handleQuantityChange = (food_id) => ({ target }) => {\n        const value = target?.value;\n        const { checked_food } = state;\n        const new_checked_food = checked_food.map(food => {\n            if (food.food_id == food_id) {\n                return ({ ...food, quantity: value })\n            } else {\n                return food;\n            }\n        });\n        setState(s => ({ ...s, checked_food: new_checked_food }));\n    }\n\n\n    /*const cleanAll = () => {\n        setState((s) => {\n            const { rows } = s;\n            const result = {};\n            Object.keys(rows).forEach(day => {\n                const row = rows[day];\n                result[day] = {};\n                Object.keys(row).forEach((meal) => {\n                    result[day][meal] = []\n                })\n            })\n            return ({ ...s, rows: result });\n        })\n    }*/\n\n    const handleSaveClick = async () => {\n        // the button is disabled, this function is suspended\n        const { rows } = state;\n        const { uid } = rows;\n\n        /**\n         * if new then give its patien_id\n         * else update document and give its previous doc uid (already has patient id)\n         */\n\n        try {\n            (uid === undefined) ?\n                await createPatientNutritionalPlan(rows, patient_id) :\n                await updatePatientNutritionalPlan(rows, patient_id, uid);\n        } catch (error) {\n            console.debug(error.code);\n            console.error(error.message);\n        }\n\n    }\n\n    return (\n        <Container maxWidth={false}>\n            <Backdrop open={state.backdrop} className={classes.backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n            <Notification\n                message={state.messageNotification}\n                close={() => setState((s) => ({ ...s, openNotification: false }))}\n                open={state.openNotification}\n            />\n            <Grid container spacing={2} justifyContent=\"space-between\">\n                <Dialog\n                    maxWidth=\"md\"\n                    fullWidth\n                    onClose={handleClose}\n                    aria-labelledby=\"customized-dialog-title\"\n                    open={state.open}\n                    disableEscapeKeyDown\n                >\n                    <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                        Modifica piano nutrizionale\n                    </BootstrapDialogTitle>\n                    <DialogContent dividers>\n                        <Grid container spacing={2}\n                            direction=\"row\"\n                            justifyContent=\"center\"\n                            alignItems=\"flex-start\">\n                            <Grid item xs={6}>\n                                <FormControl className={classes.formControl} fullWidth>\n                                    <InputLabel id=\"day-select-label\">Giorni</InputLabel>\n                                    <Select\n                                        fullWidth\n                                        labelId=\"day-select-label\"\n                                        id=\"day-select\"\n                                        value={state.day}\n                                        onChange={handleDayChange}>\n                                        {/* <MenuItem value=\"\">\n                                            <em>None</em>\n                                        </MenuItem> */}\n                                        {fullDays.map(({ id }, _) => (\n                                            <MenuItem key={id} value={id}>\n                                                {strings.days[id]}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                    <FormHelperText>1. Seleziona il giorno</FormHelperText>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <FormControl className={classes.formControl} fullWidth>\n                                    <InputLabel id=\"select-meal-label\">{strings.meals.meals}</InputLabel>\n                                    <Select\n                                        fullWidth\n                                        labelId=\"select-meal-label\"\n                                        id=\"select-meal\"\n                                        value={state.meal}\n                                        onChange={handleMealChange}>\n                                        {/* <MenuItem value=\"\">\n                                            <em>None</em>\n                                        </MenuItem> */}\n                                        {meals.map(({ id }, _) => (\n                                            <MenuItem key={id} value={id}>\n                                                {strings.meals[id]}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                    <FormHelperText>2. Seleziona il pasto</FormHelperText>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Autocomplete\n                                    multiple\n                                    fullWidth\n                                    value={state.checked_food}\n                                    onChange={(e, value, reason) => {\n                                        // console.debug('onchange', value);\n                                        setState(s => ({ ...s, checked_food: value }))\n                                    }}\n                                    size=\"small\"\n                                    id=\"checkboxes-foods\"\n                                    options={state.foods}\n                                    disableCloseOnSelect\n                                    getOptionSelected={(option, value) => (option.food_id === value.food_id && option.food === value.food)}\n                                    getOptionLabel={({ food }) => food}\n                                    renderOption={({ food, food_id }, { selected }) => {\n                                        return (\n                                            <React.Fragment key={`food-key-${food_id}`}>\n                                                <Checkbox\n                                                    icon={<CheckboxIconOutlinedIcon fontSize=\"small\" />}\n                                                    checkedIcon={<CheckboxIcon fontSize='small' />}\n                                                    style={{ marginRight: 8 }}\n                                                    checked={selected}\n                                                    id={`checkbox-id-${food_id}`}\n                                                />\n                                                {food}\n                                            </React.Fragment>\n                                        )\n                                    }}\n                                    renderInput={(params) => <TextField {...params} size=\"small\" label=\"Food\" helperText={\"3. Add/Remove Food from the list\"} />}\n                                />\n                                {/* <div className={classes.search}>\n                                    <div className={classes.searchIcon}><SearchIcon /></div>\n                                    <InputBase\n                                        placeholder=\"Search...\"\n                                        autoFocus\n                                        color=\"primary\"\n                                        fullWidth\n                                        id={'search-food-name'}\n                                        name={'searchFoodName'}\n                                        classes={{\n                                            root: classes.inputRoot,\n                                            input: classes.inputInput\n                                        }}\n                                        inputProps={{ 'aria-label': 'search' }}\n                                    />\n                                </div> */}\n                            </Grid>\n                            <Grid item xs={12}>\n                                <List className={classes.foods}>\n                                    {state.checked_food?.map(({ food_id, food, quantity, fats, carbs, proteins }, _) =>\n                                        <ListItem key={food}>\n                                            <ListItemIcon>\n                                                <Checkbox\n                                                    // checked={state.checked.indexOf(food_id) !== -1}\n                                                    checked={state.checked_food.find((f) => f.food_id == food_id) !== undefined}\n                                                    color=\"primary\"\n                                                    onChange={handleToggle(food_id)}\n                                                    inputProps={{ 'aria-labelledby': `${food}` }}\n                                                />\n                                            </ListItemIcon>\n                                            <ListItemText\n                                                primary={food}\n                                                secondary={`carbs ${carbs}g, fats ${fats}g, prots ${proteins}g`}\n                                            />\n                                            <ListItemSecondaryAction>\n                                                <TextField\n                                                    // disabled={state.checked.indexOf(food_id) === -1}\n                                                    label={\"Quantity\"}\n                                                    variant=\"outlined\"\n                                                    size=\"small\"\n                                                    value={quantity}\n                                                    required\n                                                    type=\"number\"\n                                                    // error={typeof quantity === \"string\" && quantity.length === 0}\n                                                    onChange={handleQuantityChange(food_id)}\n                                                    helperText={\"grammi\"}\n                                                />\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    )}\n                                </List>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <ButtonGroup size=\"small\" variant=\"outlined\">\n                            <Button color=\"secondary\" startIcon={<CancelIcon />} onClick={handleClose}>Annulla</Button>\n                            <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSave}>Salva</Button>\n                        </ButtonGroup>\n                        {/* <Button onClick={handleClose}>\n                            Cancel\n                        </Button>\n                        <Button autoFocus onClick={handleSave}>\n                            Save changes\n                        </Button> */}\n                    </DialogActions>\n                </Dialog>\n\n                <Grid item xs={3}>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"plan-selection-id\" variant=\"outlined\">\n                            Piano nutrizionale\n                        </InputLabel>\n                        <Select\n                            labelId=\"plan-selection-id\"\n                            id=\"plan-selection\"\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"template_uid\"\n                            margin=\"dense\"\n                            label=\"Piano nutrizionale\"\n                            value={state.template_uid}\n                            onChange={({ target }) => {\n                                const uid = target.value;\n                                setState((state) => {\n                                    const { templates, rows } = state;\n                                    const template = templates.find(item => item.templateId === uid);\n                                    if (template !== undefined)\n                                        return ({\n                                            ...state,\n                                            [target.name]: uid,\n                                            rows: { ...template, uid: rows.uid },\n                                        });\n                                    else\n                                        return ({ ...state, [target.name]: uid, })\n                                });\n                            }}\n                        >\n                            {/* <MenuItem value=\"\">\n                                <ListItemText primary={\"-\"} />\n                            </MenuItem> */}\n                            {state.templates?.map((item) => (\n                                <MenuItem value={item.templateId} key={item.templateId} dense>\n                                    <ListItemText primary={item.name} />\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item>\n                    {/* <Tooltip title=\"Salva\">\n                        <IconButton onClick={handleSave}>\n                            <SaveIcon />\n                        </IconButton>\n                    </Tooltip> */}\n                    <Tooltip title=\"Modifica\">\n                        <IconButton onClick={handleClickOpen}>\n                            <CreateIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Grid>\n\n                <Grid item xs={12}>\n\n                    <Paper sx={{ width: '100%', mb: 2 }} elevation={3}>\n\n                        <TableContainer>\n                            <Table aria-label=\"simple table\">\n                                <caption>Nota: aprire modifica piano in alto a destra e poi salvare.</caption>\n                                <TableHead>\n                                    <TableRow className={classes.headerTable}>\n                                        <StyledTableCell>{strings.meals.meals}</StyledTableCell>\n                                        {fullDays.map(({ id }, _) => (\n                                            <StyledTableCell\n                                                key={id}\n                                                align=\"left\"\n                                            // className={classes.headerTableText}\n                                            >\n                                                {strings.days[id]}\n                                            </StyledTableCell>\n                                        ))}\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {meals.map(({ id }, _) =>\n                                        <StyledTableRow key={id}>\n                                            <TableCell style={{ fontWeight: 'bold' }} >\n                                                {strings.meals[id]}\n                                            </TableCell>\n                                            {fullDays.map((day) => (\n                                                <TableCell key={day.id} padding=\"none\">\n                                                    <ol key={day.id}>\n                                                        {(state.rows[day.id][id]?.map(({ food, quantity }, _) => {\n                                                            if (typeof food === \"string\" && food.length > 0)\n                                                                return (<li key={food}>{(`${food} (${quantity}g)`)}</li>)\n                                                            return null;\n                                                        }))\n                                                            // ?.join(',')\n                                                        }\n                                                    </ol>\n                                                </TableCell>)\n                                            )}\n                                        </StyledTableRow>\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        {/* <Toolbar>\n                            <ButtonGroup size=\"small\" variant=\"outlined\">\n                                <Button color=\"primary\" startIcon={<CreateIcon />} onClick={handleClickOpen}>Modifica</Button>\n                                <Button color=\"secondary\" startIcon={<SaveIcon />} onClick={handleSaveClick} disabled>Salva</Button>\n                            </ButtonGroup> \n                        </Toolbar>*/}\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container >\n    );\n\n}\n\nfunction ConfirmationDialog(props) {\n    const { onClose, open, ...other } = props;\n\n    const handleCancel = () => {\n        onClose();\n    };\n\n    const handleOk = ({ target }) => {\n        onClose(target.id);\n    };\n\n\n    return (\n        <Dialog\n            maxWidth=\"xs\"\n            aria-labelledby=\"confirmation-dialog-title\"\n            open={open}\n            {...other}\n        >\n            <DialogTitle id=\"confirmation-dialog-title\">Attenzione</DialogTitle>\n            <DialogContent dividers>\n                <Typography variant=\"body1\" color=\"primary\">Conferma prima di eliminare tutto.</Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleCancel} color=\"secondary\">\n                    Annulla\n                </Button>\n                <Button id=\"confirm\" onClick={handleOk} color=\"primary\">\n                    Conferma\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmationDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n};","import React, { useState, useEffect, useRef } from \"react\"\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    IconButton,\n    DialogContent,\n    DialogTitle,\n    Dialog,\n    Button,\n    DialogActions,\n    CircularProgress,\n    Container,\n    Grid,\n    Backdrop,\n    Toolbar,\n    InputLabel,\n    FormHelperText,\n    FormControl,\n    MenuItem,\n    Select,\n    List,\n    ListItem,\n    ListItemText,\n    Checkbox,\n    ListItemSecondaryAction,\n    TextField,\n    ListItemIcon,\n    alpha,\n    ButtonGroup,\n    Typography,\n    Tooltip,\n} from \"@material-ui/core\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\"\nimport { Autocomplete } from \"@material-ui/lab\";\nimport PropTypes from 'prop-types';\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CheckboxIcon from \"@material-ui/icons/CheckBox\";\nimport CheckboxIconOutlinedIcon from \"@material-ui/icons/CheckBoxOutlineBlank\"\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport meals from \"../../utils/Meals\";\nimport fullDays from \"../../utils/Days\";\nimport Notification from \"../Notification\";\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport strings from '../Language/index';\nimport { Timestamp } from \"firebase/firestore\";\n\nconst useStyles = makeStyles((theme) => ({\n    headerTable: {\n        backgroundColor: '#f1f1f1'\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    foods: {\n        width: '100%',\n        // maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n        position: 'relative',\n        overflow: 'auto',\n        maxHeight: 300,\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: alpha(theme.palette.common.black, 0.15),\n        '&:hover': {\n            backgroundColor: alpha(theme.palette.common.black, 0.05),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledDialogTitle = withStyles(() => ({\n    root: {\n        backgroundColor: '#fff', //white\n        color: '#000' //black\n    }\n}))(DialogTitle);\n\nconst BootstrapDialogTitle = (props) => {\n    const { children, onClose, ...other } = props;\n\n    return (\n        <StyledDialogTitle  {...other}>\n            {children}\n            {onClose ? (\n                <IconButton\n                    aria-label=\"close\"\n                    onClick={onClose}\n                    style={{ position: 'absolute', right: 8, top: 8 }}\n                >\n                    <CloseIcon />\n                </IconButton>\n            ) : (null)}\n        </StyledDialogTitle>\n    );\n};\n\nBootstrapDialogTitle.propTypes = {\n    children: PropTypes.node,\n    onClose: PropTypes.func.isRequired,\n};\n\n/**\n * @description\n * @version 1.0.1\n * @name TemplateNutritionalPlan\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @param {*} props \n * @returns \n */\nexport default function NutritionalPlan() {\n    const ref = useRef(null);\n    const classes = useStyles();\n    const {\n        updateNutritionalPlanTemplate,\n        createNutritionalPlanTemplate,\n        deleteNutritionalPlanTemplate,\n        newDocRef,\n        getBackendFoods,\n        getNutritionalPlanTemplates,\n    } = useAuth();\n\n    const handleClickOpen = () => {\n        // on dialog opens\n\n        // selected day, meal, rows and all fetched foods\n        const { day, meal, rows, foods } = state;\n        const meals = rows[day][meal];\n\n        const checked_food = [];\n        meals.forEach(food => {\n            const _food = foods.find((f) => (f.food_id == String(food.food_id)) || (f.food == food.food));\n            if (_food !== undefined)\n                checked_food.push({ ..._food, quantity: food.quantity })\n        });\n        setState(s => ({\n            ...s,\n            open: true,\n            checked_food: checked_food\n        }));\n    }\n\n    const handleClickDelete = async () => {\n        const { template } = state;\n        try {\n            await deleteNutritionalPlanTemplate(template);\n            setState(s => ({ ...s, nextUpdate: s.nextUpdate + 1, template: \"\", }))\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    const handleClose = () => setState(s => ({ ...s, open: false }))\n\n    const handleSave = async () => {\n        const { day, meal, checked_food, rows } = state;\n        const { uid } = rows;\n        const meals = rows[day];\n        const new_checked_food = checked_food.map(({ food_id, food, quantity }) => (\n            { food_id: food_id, food: food, quantity: quantity }\n        ));\n        const newRows = {\n            ...rows,\n            [day]: {\n                ...meals,\n                [meal]: new_checked_food\n            }\n        }\n\n        try {\n            // !uid could be undefined, set it as empty string on creation document\n            if (uid === undefined) {\n                const docRef = newDocRef(\"templates_nutritional_plan\");\n                newRows.uid = docRef.id\n                await createNutritionalPlanTemplate(docRef, newRows);\n            } else {\n                await updateNutritionalPlanTemplate(newRows, uid);\n            }\n        } catch (error) {\n            console.error(error);\n        }\n\n        setState(s => ({\n            ...s,\n            messageNotification: \"Aggiornato\",\n            openNotification: true,\n            open: false,\n            nextUpdate: s.nextUpdate + 1, // fetch updated data\n        }));\n    }\n\n    const handleToggle = (value) => () => {\n        const { checked_food } = state;\n        const currentIndex = checked_food.indexOf(checked_food.find(f => f.food_id == value));\n        let newChecked = [...checked_food];\n\n        if (currentIndex === -1) {\n            // if new food\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setState(s => ({ ...s, checked_food: newChecked }))\n    };\n\n    const [state, setState] = useState({\n        messageNotification: '',\n        openNotification: false,\n        checked_food: [],\n        backdrop: false,\n        open: false,\n        checked: ['0'],\n        day: \"mon\", // !used as default value - first in list\n        meal: \"breakfast\", // !used as default value - first in list\n        foods: [], // all fetched foods\n        rows: { // bellow is just a template, rows are fetched at first load\n            mon: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            tue: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            wed: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            thu: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            fri: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            sat: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            sun: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            uid: undefined,\n        },\n        emptyPlan: {\n            mon: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            tue: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            wed: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            thu: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            fri: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            sat: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            sun: {\n                breakfast: [{ food: \"\", quantity: 0 }],\n                morning_break: [{ food: \"\", quantity: 0 }],\n                lunch: [{ food: \"\", quantity: 0 }],\n                afternoon_break: [{ food: \"\", quantity: 0 }],\n                dinner: [{ food: \"\", quantity: 0 }]\n            },\n            uid: undefined,\n            name: \"\",\n            description: \"\",\n        },\n        name_templates: [\n            {\n                uid: \"\",\n                name: \"\",\n            },\n        ],\n        new_name_template: \"\",\n        templates: [],\n        template: \"\",\n        openNewTemplateDialog: false,\n        nextUpdate: 1,\n        isNewTemplate: false,\n    });\n\n    const handleCloseNewTemplateDialog = () => {\n        setState(s => ({ ...s, openNewTemplateDialog: false }))\n    }\n\n    const handleDayChange = ({ target }) => {\n        const day = target.value;\n        const { meal, rows, foods } = state;\n        const meals = rows[day][meal];\n        const checked_food = [];\n        if (meals !== undefined)\n            meals.forEach(food => {\n                const _food = foods.find((f) => f.food_id == String(food?.food_id) || f.food == food?.food);\n                if (_food !== undefined)\n                    checked_food.push({ ..._food, quantity: food?.quantity });\n            })\n        setState(s => ({\n            ...s,\n            day: day,\n            checked_food: checked_food\n        }))\n    }\n\n    const handleMealChange = ({ target }) => {\n        const meal = target?.value;\n        const { day, rows, foods } = state;\n        const meals = rows[day][meal];\n        const checked_food = [];\n        if (meals !== undefined) {\n            meals.forEach(food => {\n                const _food = foods.find((f) => f.food_id == String(food?.food_id) || f.food == food?.food);\n                if (_food !== undefined)\n                    checked_food.push(({ ..._food, quantity: food?.quantity }))\n            })\n        }\n        setState(s => ({\n            ...s,\n            meal: meal,\n            checked_food: checked_food\n        }))\n    }\n\n    const handleQuantityChange = (food_id) => ({ target }) => {\n        const value = target?.value;\n        const { checked_food } = state;\n        const new_checked_food = checked_food.map(food => {\n            if (food.food_id == food_id) {\n                return ({ ...food, quantity: value })\n            } else {\n                return food;\n            }\n        });\n        setState(s => ({ ...s, checked_food: new_checked_food }));\n    }\n\n    useEffect(() => {\n        ref.current = true;\n        async function fetchData() {\n\n            if (ref.current)\n                setState(s => ({ ...s, backdrop: true }));\n\n            const promises = [];\n\n            try {\n\n                promises.push(getBackendFoods());\n\n                promises.push(getNutritionalPlanTemplates());\n\n                const [\n                    { data: snap_foods },\n                    templates_nutritional_plan,\n                ] = await Promise.all(promises);\n\n                const foods = snap_foods.map(data => {\n                    const id = String(data.id);\n                    const food = data.name;\n                    return ({\n                        ...data,\n                        food_id: id,\n                        food: food,\n                        quantity: 0\n                    });\n                });\n\n                const templates = templates_nutritional_plan.docs.map((doc) => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return ({ ...data, uid: id });\n                });\n\n                if (ref.current)\n                    setState(s => {\n                        const { rows } = s;\n                        const uid = rows.uid;\n                        let newRows = null;\n                        if (uid === undefined)\n                            newRows = ({ ...rows, ...templates[0] })\n                        else {\n                            const lastOne = templates.find(item => uid === item.uid);\n                            newRows = ({ ...rows, ...lastOne });\n                            console.debug(newRows.uid);\n                        }\n\n                        return ({\n                            ...s,\n                            foods: foods,\n                            rows: newRows,\n                            backdrop: false,\n                            templates: templates,\n                            template: newRows.uid,// === s.template ? \"\" : newRows.uid,\n                        })\n                    });\n\n            } catch (error) {\n                console.error(error);\n            }\n\n        }\n\n        fetchData();\n\n        return () => (ref.current = false)\n    }, [state.nextUpdate]);\n\n    return (\n        <Container maxWidth={false}>\n            <Backdrop open={state.backdrop} className={classes.backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n            <Notification\n                message={state.messageNotification}\n                close={() => setState((s) => ({ ...s, openNotification: false }))}\n                open={state.openNotification}\n            />\n            <Grid container spacing={2} justifyContent=\"space-between\">\n                <Dialog\n                    maxWidth=\"md\"\n                    fullWidth\n                    onClose={handleClose}\n                    aria-labelledby=\"customized-dialog-title\"\n                    open={state.open}\n                    disableEscapeKeyDown\n\n                >\n                    <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                        Modifica piano nutrizionale\n                    </BootstrapDialogTitle>\n                    <DialogContent dividers>\n                        <Grid container spacing={2}\n                            direction=\"row\"\n                            justifyContent=\"center\"\n                            alignItems=\"flex-start\">\n                            <Grid item xs={12}>\n                                <TextField\n                                    id=\"name-nutritional-plan\"\n                                    name=\"name_nutritional_plan\"\n                                    value={state.rows.name}\n                                    type=\"text\"\n                                    fullWidth\n                                    onChange={({ target }) => {\n                                        const newName = target.value;\n                                        setState(s => {\n                                            const { rows } = s;\n                                            rows.name = newName;\n                                            return ({ ...s, rows });\n                                        })\n                                    }}\n                                // variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <FormControl className={classes.formControl} fullWidth>\n                                    <InputLabel id=\"day-select-label\">Giorni</InputLabel>\n                                    <Select\n                                        fullWidth\n                                        labelId=\"day-select-label\"\n                                        id=\"day-select\"\n                                        value={state.day}\n                                        onChange={handleDayChange}>\n                                        {/* <MenuItem value=\"\">\n                                            <em>None</em>\n                                        </MenuItem> */}\n                                        {fullDays.map(({ id }, _) => (\n                                            <MenuItem key={id} value={id}>\n                                                {strings.days[id]}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                    <FormHelperText>1. Seleziona il giorno</FormHelperText>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <FormControl className={classes.formControl} fullWidth>\n                                    <InputLabel id=\"select-meal-label\">{strings.meals.meals}</InputLabel>\n                                    <Select\n                                        fullWidth\n                                        labelId=\"select-meal-label\"\n                                        id=\"select-meal\"\n                                        value={state.meal}\n                                        onChange={handleMealChange}>\n                                        {/* <MenuItem value=\"\">\n                                            <em>None</em>\n                                        </MenuItem> */}\n                                        {meals.map(({ id }, _) => (\n                                            <MenuItem key={id} value={id}>\n                                                {strings.meals[id]}\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                    <FormHelperText>2. Seleziona il pasto</FormHelperText>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Autocomplete\n                                    multiple\n                                    fullWidth\n                                    value={state.checked_food}\n                                    onChange={(e, value, reason) => {\n                                        // console.debug('onchange', value);\n                                        setState(s => ({ ...s, checked_food: value }))\n                                    }}\n                                    size=\"small\"\n                                    id=\"checkboxes-foods\"\n                                    options={state.foods}\n                                    disableCloseOnSelect\n                                    getOptionSelected={(option, value) => (option.food_id === value.food_id && option.food === value.food)}\n                                    getOptionLabel={({ food }) => food}\n                                    renderOption={({ food, food_id }, { selected }) => {\n                                        return (\n                                            <React.Fragment key={`food-key-${food_id}`}>\n                                                <Checkbox\n                                                    icon={<CheckboxIconOutlinedIcon fontSize=\"small\" />}\n                                                    checkedIcon={<CheckboxIcon fontSize='small' />}\n                                                    style={{ marginRight: 8 }}\n                                                    checked={selected}\n                                                    id={`checkbox-id-${food_id}`}\n                                                />\n                                                {food}\n                                            </React.Fragment>\n                                        )\n                                    }}\n                                    renderInput={(params) => <TextField {...params} size=\"small\" label=\"Food\" helperText={\"3. Add/Remove Food from the list\"} />}\n                                />\n                                {/* <div className={classes.search}>\n                                    <div className={classes.searchIcon}><SearchIcon /></div>\n                                    <InputBase\n                                        placeholder=\"Search...\"\n                                        autoFocus\n                                        color=\"primary\"\n                                        fullWidth\n                                        id={'search-food-name'}\n                                        name={'searchFoodName'}\n                                        classes={{\n                                            root: classes.inputRoot,\n                                            input: classes.inputInput\n                                        }}\n                                        inputProps={{ 'aria-label': 'search' }}\n                                    />\n                                </div> */}\n                            </Grid>\n                            <Grid item xs={12}>\n                                <List className={classes.foods}>\n                                    {state.checked_food?.map(({ food_id, food, quantity, fats, carbs, proteins }, _) =>\n                                        <ListItem key={food}>\n                                            <ListItemIcon>\n                                                <Checkbox\n                                                    // checked={state.checked.indexOf(food_id) !== -1}\n                                                    checked={state.checked_food.find((f) => f.food_id == food_id) !== undefined}\n                                                    color=\"primary\"\n                                                    onChange={handleToggle(food_id)}\n                                                    inputProps={{ 'aria-labelledby': `${food}` }}\n                                                />\n                                            </ListItemIcon>\n                                            <ListItemText\n                                                primary={food}\n                                                secondary={`carbs ${carbs}g, fats ${fats}g, prots ${proteins}g`}\n                                            />\n                                            <ListItemSecondaryAction>\n                                                <TextField\n                                                    // disabled={state.checked.indexOf(food_id) === -1}\n                                                    label={\"Quantity\"}\n                                                    variant=\"outlined\"\n                                                    size=\"small\"\n                                                    value={quantity}\n                                                    required\n                                                    type=\"number\"\n                                                    // error={typeof quantity === \"string\" && quantity.length === 0}\n                                                    onChange={handleQuantityChange(food_id)}\n                                                    helperText={\"grammi\"}\n                                                />\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    )}\n                                </List>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <ButtonGroup size=\"small\" variant=\"outlined\">\n                            <Button color=\"secondary\" startIcon={<CancelIcon />} onClick={handleClose}>Annulla</Button>\n                            <Button color=\"primary\" startIcon={<SaveIcon />} onClick={handleSave}>Salva</Button>\n                        </ButtonGroup>\n                        {/* <Button onClick={handleClose}>\n                            Cancel\n                        </Button>\n                        <Button autoFocus onClick={handleSave}>\n                            Save changes\n                        </Button> */}\n                    </DialogActions>\n                </Dialog>\n\n                <Grid item xs={3}>\n                    {/**\n                     * SELECTION\n                     */}\n\n                    <FormControl fullWidth>\n                        <InputLabel id=\"templates-selection\" variant=\"outlined\">\n                            Piano nutrizionale\n                        </InputLabel>\n                        <Select\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"template\"\n                            label=\"Piano nutrizionale\"\n                            labelId=\"templates-selection\"\n                            value={state.template}\n                            onChange={(e) => {\n                                const uid = e.target.value;\n                                setState((s) => {\n                                    const { templates } = s;\n                                    let n = templates.find(item => item.uid === uid);\n                                    if (n !== undefined)\n                                        return ({ ...s, [e.target.name]: uid, rows: n });\n                                    else\n                                        return ({ ...s, [e.target.name]: uid, })\n                                });\n                            }}\n                        >\n                            {state.templates?.map(({ name, uid }) => (\n                                <MenuItem value={uid} key={uid} dense>\n                                    <ListItemText primary={name} />\n                                </MenuItem>\n                            ))}\n                        </Select>\n                        {/* <FormHelperText>Lista piani nutrizionali</FormHelperText> */}\n                    </FormControl>\n                </Grid>\n\n                <Grid item>\n                    <Tooltip title=\"Crea una copia\">\n                        <IconButton onClick={() => {\n                            setState(s => ({\n                                ...s,\n                                openNewTemplateDialog: true,\n                                isNewTemplate: false,\n                            }))\n                        }}>\n                            <FileCopyIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Crea nuovo\">\n                        <IconButton onClick={() => {\n                            setState((s) => ({\n                                ...s,\n                                openNewTemplateDialog: true,\n                                isNewTemplate: true,\n                            }))\n                        }}>\n                            <AddIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Modifica\">\n                        <IconButton onClick={handleClickOpen}>\n                            <CreateIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Rimuovi\">\n                        <IconButton onClick={handleClickDelete}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Grid>\n\n                <Dialog open={state.openNewTemplateDialog} onClose={handleCloseNewTemplateDialog} maxWidth=\"xs\" fullWidth>\n                    <DialogTitle>\n                        {state.isNewTemplate ? \"Crea nuovo\" : \"Crea copia\"}\n                    </DialogTitle>\n                    <DialogContent dividers>\n                        <TextField\n                            id=\"new-np-name\"\n                            name=\"new_name_template\"\n                            label=\"Nome piano nutrizionale\"\n                            value={state.new_name_template}\n                            onChange={({ target }) => setState(s => ({ ...s, [target.name]: target.value }))}\n                            type=\"text\"\n                            fullWidth\n                            variant=\"outlined\"\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleCloseNewTemplateDialog} color=\"secondary\">\n                            Annulla\n                        </Button>\n                        <Button onClick={async () => {\n                            // 1. create new doc ref\n                            // 2. copy the current nutritional plan\n                            // 3. fix the list names\n\n                            setState((s) => ({ ...s, backdrop: true, openNewTemplateDialog: false }))\n                            const { rows, new_name_template, isNewTemplate, emptyPlan } = state;\n                            const newDoc = newDocRef(\"templates_nutritional_plan\");\n\n                            let newRows = null;\n\n                            if (isNewTemplate) {\n                                newRows = ({\n                                    ...emptyPlan,\n                                    uid: newDoc.id,\n                                    name: new_name_template,\n                                    createdAt: Timestamp.now(),\n                                    description: \"\",\n                                });\n                            } else {\n                                newRows = ({\n                                    ...rows,\n                                    uid: newDoc.id,\n                                    name: new_name_template,\n                                    createdAt: Timestamp.now(),\n                                    description: \"\",\n                                });\n                            }\n\n                            try {\n\n                                await createNutritionalPlanTemplate(newDoc, newRows);\n\n                            } catch (error) {\n                                console.error(error);\n                            }\n\n                            setState((s) => ({ ...s, backdrop: false, nextUpdate: s.nextUpdate + 1 }))\n\n                        }}\n                            color=\"primary\"\n                            disabled={state.new_name_template.length === 0}\n                        >\n                            Crea\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n                <Grid item xs={12}>\n\n                    <Paper sx={{ width: '100%', mb: 2 }} elevation={3}>\n\n                        <TableContainer>\n                            <Table aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow className={classes.headerTable}>\n                                        <StyledTableCell>{strings.meals.meals}</StyledTableCell>\n                                        {fullDays.map(({ id }, _) => (\n                                            <StyledTableCell\n                                                key={id}\n                                                align=\"left\"\n                                            >\n                                                {strings.days[id]}\n                                            </StyledTableCell>\n                                        ))}\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {meals.map(({ id }, _) =>\n                                        <StyledTableRow key={id}>\n                                            <TableCell style={{ fontWeight: 'bold' }} >\n                                                {strings.meals[id]}\n                                            </TableCell>\n                                            {fullDays.map((day) => {\n                                                // console.debug(day.id);\n                                                return (\n                                                    <TableCell key={day.id} padding=\"none\">\n                                                        <ol key={day.id}>\n                                                            {(state.rows[day.id][id]?.map(({ food, quantity }, _) => {\n                                                                if (typeof food === \"string\" && food.length > 0)\n                                                                    return (<li key={food}>{(`${food} (${quantity}g)`)}</li>)\n                                                                return null;\n                                                            }))\n                                                                // ?.join(',')\n                                                            }\n                                                        </ol>\n                                                    </TableCell>)\n                                            }\n                                            )}\n                                        </StyledTableRow>\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        {/* <Toolbar>\n                            <ButtonGroup size=\"small\" variant=\"outlined\">\n                                <Button color=\"primary\" startIcon={<CreateIcon />} onClick={handleClickOpen}>Modifica</Button>\n                                <Button color=\"secondary\" startIcon={<SaveIcon />} disabled>Salva</Button>\n                            </ButtonGroup>\n                        </Toolbar> */}\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container >\n    );\n\n}\n\nfunction ConfirmationDialog(props) {\n    const { onClose, open, ...other } = props;\n\n    const handleCancel = () => {\n        onClose();\n    };\n\n    const handleOk = ({ target }) => {\n        onClose(target.id);\n    };\n\n\n    return (\n        <Dialog\n            maxWidth=\"xs\"\n            aria-labelledby=\"confirmation-dialog-title\"\n            open={open}\n            {...other}\n        >\n            <DialogTitle id=\"confirmation-dialog-title\">Attenzione</DialogTitle>\n            <DialogContent dividers>\n                <Typography variant=\"body1\" color=\"primary\">Conferma prima di eliminare tutto.</Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleCancel} color=\"secondary\">\n                    Annulla\n                </Button>\n                <Button id=\"confirm\" onClick={handleOk} color=\"primary\">\n                    Conferma\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmationDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n};","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { IconButton, TablePagination } from '@material-ui/core';\nimport CreateIcon from '@material-ui/icons/Create';\nimport strings from '../Language';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    table: {\n        minWidth: 650,\n    },\n    container: {\n        maxHeight: 640,\n    },\n});\n\nexport default function DenseTable({ foods, handleModifyDialog }) {\n    const classes = useStyles();\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <Paper className={classes.root}>\n            <TableContainer className={classes.container}>\n                <Table size=\"small\" aria-label=\"foods table\" stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>{strings.pageTitles.foods}</TableCell>\n                            <TableCell align=\"right\">{strings.nutrients.calcium}</TableCell>\n                            <TableCell align=\"right\">{strings.nutrients.fats}</TableCell>\n                            <TableCell align=\"right\">{strings.nutrients.carbs}</TableCell>\n                            <TableCell align=\"right\">{strings.nutrients.chol}</TableCell>\n                            <TableCell align=\"right\">{strings.nutrients.prots}</TableCell>\n                            <TableCell align=\"right\">{strings.nutrients.energy}</TableCell>\n                            <TableCell align=\"right\"></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {foods\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, i) => (\n                                <TableRow key={row.uid}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {`${i + 1 + page * rowsPerPage}. ${row.name}`}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{row.calcium}</TableCell>\n                                    <TableCell align=\"right\">{row.fats}</TableCell>\n                                    <TableCell align=\"right\">{row.carbs}</TableCell>\n                                    <TableCell align=\"right\">{row.chol}</TableCell>\n                                    <TableCell align=\"right\">{row.proteins}</TableCell>\n                                    <TableCell align=\"right\">{row.energy}</TableCell>\n                                    <TableCell align=\"right\">\n                                        <IconButton onClick={() => handleModifyDialog(row.id)} size=\"small\">\n                                            <CreateIcon fontSize=\"small\" />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 100]}\n                component=\"div\"\n                count={foods.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </Paper>\n    );\n}\n\n\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport {\n    Container,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Grid,\n    TextField,\n    Button,\n    Typography,\n    IconButton,\n    ButtonGroup,\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport strings from '../../components/Language';\nimport DenseTable from '../../components/Foods/index';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: 0,\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    }\n}));\n\nfunction ModifyDialogFood(props) {\n\n    const { inputMeal, handleChangeValues, open, onClose, ...other } = props;\n\n    const classes = useStyles();\n\n    const [meal, setMeal] = React.useState({\n        // calcium: inputMeal.calcium,\n        // carbs: inputMeal.carbs,\n        // chol: inputMeal.chol,\n        // energy: inputMeal.energy,\n        // fats: inputMeal.fats,\n        // proteins: inputMeal.proteins,\n        // name: inputMeal.name,\n        // id: inputMeal.id,\n        calcium: 0,\n        carbs: 0,\n        chol: 0,\n        energy: 0,\n        fats: 0,\n        proteins: 0,\n        name: \"\",\n        id: \"\",\n        uid: \"\",\n    });\n\n    React.useEffect(() => {\n\n        if (open) {\n            setMeal(() => ({\n                calcium: inputMeal.calcium,\n                carbs: inputMeal.carbs,\n                chol: inputMeal.chol,\n                energy: inputMeal.energy,\n                fats: inputMeal.fats,\n                proteins: inputMeal.proteins,\n                name: inputMeal.name,\n                id: inputMeal.id,\n                uid: inputMeal.uid,\n            }))\n\n            // const { uid } = inputMeal;\n\n            // if (typeof uid !== 'undefined')\n            //     fetchData(inputMeal.uid);\n        }\n    }, [open, inputMeal,]);\n\n    const handleChange = ({ target }) => {\n        setMeal(prop => ({ ...prop, [target.name]: target.value }));\n    }\n\n    return (\n        <Dialog maxWidth=\"xs\" fullWidth open={open} scroll=\"paper\" {...other}>\n            <DialogTitle className={classes.root}>\n                <Typography variant=\"button\" color=\"textPrimary\">Modifica pasto alimentare</Typography>\n                <IconButton className={classes.closeButton} onClick={() => onClose()}>\n                    <CloseIcon />\n                </IconButton>\n            </DialogTitle>\n            <DialogContent>\n                <TextField\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    size=\"small\"\n                    margin=\"dense\"\n                    label=\"Nome\"\n                    fullWidth\n                    variant=\"outlined\"\n                    value={meal.name}\n                    onChange={handleChange}\n                />\n                <TextField\n                    id=\"calcium\"\n                    name=\"calcium\"\n                    type=\"number\"\n                    inputProps={{ step: '0.01' }}\n                    size=\"small\"\n                    margin=\"dense\"\n                    label={strings.nutrients.calcium}\n                    fullWidth\n                    variant=\"outlined\"\n                    value={meal.calcium}\n                    onChange={handleChange}\n                />\n                <TextField\n                    id=\"carbs\"\n                    name=\"carbs\"\n                    type=\"number\"\n                    inputProps={{ step: '0.01' }}\n                    size=\"small\"\n                    margin=\"dense\"\n                    label={strings.nutrients.carbs}\n                    fullWidth\n                    variant=\"outlined\"\n                    value={meal.carbs}\n                    onChange={handleChange}\n                />\n                <TextField\n                    id=\"chol\"\n                    name=\"chol\"\n                    type=\"number\"\n                    inputProps={{ step: '0.01' }}\n                    size=\"small\"\n                    margin=\"dense\"\n                    label={strings.nutrients.chol}\n                    fullWidth\n                    variant=\"outlined\"\n                    value={meal.chol}\n                    onChange={handleChange}\n                />\n                <TextField\n                    id=\"energy\"\n                    name=\"energy\"\n                    type=\"number\"\n                    inputProps={{ step: '0.01' }}\n                    size=\"small\"\n                    margin=\"dense\"\n                    label={strings.nutrients.energy}\n                    fullWidth\n                    variant=\"outlined\"\n                    value={meal.energy}\n                    onChange={handleChange}\n                />\n                <TextField\n                    id=\"fats\"\n                    name=\"fats\"\n                    type=\"number\"\n                    inputProps={{ step: '0.01' }}\n                    size=\"small\"\n                    margin=\"dense\"\n                    label={strings.nutrients.fats}\n                    fullWidth\n                    variant=\"outlined\"\n                    value={meal.fats}\n                    onChange={handleChange}\n                />\n                <TextField\n                    id=\"proteins\"\n                    name=\"proteins\"\n                    type=\"number\"\n                    inputProps={{ step: '0.01' }}\n                    size=\"small\"\n                    margin=\"dense\"\n                    label={strings.nutrients.prots}\n                    fullWidth\n                    variant=\"outlined\"\n                    value={meal.proteins}\n                    onChange={handleChange}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"text\" color=\"secondary\" onClick={() => onClose()}>\n                    {\"Annulla\"}\n                </Button>\n                <Button color=\"primary\" variant=\"contained\" onClick={() => onClose(meal)}>\n                    {\"Conferma\"}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default function Foods(props) {\n\n    const {\n        getBackendFoods,\n        updateFood,\n        getFoodsAfter,\n        getFoodsBefore,\n        getFoodsWithLimit,\n        searchFoodByName,\n    } = useAuth();\n    const getFoods = useCallback(() => getBackendFoods(), [getBackendFoods]);\n\n    const [state, setState] = useState({\n        foods: [],\n        filteredFood: [],\n        /*selectedFood: {\n            calcium: 0,\n            carbs: 0,\n            chol: 0,\n            energy: 0,\n            fats: 0,\n            proteins: 0,\n            name: \"\",\n        },*/\n        selectedFood: {},\n        open: false,\n        docs: [],\n        searchFood: \"\",\n    })\n\n    const isMountedRef = useRef(null);\n\n    useEffect(() => {\n        isMountedRef.current = true;\n        const fetchData = async () => {\n\n            try {\n\n                // const { data: docs } = await getFoods();\n                const result = await getFoodsWithLimit(25);\n\n                if (!result.empty) {\n                    let docs = result.docs.map(doc => ({ ...doc.data(), uid: doc.id, }))\n                    setState((state) => {\n                        return ({\n                            ...state,\n                            foods: docs,\n                            filteredFood: docs,\n                            docs: result.docs,\n                        })\n                    });\n                }\n\n            } catch (err) {\n                console.error(err);\n            }\n\n        }\n\n        fetchData();\n\n        return () => isMountedRef.current = false\n    }, [getFoods]);\n\n    const handleSearchFood = ({ target }) => {\n\n        let text = target.value;\n\n        setState((state) => {\n\n            if (text === undefined || text.length === 0) {\n                // replace as original\n                return ({ ...state, filteredFood: state.foods, });\n            }\n\n            const { foods } = state;\n\n            let searchText = text.trim().toLowerCase();\n\n            const filtered = foods.filter(({ name }) => name.trim().toLowerCase().includes(searchText));\n\n            return ({ ...state, foods: foods, filteredFood: filtered, [target.name]: text });\n\n        });\n\n    }\n\n    /*React.useEffect(() => {\n        if (!open) {\n            // if dialog is closed open it\n            setState(s => ({ ...s, open: true }))\n        }\n    }, [state.selectedFood]);*/\n\n    const handleModifyDialog = (id) => {\n        setState((state) => {\n            const { foods } = state;\n            let food = foods.find(food => food.id === id);\n            //console.debug(food.uid);\n            return ({ ...state, selectedFood: food, open: true })\n        });\n    }\n\n    const handleClose = async (updatedFood) => {\n        if (updatedFood) {\n\n            const { foods } = state;\n            const { id } = updatedFood;\n            let newUpdatedFood = {};\n\n            /*let food_to_update = foods.find(food => food.id === id && food.uid == updatedFood.uid);\n\n            if(food_to_update !== undefined){\n                newUpdatedFood = {...food_to_update, ... updateFood}\n            }*/\n\n            let updatedFoods = foods.map(food => {\n                if (food.id === id) {\n                    newUpdatedFood = { ...food, ...updatedFood };\n                    // console.debug(newUpdatedFood)\n                    return newUpdatedFood;\n                } else {\n                    return food;\n                }\n                //return food.id === id ? ({ ...food, ...meal }) : food;\n            });\n\n            try {\n\n                let parsedFood = {\n                    calcium: parseFloat(newUpdatedFood.calcium),\n                    chol: parseFloat(newUpdatedFood.chol),\n                    carbs: parseFloat(newUpdatedFood.carbs),\n                    energy: parseFloat(newUpdatedFood.energy),\n                    fats: parseFloat(newUpdatedFood.fats),\n                    proteins: parseFloat(newUpdatedFood.proteins),\n                    name: newUpdatedFood.name,\n                    id: newUpdatedFood.id,\n                }\n\n                // console.debug(parsedFood);\n\n                await updateFood(newUpdatedFood.uid, parsedFood);\n\n                setState(state => {\n\n                    return ({\n                        ...state,\n                        foods: updatedFoods,\n                        filteredFood: updatedFoods,\n                        open: false,\n                        selectedFood: newUpdatedFood,\n                    });\n\n                });\n\n            } catch (err) {\n                console.error(err);\n            }\n\n        } else {\n            setState(s => ({ ...s, open: false }));\n        }\n    }\n\n    const fetchNextItems = async () => {\n        try {\n\n            const { docs } = state;\n\n            let lastFood = docs[docs.length - 1];\n\n            let result = await getFoodsAfter(25, lastFood);\n\n            if (!result.empty) {\n                let docs = result.docs.map(doc => ({ ...doc.data(), uid: doc.id }));\n                setState(state => ({ ...state, foods: docs, filteredFood: docs, docs: result.docs, }))\n            }\n\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const fetchPreviousItems = async () => {\n        try {\n\n            const { docs } = state;\n\n            let firstFood = docs[0];\n\n            let result = await getFoodsBefore(25, firstFood);\n\n            if (!result.empty) {\n                let docs = result.docs.map(doc => ({ ...doc.data(), uid: doc.id }));\n                setState(state => ({ ...state, foods: docs, filteredFood: docs, docs: result.docs, }));\n            }\n\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const handleSearchRemote = async () => {\n        const { searchFood } = state;\n        try {\n            let result = await searchFoodByName(searchFood);\n\n            if (!result.empty) {\n                let docs = result.docs.map(doc => ({ ...doc.data(), uid: doc.id }));\n                setState(state => ({ ...state, foods: docs, filteredFood: docs, searchFood: \"\" }))\n            }\n        } catch (err) {\n            console.error();\n        }\n    }\n\n    //const handleChangeValues = (value) => console.debug(value);\n\n    const { filteredFood, open } = state;\n\n    return (\n        <>\n            <ModifyDialogFood\n                inputMeal={state.selectedFood}\n                open={open}\n                onClose={handleClose}\n            //handleChangeValues={handleChangeValues}\n            />\n            <Container maxWidth=\"lg\">\n                <Grid container spacing={1}>\n                    <Grid item xs={9}>\n                        <TextField fullWidth\n                            id=\"search-food\"\n                            name=\"searchFood\"\n                            label=\"Nome pasto\"\n                            onChange={handleSearchFood}\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            size='small'\n                            margin='none'\n                            helperText=\"Cerca pasto per nome\"\n                        />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Button fullWidth onClick={handleSearchRemote} variant=\"outlined\">\n                            Search\n                        </Button>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DenseTable foods={filteredFood} handleModifyDialog={handleModifyDialog} />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <ButtonGroup variant='contained' color=\"primary\">\n                            <Button onClick={fetchPreviousItems}>\n                                previous\n                            </Button>\n                            <Button onClick={fetchNextItems}>\n                                next\n                            </Button>\n                        </ButtonGroup>\n\n                    </Grid>\n                </Grid>\n            </Container>\n        </>\n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { TablePagination } from '@material-ui/core'\nimport strings from '../Language';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    table: {\n        minWidth: 650,\n    },\n    container: {\n        maxHeight: 640,\n    },\n});\n\nexport default function DenseTable({ workouts }) {\n    const classes = useStyles();\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    return (\n        <Paper className={classes.root}>\n            <TableContainer className={classes.container}>\n                <Table size=\"small\" aria-label=\"workouts table\" stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>{strings.pageTitles.workouts}</TableCell>\n                            <TableCell align=\"right\">{\"MET\"}</TableCell>\n                            <TableCell align=\"right\">{\"ID\"}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {workouts\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, i) => (\n                                <TableRow key={`${row.uid}`} hover>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {`${i + 1 + page * rowsPerPage}. ${row.name}`}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{row['MET']}</TableCell>\n                                    <TableCell align=\"right\">{row.id}</TableCell>\n\n                                </TableRow>\n                            ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 100]}\n                component=\"div\"\n                count={workouts.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </Paper>\n    );\n}\n\n\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { FormControl, InputLabel, Select, MenuItem, FormGroup, } from '@material-ui/core';\nimport PropTypes from 'prop-types'\nimport strings from '../Language/';\n\n\n/**\n * @description Add patient personal data step.\n * @version 1.0.2\n * @name PersonalData\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @param {*} props \n * @returns \n */\nfunction PersonalData(props) {\n    const {\n        handleGenderChange,\n        handleTextFieldChange,\n        handlePregnantChange,\n        gender,\n        lastName,\n        firstName,\n        dateOfBirth,\n        isPregnant,\n    } = props;\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom>\n                Dati anagrafici\n            </Typography>\n            <Grid container spacing={3}>\n                <Grid item xs={12} sm={6}>\n                    <TextField\n                        required\n                        id=\"firstName\"\n                        name=\"firstName\"\n                        label={strings.patient.first_name}\n                        fullWidth\n                        autoComplete=\"given-name\"\n                        value={firstName}\n                        type=\"text\"\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField\n                        required\n                        id=\"lastName\"\n                        name=\"lastName\"\n                        label={strings.patient.last_name}\n                        fullWidth\n                        autoComplete=\"family-name\"\n                        value={lastName}\n                        type=\"text\"\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth variant=\"outlined\">\n                        <InputLabel id=\"select-gender-label\">\n                            {strings.patient.gender}\n                        </InputLabel>\n                        <Select\n                            fullWidth\n                            required\n                            labelId=\"select-gender-label\"\n                            id=\"select-gender\"\n                            inputProps={{ name: 'gender' }}\n                            value={gender}\n                            onChange={handleGenderChange}\n                            variant=\"outlined\"\n                            label={strings.patient.gender}\n                        >\n                            <MenuItem value={\"\"}>-</MenuItem>\n                            <MenuItem value={\"male\"}> {strings.general.male}\n                            </MenuItem>\n                            <MenuItem value={\"female\"}> {strings.general.female}\n                            </MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <TextField\n                        InputLabelProps={{ shrink: true }}\n                        fullWidth\n                        required\n                        name=\"dateOfBirth\"\n                        type=\"date\"\n                        label={strings.patient.dateOfBirth}\n                        value={dateOfBirth}\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                        helperText=\"es. 01/01/1999\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <FormGroup row>\n                        <FormControlLabel\n                            disabled={gender !== 'female'}\n                            label=\"Incinta\"\n                            control={\n                                <Checkbox\n                                    checked={isPregnant}\n                                    onChange={handlePregnantChange}\n                                    name=\"isPregnant\"\n                                    color=\"secondary\"\n                                />\n                            }\n                        />\n                    </FormGroup>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nPersonalData.propTypes = {\n    gender: PropTypes.oneOf(['male', 'female', '']),\n    lastName: PropTypes.string.isRequired,\n    firstName: PropTypes.string.isRequired,\n    handleTextFieldChange: PropTypes.func.isRequired,\n    handleGenderChange: PropTypes.func.isRequired,\n    handlePregnantChange: PropTypes.func.isRequired,\n}\n\nPersonalData.defaultProps = {\n    pageName: strings.visit.steps.data_patient,\n}\n\nexport default PersonalData;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types'\nimport { FormControlLabel, Checkbox, } from '@material-ui/core'\n\n/**\n * @description Add other patient details step.\n * @version 1.0.1\n * @name OtherDetails\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @param {*} props \n * @returns \n */\nfunction OtherDetails(props) {\n    const {\n        handleTextFieldChange,\n        height,\n        weight,\n        therapyStartDate,\n        therapyEndDate,\n        handleGroupChange,\n        controlGroup,\n    } = props;\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom>\n                Altri dettagli\n            </Typography>\n            <Grid container spacing={3}>\n\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        // margin=\"dense\"\n                        fullWidth\n                        required\n                        name=\"height\"\n                        type=\"number\"\n                        label=\"Altezza\"\n                        helperText=\"cm\"\n                        value={height}\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                {/* <Grid item xs={12} md={6}>\n                    <TextField required id=\"expDate\" label=\"Expiry date\" fullWidth autoComplete=\"cc-exp\" />\n                </Grid> */}\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        //margin=\"dense\"\n                        fullWidth\n                        required\n                        name=\"weight\"\n                        type=\"number\"\n                        label=\"Peso\"\n                        helperText=\"kg\"\n                        value={weight}\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        InputLabelProps={{ shrink: true }}\n                        fullWidth\n                        required\n                        name=\"therapyStartDate\"\n                        type=\"date\"\n                        label=\"Data inizio terapia\"\n                        value={therapyStartDate}\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        InputLabelProps={{ shrink: true }}\n                        fullWidth\n                        name=\"therapyEndDate\"\n                        type=\"date\"\n                        label=\"Data fine terapia\"\n                        value={therapyEndDate}\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <FormControlLabel\n                        control={<Checkbox color=\"primary\" name=\"controlGroup\" checked={controlGroup} onChange={handleGroupChange} />}\n                        label=\"Gruppo di Controllo\"\n                    />\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nOtherDetails.propTypes = {\n    handleTextFieldChange: PropTypes.func.isRequired,\n    height: PropTypes.string.isRequired,\n    weight: PropTypes.string.isRequired,\n    therapyStartDate: PropTypes.string.isRequired,\n    therapyEndDate: PropTypes.string.isRequired\n}\n\nexport default OtherDetails;","import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport {\n    TextField,\n    IconButton,\n    InputAdornment,\n} from \"@material-ui/core\";\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport PropTypes from 'prop-types';\nimport strings from '../Language/';\n\n/**\n * @description Create patient account step.\n * @version 1.0.1\n * @name Account\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @param {string} email Patient email address.\n * @param {string} password Patient password account.\n * @param {function} handleTextFieldChange Handle text field changes function.\n */\nfunction Account(props) {\n    const { email, password, handleTextFieldChange, phoneNumber } = props;\n\n    const [isPasswordShown, setIsPasswordShown] = useState(false);\n\n    const handleShowPassword = () => {\n        setIsPasswordShown((isPasswordShown) => !isPasswordShown);\n    }\n\n    const handleMouseDownPassword = (e) => {\n        e.preventDefault();\n    }\n\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom>\n                {strings.patient.patient_account}\n            </Typography>\n\n            <Grid container spacing={3} direction=\"row\">\n                <Grid item xs>\n                    <TextField\n                        fullWidth\n                        // required\n                        name=\"email\"\n                        // type=\"email\"\n                        label={strings.patient.email}\n                        value={email}\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid item xs>\n                    <TextField\n                        fullWidth\n                        // required\n                        name=\"password\"\n                        type={isPasswordShown ? \"text\" : \"password\"}\n                        id=\"patient-account-password\"\n                        autoComplete=\"new-password\"\n                        label={strings.account.password}\n                        value={password}\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                        InputProps={{\n                            endAdornment: <InputAdornment position='end'>\n                                <IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleShowPassword}\n                                    onMouseDown={handleMouseDownPassword}\n                                >\n                                    {isPasswordShown ? <Visibility /> : <VisibilityOff />}\n                                </IconButton>\n                            </InputAdornment>\n                        }}\n                    />\n                </Grid>\n                <Grid item xs>\n                    <TextField\n                        fullWidth\n                        // required\n                        type=\"tel\"\n                        name=\"phoneNumber\"\n                        // type=\"password\"\n                        label={\"Cellulare\"}\n                        value={phoneNumber}\n                        onChange={handleTextFieldChange}\n                        variant=\"outlined\"\n                    // helperText=\"000 000 0000\"\n                    />\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nAccount.propTypes = {\n    email: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n    handleTextFieldChange: PropTypes.func.isRequired\n}\n\nexport default Account;","import React from 'react'\nimport {\n    Typography,\n    Grid, List,\n    ListItem,\n    ListItemText,\n    Divider,\n} from \"@material-ui/core\";\nimport { Alert, AlertTitle } from '@material-ui/lab'\nimport strings from '../Language'\n\nexport default function Resume(props) {\n    const {\n        message,\n        error,\n        firstName,\n        lastName,\n        gender,\n        height,\n        weight,\n        email,\n        therapyStartDate,\n        therapyEndDate,\n        dateOfBirth,\n        phoneNumber,\n        isPregnant,\n    } = props;\n\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom color=\"textPrimary\">\n                {strings.visit.steps.data_patient}\n            </Typography>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    {error &&\n                        <Alert severity=\"error\">\n                            <AlertTitle>{error}</AlertTitle>\n                        </Alert>}\n                    {message &&\n                        <Alert severity=\"success\">\n                            <AlertTitle>{message}</AlertTitle>\n                        </Alert>\n                    }\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <List dense>\n                        <ListItem>\n                            <ListItemText secondary={strings.patient.first_name} primary={firstName} />\n                        </ListItem>\n                        <ListItem >\n                            <ListItemText secondary={strings.patient.last_name} primary={lastName} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText secondary={strings.patient.dateOfBirth} primary={dateOfBirth} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText secondary={strings.patient.gender} primary={gender === \"male\" ? strings.general.male : strings.general.female} />\n                        </ListItem>\n                        {isPregnant ? (\n                            <ListItem>\n                                <ListItemText primary={strings.patient.pregnant} />\n                            </ListItem>\n                        ) : (\n                            <ListItem></ListItem>\n                        )}\n                        <Divider />\n                        <ListItem>\n                            <ListItemText secondary={strings.measures.height} primary={`${height} cm`} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText secondary={strings.measures.weight} primary={`${weight} kg`} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText secondary={strings.therapy.start} primary={therapyStartDate} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText secondary={strings.therapy.end} primary={therapyEndDate} />\n                        </ListItem>\n                        <Divider />\n                        <ListItem>\n                            <ListItemText secondary={\"Cellulare\"} primary={phoneNumber} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText secondary={strings.patient.email} primary={email} />\n                        </ListItem>\n                    </List>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n\n    )\n}","import React, { useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Backdrop, CircularProgress } from \"@material-ui/core\"\nimport bcryptjs from \"bcryptjs\"\nimport PersonalData from './PersonalData';\nimport OtherDetails from './OtherDetails';\nimport Account from './Account';\nimport Resume from './Resume';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Timestamp } from 'firebase/firestore'\nimport { Container, Grid } from '@material-ui/core'\nimport strings from '../Language';\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        width: 'auto',\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        // [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n        //     width: 600,\n        //     marginLeft: 'auto',\n        //     marginRight: 'auto',\n        // },\n    },\n    paper: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            marginTop: theme.spacing(6),\n            marginBottom: theme.spacing(6),\n            padding: theme.spacing(3),\n        },\n    },\n    stepper: {\n        padding: theme.spacing(3, 0, 5),\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    button: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\n/**\n * \n * @description Create patient page.\n * @version 1.0.1\n * @name CreatePatient\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * \n */\nfunction CreatePatient() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n\n    const [skipped, setSkipped] = useState(new Set());\n\n    const isStepOptional = (step) => {\n        return step === 1;\n    };\n\n    const isStepSkipped = (step) => {\n        return skipped.has(step);\n    };\n\n    const [state, setState] = React.useState({\n        gender: \"\",\n        lastName: \"\",\n        firstName: \"\",\n        dateOfBirth: \"\",\n        height: \"\",\n        weight: \"\",\n        therapyStartDate: \"\",\n        therapyEndDate: \"\",\n        email: \"\",\n        password: \"\",\n        backdrop: false,\n        isPregnant: false,\n        phoneNumber: \"\",\n        controlGroup: false,\n    });\n\n    const [error, setError] = useState('');\n    const [message, setMessage] = useState('');\n    const isMountedRef = useRef(null);\n    const { createPatient, createPatientGroupControl, } = useAuth();\n\n    const steps = [\n        strings.account.personal_data,\n        strings.patient.patient_account,\n        strings.pageTitles.details_patient,\n    ];\n\n    const handleGenderChange = ({ target }) => {\n        setState(s => ({ ...s, [target.name]: target.value }))\n    }\n\n    const handleTextFieldChange = ({ target }) => {\n        setState(s => ({ ...s, [target.name]: target.value }))\n    }\n\n    const handlePregnantChange = ({ target }) => {\n        setState(s => ({ ...s, [target.name]: target.checked }))\n    }\n\n    /*\n    No more used.\n\n    const getAge = (dateString) => {\n        var today = new Date();\n        var birthDate = new Date(dateString);\n        var age = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n            age--;\n        }\n        return age;\n    }\n    */\n\n    React.useEffect(() => {\n        const handleSave = async () => {\n            const {\n                dateOfBirth,\n                email,\n                password,\n                height,\n                weight,\n                firstName,\n                lastName,\n                gender,\n                therapyEndDate,\n                therapyStartDate,\n                isPregnant,\n                phoneNumber,\n                controlGroup,\n            } = state;\n\n            if (isMountedRef.current) {\n                setError(() => '')\n                setMessage(() => '')\n                setState(s => ({ ...s, backdrop: true }))\n            }\n\n            let patient = {\n                height: parseInt(height),\n                weight: [{ value: parseInt(weight), time: Timestamp.now() }],\n                name: firstName,\n                surname: lastName,\n                gender: gender,\n                dateOfBirth: Timestamp.fromDate(new Date(dateOfBirth)),\n                therapyStartDate: Timestamp.fromDate(new Date(therapyStartDate)),\n                therapyEndDate: Timestamp.fromDate(new Date(therapyEndDate)),\n                isPregnant: isPregnant,\n                phoneNumber: phoneNumber,\n                status: \"green\",\n                controlGroup: controlGroup,\n                email: String(email).trim().toLowerCase(),\n                password: bcryptjs.hashSync(password, bcryptjs.genSaltSync(10)).toString(),\n            }\n\n            try {\n\n                // save patient in control_group_patients collection\n                /*await createPatientGroupControl({\n                    height: parseInt(height),\n                    weight: [{ value: parseInt(weight), time: Timestamp.now() }],\n                    name: firstName,\n                    surname: lastName,\n                    gender: gender,\n                    dateOfBirth: Timestamp.fromDate(new Date(dateOfBirth)),\n                    therapyStartDate: Timestamp.fromDate(new Date(therapyStartDate)),\n                    therapyEndDate: Timestamp.fromDate(new Date(therapyEndDate)),\n                    isPregnant: isPregnant,\n                    phoneNumber: phoneNumber,\n                    status: \"green\",\n                });*/\n\n                // save patient in patients collection\n                await createPatient(patient);\n\n                if (isMountedRef.current) {\n                    setMessage(() => \"Il paziente e' stato correttamente creato.\")\n                    setState((s) => ({ ...s, backdrop: false }))\n                }\n            } catch (error) {\n                console.error(error);\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, backdrop: false }));\n                    setError(() => error.message)\n                }\n            }\n        }\n\n        isMountedRef.current = true;\n        if (activeStep === steps.length) handleSave();\n        return () => (isMountedRef.current = false)\n    }, [activeStep, steps.length,]);\n\n    const handleNext = () => {\n        let newSkipped = skipped;\n        if (isStepSkipped(activeStep)) {\n            newSkipped = new Set(newSkipped.values());\n            newSkipped.delete(activeStep);\n        }\n        setActiveStep((activeStep) => activeStep + 1);\n        setSkipped(newSkipped);\n    };\n\n    const handleBack = () => {\n        setActiveStep((activeStep) => activeStep - 1);\n    };\n\n    const handleSkipe = () => {\n        if (!isStepOptional(activeStep)) {\n            throw new Error(\"You cannot skip a step that is not optional.\");\n        }\n\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        setSkipped(prevSkipped => {\n            let newSkipped = new Set(prevSkipped.values());\n            newSkipped.add(activeStep);\n            return newSkipped;\n        })\n    }\n\n    const handleGroupChange = (e) => {\n        setState(state => ({ ...state, [e.target.name]: e.target.checked }))\n    }\n\n    const getStepContent = (step) => {\n        const {\n            gender,\n            firstName,\n            lastName,\n            height,\n            weight,\n            therapyEndDate,\n            therapyStartDate,\n            email,\n            password,\n            dateOfBirth,\n            isPregnant,\n            phoneNumber,\n            controlGroup,\n        } = state;\n\n        switch (step) {\n            case 0: {\n                return (\n                    <PersonalData\n                        handleTextFieldChange={handleTextFieldChange}\n                        handleGenderChange={handleGenderChange}\n                        handlePregnantChange={handlePregnantChange}\n                        gender={gender}\n                        firstName={firstName}\n                        lastName={lastName}\n                        dateOfBirth={dateOfBirth}\n                        isPregnant={isPregnant}\n                    />\n                );\n            }\n            case 1: {\n                return (\n                    <Account\n                        email={email}\n                        phoneNumber={phoneNumber}\n                        password={password}\n                        handleTextFieldChange={handleTextFieldChange}\n                    />\n                );\n            }\n            case 2: {\n                return (\n                    <OtherDetails\n                        height={height}\n                        weight={weight}\n                        controlGroup={controlGroup}\n                        therapyStartDate={therapyStartDate}\n                        therapyEndDate={therapyEndDate}\n                        handleTextFieldChange={handleTextFieldChange}\n                        handleGroupChange={handleGroupChange}\n                    />\n                );\n            }\n            default:\n                throw new Error('Unknown step');\n        }\n    }\n\n    const { backdrop } = state;\n\n    if (backdrop) {\n        return (\n            <Backdrop open={backdrop} className={classes.backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Container maxWidth=\"md\">\n            <Grid container direction='row' spacing={1} justifyContent=\"flex-start\" alignItems=\"center\">\n                <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n                            {strings.pageTitles.add_patient}\n                        </Typography>\n                        <Stepper activeStep={activeStep} className={classes.stepper}>\n                            {steps.map((label, indexStep) => {\n                                const stepProps = {}\n                                const labelProps = {}\n                                if (isStepOptional(indexStep)) {\n                                    labelProps.optional = <Typography variant='caption'>Opzionale</Typography>;\n                                }\n                                if (isStepSkipped(indexStep)) {\n                                    stepProps.completed = false;\n                                }\n                                return (\n                                    <Step key={label} {...stepProps}>\n                                        <StepLabel {...labelProps}>{label}</StepLabel>\n                                    </Step>\n                                )\n                            })}\n                        </Stepper>\n                        <div id=\"step-wrapper\">\n                            {activeStep === steps.length ? (\n                                <Resume\n                                    firstName={state.firstName}\n                                    lastName={state.lastName}\n                                    gender={state.gender}\n                                    height={state.height}\n                                    weight={state.weight}\n                                    email={state.email}\n                                    therapyStartDate={state.therapyStartDate}\n                                    therapyEndDate={state.therapyEndDate}\n                                    error={error}\n                                    message={message}\n                                    dateOfBirth={state.dateOfBirth}\n                                    phoneNumber={state.phoneNumber}\n                                    isPregnant={state.isPregnant}\n                                />\n                            ) : (\n                                <div id=\"step-content\">\n                                    {getStepContent(activeStep)}\n                                    <div className={classes.buttons} id=\"step-action-buttons\">\n                                        {activeStep !== 0 && (\n                                            <Button onClick={handleBack} className={classes.button}>\n                                                {strings.general.back}\n                                            </Button>\n                                        )}\n                                        {isStepOptional(activeStep) && (\n                                            <Button\n                                                className={classes.button}\n                                                variant='contained'\n                                                color='primary'\n                                                onClick={handleSkipe}>\n                                                Skip\n                                            </Button>\n                                        )}\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={handleNext}\n                                            className={classes.button}\n                                            disabled={!(state.firstName.length &&\n                                                state.lastName.length &&\n                                                state.gender.length &&\n                                                state.dateOfBirth.length)}\n                                        >\n                                            {activeStep === steps.length - 1 ? strings.general.add : strings.general.next}\n                                        </Button>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}\n\nexport default CreatePatient","import React from 'react';\nimport {\n    Backdrop,\n    CircularProgress,\n    List,\n    ListItem,\n    ListItemText,\n    Container,\n    Grid,\n    Paper,\n    Card,\n    CardContent,\n    Typography,\n} from '@material-ui/core';\nimport { useAuth } from '../contexts/AuthContext';\nimport strings from './Language';\nimport { Timestamp } from 'firebase/firestore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Bar } from 'react-chartjs-2'\n\nconst useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    paper: {\n        margin: theme.spacing(3),\n        borderRadius: 24,\n    },\n    card: {\n        minHeight: 160,\n    }\n}))\n\nexport default function PatientStatistics() {\n\n    const [state, setState] = React.useState({\n        patients: [],\n        openBackdrop: false,\n        statistics: {},\n    })\n\n    const { getPatients, currentLanguage, getStatistics, } = useAuth();\n\n    const fetchData = React.useCallback(() => getPatients(), [getPatients]);\n\n    const fetchStatistics = React.useCallback(() => getStatistics(), [getStatistics]);\n\n    const isMountedRef = React.useRef(null);\n    const classes = useStyles();\n\n    React.useEffect(() => {\n\n        const _fetchData = async () => {\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, openBackdrop: true }))\n            }\n            const patients = [];\n            try {\n\n                let snapshot = await fetchData();\n                snapshot.docs.forEach(doc => { patients.push({ ...doc.data(), uid: doc.id }) })\n\n            } catch (e) {\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, openBackdrop: false }))\n                }\n                console.error(e);\n            }\n\n            let statistics = {\n                eldest: [],\n                lowest: [],\n                tallest: [],\n                youngest: [],\n            }\n\n            try {\n\n                const { status, statusText, data } = await fetchStatistics();\n\n                const [{ male }, { female }] = data.eldest;\n\n                console.debug(status, statusText, male, female);\n\n            } catch (error) {\n                console.error(error);\n            }\n\n\n            if (isMountedRef.current)\n                setState(s => ({\n                    ...s,\n                    patients: patients,\n                    openBackdrop: false,\n                    statistics: statistics,\n                }))\n\n        }\n        isMountedRef.current = true;\n        _fetchData();\n        return () => (isMountedRef.current = false)\n    }, [fetchData]);\n\n    const getPatientBirthDates = (patients) => {\n        return patients.filter(({ dateOfBirth }) => dateOfBirth instanceof Timestamp);\n    }\n\n    const getYoungestPatient = (patients) => {\n        let birthDates = getPatientBirthDates(patients);\n        let ordered = birthDates.sort((a, b) => b.dateOfBirth.valueOf() - a.dateOfBirth.valueOf());\n        return ordered[0].dateOfBirth.toDate().toLocaleDateString(currentLanguage);\n    }\n\n    const getOldestPatient = (patients) => {\n        let birthDates = getPatientBirthDates(patients);\n        let ordered = birthDates.sort((a, b) => a.dateOfBirth.valueOf() - b.dateOfBirth.valueOf());\n        return ordered[0].dateOfBirth.toDate().toLocaleDateString(currentLanguage);\n    }\n\n    const { openBackdrop } = state;\n\n    if (openBackdrop) {\n        return (\n            <Backdrop className={classes.backdrop} open={openBackdrop} timeout={1000}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Paper className={classes.paper} elevation={2}>\n            <Container maxWidth=\"md\">\n                <Grid container spacing={3}>\n\n                    <Grid item xs={12}>\n                        <Typography variant='h5' gutterBottom align='center' color='textSecondary'>\n                            Statistiche pazienti\n                        </Typography>\n                    </Grid>\n\n                    <Grid item xs={3}>\n                        <Card className={classes.card}>\n                            <CardContent>\n                                <Typography variant='caption'>\n                                    il paziente piu' vecchio\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n\n\n                    <Grid item xs={3}>\n                        <Card className={classes.card}>\n                            <CardContent>\n                                <Typography variant='caption'>\n                                    il paziente piu' giovane\n                                </Typography>\n                            </CardContent>\n                        </Card>\n\n                    </Grid>\n\n\n                    <Grid item xs={3}>\n\n                        <Card className={classes.card}>\n                            <CardContent>\n                                <Typography variant='caption'>\n                                    il paziente piu' attivo\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n\n                    <Grid item xs={3}>\n\n                        <Card className={classes.card}>\n                            <CardContent>\n                                <Typography variant='caption'>\n                                    il paziente meno attivo\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n\n\n                    <Grid item xs={12}>\n                        <Bar\n                            data={{\n                                labels: [\"massima altezza\", \"minima altezza\",],\n                                datasets: [\n                                    {\n                                        label: \"Donne\",\n                                        data: [5, 3,],\n                                        borderWidth: 1,\n                                        borderColor: `rgba(255, 1, 1, 0.9)`,\n                                        backgroundColor: [`rgba(75, 192, 192, 0.3)`,]\n\n                                    },\n                                    {\n                                        label: \"Uomini\",\n                                        data: [4, 2,],\n                                        borderWidth: 1,\n                                        borderColor: `rgba(255, 1, 1, 0.9)`,\n                                        backgroundColor: [`rgba(153, 102, 255, 0.3)`,]\n                                    },\n                                    // {\n                                    //     label: \"Donne&Uomini\",\n                                    //     data: [4, 2, 7, 3],\n                                    //     borderWidth: [2, 2, 2, 2],\n                                    //     backgroundColor: [`rgba(255, 1, 1, 0.2)`,]\n                                    // }\n                                ]\n                            }}\n                            options={{\n                                responsive: true,\n                                plugins: {\n                                    legend: {\n                                        position: 'bottom',\n                                    },\n                                    title: {\n                                        display: true,\n                                        text: \"Altezza (cm)\",\n                                    },\n                                }\n                            }}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Bar\n                            data={{\n                                labels: [\"giovani\", \"anziani\"],\n                                datasets: [{\n                                    label: \"Donne\",\n                                    data: [8, 4],\n                                    borderWidth: 1,\n                                    borderColor: `rgba(255, 1, 1, 0.9)`,\n                                    backgroundColor: [`rgba(75, 192, 192, 0.3)`,]\n                                }, {\n                                    label: \"Uomini\",\n                                    data: [7, 3],\n                                    borderWidth: 1,\n                                    borderColor: `rgba(255, 1, 1, 0.9)`,\n                                    backgroundColor: [`rgba(153, 102, 255, 0.3)`,]\n                                }]\n                            }}\n                            options={{\n                                responsive: true,\n                                plugins: {\n                                    legend: {\n                                        position: \"bottom\",\n                                    },\n                                    title: {\n                                        display: true,\n                                        text: \"Eta'\",\n                                    },\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Bar\n                            data={{\n                                labels: [\"\"],\n                                datasets: [{\n                                    label: \"Donne\",\n                                    data: [8],\n                                    borderWidth: 1,\n                                    borderColor: `rgba(255, 1, 1, 0.9)`,\n                                    backgroundColor: [`rgba(75, 192, 192, 0.3)`,]\n                                }, {\n                                    label: \"Uomini\",\n                                    data: [3],\n                                    borderWidth: 1,\n                                    borderColor: `rgba(255, 1, 1, 0.9)`,\n                                    backgroundColor: [`rgba(153, 102, 255, 0.3)`,]\n                                }]\n                            }}\n                            options={{\n                                responsive: true,\n                                plugins: {\n                                    legend: {\n                                        position: \"bottom\",\n                                    },\n                                    title: {\n                                        display: true,\n                                        text: \"Peso (kg)\",\n                                    },\n                                },\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            </Container>\n        </Paper>\n    )\n}","import React from 'react';\nimport { Line } from 'react-chartjs-2'\nimport { useAuth } from '../../contexts/AuthContext'\nimport { Container, CircularProgress, Backdrop } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles'\nimport strings from '../../components/Language';\n\nconst useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}));\n\n/**\n * @description Page shows the patient weights in time.\n * @name PatientWeightsGraph\n * @version 1.0.1\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @param {*} props \n * @returns \n */\nexport default function PatientWeightsGraph(props) {\n    const [state, setState] = React.useState({\n        labels: [],\n        data: [],\n        backdropOpen: false,\n    });\n\n    const classes = useStyles();\n    const isMountedRef = React.useRef(null);\n    const { getPatient, currentLanguage } = useAuth();\n\n    const fetchData = React.useCallback((patientId) => getPatient(patientId), [getPatient])\n\n    const { patientId } = props;\n\n    React.useEffect(() => {\n        const _fetchData = async (patientId, currentLanguage) => {\n\n            const labels = [];\n            const data = [];\n\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdropOpen: true }))\n\n            try {\n                const snapshot = await fetchData(patientId);\n\n                if (snapshot.exists)\n                    snapshot.data().weight\n                        .sort((a, b) => a.time.toDate() - b.time.toDate())\n                        .forEach((w) => {\n                            const label = w.time.toDate();\n                            data.push(w.value);\n                            labels.push(label.toLocaleDateString(currentLanguage))\n                            // return ({ time: label, value: w.value });\n                        });\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, labels: labels, data: data, backdropOpen: false }))\n\n            } catch (error) {\n                console.error(error);\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdropOpen: false }))\n            }\n        }\n        isMountedRef.current = true;\n        _fetchData(patientId, currentLanguage);\n        return () => (isMountedRef.current = false)\n    }, [patientId, currentLanguage, fetchData]);\n\n    const { backdropOpen, labels, data, } = state;\n    if (backdropOpen)\n        return (\n            <Backdrop className={classes.backdrop} open={backdropOpen}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n\n    return (\n        <Container maxWidth=\"md\">\n            {\n                data.length ? (\n                    <Line\n                        data={{\n                            labels: labels,\n                            datasets: [{\n                                label: `${strings.measures.weight} (kg)`,\n                                data: data,\n                                backgroundColor: 'rgb(255, 99, 132)',\n                                borderColor: 'rgba(255, 99, 132, 0.2)',\n                                borderWidth: 1\n                            }]\n                        }}\n                    />\n                ) : (<></>)\n            }\n        </Container>\n    )\n}","import React, { useState } from 'react';\nimport { Line, Doughnut } from 'react-chartjs-2'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useAuth } from '../../contexts/AuthContext'\nimport {\n    Container,\n    Select,\n    InputLabel,\n    FormControl,\n    MenuItem,\n    Grid,\n    CircularProgress,\n    Backdrop,\n    TextField,\n    List,\n    ListItem,\n    ListItemText,\n    IconButton,\n} from '@material-ui/core';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport { Timestamp } from 'firebase/firestore'\nimport moment from 'moment'\nimport strings from '../../components/Language';\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}))\n\n\n/**\n * @description Page shows patient nutrients graph wrt nutritional plan.\n * @name PatientNutrientsGraph\n * @version 1.0.1\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n */\nexport default function PatientNutrientsGraph(props) {\n    const [state, setState] = React.useState({\n        labels: [],\n        data_fats: [],\n        data_proteins: [],\n        data_carbs: [],\n        data_sum: [],\n        data: [\n            {\n                label: Timestamp.now(),\n                carbs: 0,\n                fats: 0,\n                prots: 0,\n            },\n        ],\n        //filter: \"month\",\n        filter: \"day\",\n        backdropOpen: false,\n        kcal_today_limit: 841,\n        kcal_actual: 0,\n        kcal_carbs_actual: 0,\n        kcal_proteins_actual: 0,\n        kcal_fats_actual: 0,\n        kcal_carbs_today_limit: 74,\n        kcal_proteins_today_limit: 106,\n        kcal_fats_today_limit: 660,\n        food_entries: [{\n            id: \"\",\n            time: \"\",\n            type: 1,\n            quantity: 1,\n        }],\n        foods: [],\n        group_day: {\n            labels: [],\n            total_kcal: [],\n            kcal_carb: [],\n            kcal_prot: [],\n            kcal_fat: [],\n        },\n        group_month: {\n            labels: [],\n            total_kcal: [],\n            kcal_carb: [],\n            kcal_prot: [],\n            kcal_fat: [],\n        },\n        group_year: {\n            labels: [],\n            total_kcal: [],\n            kcal_carb: [],\n            kcal_prot: [],\n            kcal_fat: [],\n        },\n    });\n\n    const { patientId } = props;\n\n    const isMountedRef = React.useRef(null);\n\n    const {\n        getBackendFoods,\n        getFoodEntries,\n        //getPatientNutritionalPlan,\n        getDailyPatientNutrients,\n        getPatientNutrients,\n        currentLanguage,\n    } = useAuth();\n\n    const groupByYear = (data) => {\n        return data.reduce((acc, item) => {\n            const date = item.label.toDate();\n            const year = moment(date).year();\n            const label = `${year}`;\n            if (!(acc[label])) {\n                acc[label] = [];\n            }\n            acc[label].push(item);\n            return acc;\n        }, {});\n    }\n\n    const groupByMonth = (data) => {\n        return data.reduce((acc, item) => {\n            const date = item.label.toDate();\n            const year = moment(date).year();\n            const month = moment(date).month();\n            const label = `${year}-${month + 1}`\n            if (!(acc[label])) {\n                acc[label] = [];\n            }\n            acc[label].push(item);\n            return acc;\n        }, {});\n    }\n\n    const groupByDay = (data) => {\n        return data.reduce((acc, item) => {\n            const date = item.label.toDate();\n            const day_of_year = moment(date).dayOfYear();\n            const label = `${day_of_year}`;\n\n            if (!(acc[label])) {\n                acc[label] = [];\n            }\n\n            acc[label].push(item);\n\n            return acc;\n\n        }, {});\n    }\n\n    const getAvg = (group) => {\n        let labels = [], _carbs = [], _fats = [], _prots = [];\n\n        Object.keys(group).forEach(year_label => {\n            const data = group[year_label];\n\n            const carbs = [], fats = [], prots = [];\n\n            data.forEach(item => {\n                carbs.push(item.carbs);\n                fats.push(item.fats);\n                prots.push(item.prots);\n            });\n\n            const sum_carbs = carbs.reduce((a, b) => a + b, 0);\n            const avg_carbs = (sum_carbs / carbs.length) || 0;\n\n            const sum_fats = fats.reduce((a, b) => a + b, 0);\n            const avg_fats = (sum_fats / fats.length) || 0;\n\n            const sum_prots = prots.reduce((a, b) => a + b, 0);\n            const avg_prots = (sum_prots / prots.length) || 0;\n\n            labels.push(year_label);\n            _carbs.push(avg_carbs);\n            _fats.push(avg_fats);\n            _prots.push(avg_prots);\n\n        });\n\n        return ({ labels: labels, fats: _fats, carbs: _carbs, prots: _prots });\n    }\n\n    const [currentDate, setCurrentDate] = React.useState(new Date());\n\n    React.useEffect(() => {\n\n        const fetchData = async (currentDate, patientId) => {\n\n            try {\n\n                const offSet = currentDate.getTimezoneOffset();\n\n                let today_date = new Date(currentDate.getTime() - (offSet * 60 * 1000))\n                    .toISOString().split('T')[0];\n\n                const body = {\n                    user_id: patientId,\n                    today_date: today_date,\n                }\n\n                let { data } = await getDailyPatientNutrients(body);\n\n                if (isMountedRef.current)\n                    setState((s) => ({ ...s, ...data }));\n\n\n            } catch (err) {\n                console.error(err);\n            }\n\n        }\n\n        isMountedRef.current = true;\n        //let currentMoment = moment(currentDate);\n        //console.debug(currentMoment);\n\n        if (currentDate !== undefined)\n            fetchData(currentDate, patientId);\n\n        return () => isMountedRef.current = false;\n\n    }, [currentDate, patientId]);\n\n    React.useEffect(() => {\n        const fetchData = async (patientId) => {\n\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, backdropOpen: true }))\n            }\n\n            const data_fats = [], data_proteins = [], data_carbs = [], data_sum = [], labels = [];\n\n            let currentDate = new Date();\n            const offset = currentDate.getTimezoneOffset();\n            currentDate = new Date(currentDate.getTime() - (offset * 60 * 1000))\n                .toISOString().split('T')[0]\n\n            try {\n\n                const [\n                    { data: foods },\n                    snapShotEntries,\n                    { data: nutrients },\n                    //nutritionalPlan, \n                    //patientNutrients\n                ] = await Promise.all([\n                    getBackendFoods(),\n                    getFoodEntries(patientId),\n                    getPatientNutrients(patientId),\n                    //getPatientNutritionalPlan(uid),\n                    /*getDailyPatientNutrients({\n                        user_id: patientId,\n                        today_date: currentDate,\n                    }),*/\n                ]);\n\n                const _data = [];\n\n                snapShotEntries.docs.forEach((doc) => {\n                    let data = doc.data();\n                    let food = foods.find((food) => food.id === data.food_id);\n\n                    if (food !== undefined) {\n\n                        const time = data.time; // Timestamp\n                        //console.debug(doc.id, time.valueOf());\n\n                        labels.push(time.toDate().toLocaleDateString());\n\n                        const grams = data.quantity;\n\n                        const fats = food.fats;\n                        const kcal_fats = fats * 9 * grams / 100;\n                        data_fats.push(kcal_fats);\n\n                        const prots = food.proteins;\n                        const kcal_prots = prots * 4 * grams / 100;\n                        data_proteins.push(kcal_prots);\n\n                        const carbs = food.carbs;\n                        const kcal_carbs = carbs * 4 * grams / 100;\n                        data_carbs.push(kcal_carbs);\n\n                        data_sum.push(kcal_fats + kcal_prots + kcal_carbs);\n\n                        _data.push({\n                            label: time,\n                            fats: kcal_fats,\n                            prots: kcal_prots,\n                            carbs: kcal_carbs,\n                        })\n                    }\n\n                });\n\n                const group_day = {\n                    labels: [],\n                    total_kcal: [],\n                    kcal_carb: [],\n                    kcal_prot: [],\n                    kcal_fat: [],\n                }, group_month = {\n                    labels: [],\n                    total_kcal: [],\n                    kcal_carb: [],\n                    kcal_prot: [],\n                    kcal_fat: [],\n                }, group_year = {\n                    labels: [],\n                    total_kcal: [],\n                    kcal_carb: [],\n                    kcal_prot: [],\n                    kcal_fat: [],\n                };\n\n                Object.keys(nutrients['day']).forEach((day) => {\n\n                    let object_day = nutrients['day'][day];\n\n                    group_day.kcal_carb.push(object_day['kcal_carb']);\n                    group_day.kcal_fat.push(object_day['kcal_fat']);\n                    group_day.kcal_prot.push(object_day['kcal_prot']);\n                    group_day.total_kcal.push(object_day['total_kcal']);\n\n                    group_day.labels.push(day);\n                });\n\n                Object.keys(nutrients['month']).forEach((month) => {\n\n                    let object_month = nutrients['month'][month];\n\n                    group_month.kcal_carb.push(object_month.kcal_carb);\n                    group_month.kcal_fat.push(object_month.kcal_fat);\n                    group_month.kcal_prot.push(object_month.kcal_prot);\n                    group_month.total_kcal.push(object_month.total_kcal);\n\n                    group_month.labels.push(month);\n                });\n\n                Object.keys(nutrients['year']).forEach((year) => {\n                    let object_year = nutrients['year'][year];\n\n                    group_year.kcal_carb.push(object_year.kcal_carb);\n                    group_year.kcal_fat.push(object_year.kcal_fat);\n                    group_year.kcal_prot.push(object_year.kcal_prot);\n                    group_year.total_kcal.push(object_year.total_kcal);\n\n                    group_year.labels.push(year);\n                });\n\n                if (isMountedRef.current) {\n                    setState(s => ({\n                        ...s,\n                        //labels: group_month.labels,\n                        labels: group_day.labels,\n                        //data_carbs: group_month.kcal_carb,\n                        data_carbs: group_day.kcal_carb,\n                        //data_fats: group_month.kcal_fat,\n                        data_fats: group_day.kcal_fat,\n                        //data_proteins: group_month.kcal_prot,\n                        data_proteins: group_day.kcal_prot,\n                        //data_sum: group_month.total_kcal,\n                        data_sum: group_day.total_kcal,\n                        data: _data,\n                        backdropOpen: false,\n                        foods: foods,\n                        group_year: group_year,\n                        group_day: group_day,\n                        group_month: group_month,\n                        //...nutrients,\n                    }))\n                }\n\n            } catch (error) {\n                console.error(error);\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdropOpen: false }))\n            }\n        }\n        isMountedRef.current = true;\n        fetchData(patientId);\n        return () => (isMountedRef.current = false)\n    }, [patientId]);\n\n    const handleChange = ({ target }) => {\n        setState(s => {\n            const name = target.name;\n            const value = target.value;\n            const { data, group_day, group_month, group_year } = s;\n            switch (value) {\n                case 'day':\n                    {\n                        //const n_items = 28;\n\n                        /*const { kcal_carb } = group_day;\n                        let carbs = kcal_carb.slice(kcal_carb.length - n_items);\n\n                        const { kcal_fat } = group_day;\n                        let fats = kcal_fat.slice(kcal_fat.length - n_items);\n\n                        const { kcal_prot } = group_day;\n                        let prots = kcal_prot.slice(kcal_prot.length - n_items);\n\n                        const { labels } = group_day;\n                        let labs = labels.slice(labels.length - n_items);\n\n                        const { total_kcal } = group_day;\n                        let tot_kcal = total_kcal.slice(total_kcal.length - n_items);\n\n                        //const grouped = getAvg(groupByDay(data));\n                        return ({\n                            ...s,\n                            [name]: value,\n                            labels: labs,//grouped.labels,\n                            data_carbs: carbs,//grouped.carbs,\n                            data_fats: fats,//grouped.fats,\n                            data_proteins: prots,//grouped.prots,\n                            data_sum: tot_kcal,\n                        });*/\n                        return ({\n                            ...s,\n                            [name]: value,\n                            data_carbs: group_day.kcal_carb,\n                            data_fats: group_day.kcal_fat,\n                            data_proteins: group_day.kcal_prot,\n                            labels: group_day.labels,\n                            data_sum: group_day.total_kcal,\n                        })\n                    }\n\n                case 'year':\n                    {\n                        //const grouped = getAvg(groupByYear(data));\n                        return ({\n                            ...s,\n                            [name]: value,\n                            labels: group_year.labels, //grouped.labels,\n                            data_carbs: group_year.kcal_carb,//grouped.carbs,\n                            data_fats: group_year.kcal_fat,//grouped.fats,\n                            data_proteins: group_year.kcal_prot,//grouped.prots,\n                            data_sum: group_year.total_kcal,\n                        });\n                    }\n\n                case 'month':\n                    {\n                        //const grouped = getAvg(groupByMonth(data));\n                        return ({\n                            ...s,\n                            [name]: value,\n                            labels: group_month.labels,//grouped.labels,\n                            data_carbs: group_month.kcal_carb,//grouped.carbs,\n                            data_fats: group_month.kcal_fat,//grouped.fats,\n                            data_proteins: group_month.kcal_prot,//grouped.prots,\n                            data_sum: group_month.total_kcal,\n                        });\n                    }\n                default:\n                    return ({\n                        ...s,\n                        [name]: value,\n                        /*labels: data.map((item) => item.label.toDate().toDateString()),\n                        data_carbs: data.map(item => item.carbs),\n                        data_proteins: data.map(item => item.prots),\n                        data_fats: data.map(item => item.fats),*/\n                    });\n            }\n        });\n    }\n\n    const [zoom, setZoom] = useState(false);\n\n    const handleSetZoom = () => setZoom((zoom) => !zoom);\n\n    const classes = useStyles();\n\n    const {\n        backdropOpen,\n        kcal_fats_actual,\n        kcal_carbs_actual,\n        kcal_proteins_actual,\n        kcal_fats_today_limit,\n        kcal_carbs_today_limit,\n        kcal_proteins_today_limit,\n    } = state;\n\n    if (backdropOpen) {\n        return (\n            <Backdrop className={classes.backdrop} open={backdropOpen}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Container maxWidth={zoom ? \"lg\" : \"md\"}>\n            <Grid container direction='row' spacing={2} justifyContent=\"space-between\">\n                <Grid item xs={4}>\n                    <FormControl fullWidth variant='outlined'>\n                        <InputLabel id=\"id-label-select\">\n                            Filtro\n                        </InputLabel>\n                        <Select\n                            labelId='id-label-select'\n                            id='id-select'\n                            label=\"Filtro\"\n                            name='filter'\n                            value={state.filter}\n                            onChange={handleChange}\n                        >\n                            <MenuItem value=\"year\">\n                                {strings.general.year}\n                            </MenuItem>\n                            <MenuItem value=\"month\">\n                                {strings.general.month}\n                            </MenuItem>\n                            <MenuItem value=\"day\">\n                                {strings.general.day}\n                            </MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item>\n                    <IconButton\n                        aria-label=\"set page size\"\n                        onClick={handleSetZoom}\n                    >\n\n                        {zoom ? (\n\n                            <ZoomOutIcon />\n\n                        ) : (\n\n                            <ZoomInIcon />\n\n                        )}\n\n                    </IconButton>\n                </Grid>\n                <Grid item xs={12}>\n                    <Line\n                        data={{\n                            labels: state.labels,\n                            datasets: [{\n                                label: strings.nutrients.carbs,\n                                data: state.data_carbs,\n                                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                                borderColor: 'rgba(75, 192, 192, 1)',\n                                borderWidth: 1\n                            }, {\n                                label: strings.nutrients.prots,\n                                data: state.data_proteins,\n                                backgroundColor: 'rgba(153, 102, 255, 0.2)',\n                                borderColor: 'rgba(153, 102, 255, 1)',\n                                borderWidth: 1\n                            }, {\n                                label: strings.nutrients.fats,\n                                data: state.data_fats,\n                                backgroundColor: 'rgba(255, 159, 64, 0.2)',\n                                borderColor: 'rgba(255, 159, 64, 1)',\n                                borderWidth: 1\n                            }, {\n                                label: \"Tot.\",\n                                data: state.data_sum,\n                                backgroundColor: 'rgba(255, 1, 1, 0.2)',\n                                borderColor: 'rgba(255, 1, 1, 1)',\n                                borderWidth: 1\n                            }]\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <Doughnut\n                        data={{\n                            labels: [\n                                strings.nutrients.fats,\n                                strings.nutrients.prots,\n                                strings.nutrients.carbs,\n                            ],\n                            datasets: [{\n                                label: \"limit\",\n                                data: [\n                                    kcal_fats_today_limit,\n                                    kcal_proteins_today_limit,\n                                    kcal_carbs_today_limit,\n                                ],\n                                backgroundColor: [\n                                    'rgba(255, 159, 64, 0.2)',\n                                    'rgba(153, 102, 255, 0.2)',\n                                    'rgba(75, 192, 192, 0.2)',\n                                ],\n                                borderColor: [\n                                    'rgba(255, 159, 64, 1)',\n                                    'rgba(153, 102, 255, 1)',\n                                    'rgba(75, 192, 192, 1)',\n                                ]\n                            }, {\n                                label: \"actual\",\n                                data: [\n                                    kcal_fats_actual,\n                                    kcal_proteins_actual,\n                                    kcal_carbs_actual,\n                                ],\n                                backgroundColor: [\n                                    'rgba(255, 159, 64, 0.2)',\n                                    'rgba(153, 102, 255, 0.2)',\n                                    'rgba(75, 192, 192, 0.2)',\n                                ],\n                            }]\n                        }}\n                        options={{\n                            plugins: {\n                                legend: {\n                                    display: true,\n                                    labels: {\n                                        usePointStyle: true,\n                                        pointStyle: \"rect\",\n                                        // padding: 6,\n                                        textAlign: \"left\",\n                                    },\n                                    title: {\n                                        display: true,\n                                        text: strings.general.description,\n                                        padding: 1,\n                                    },\n                                    position: \"bottom\",\n                                    align: \"start\",\n                                },\n                                title: {\n                                    text: \"Nutrienti consumati del paziente\",\n                                    display: true,\n                                },\n                                tooltip: {\n                                    callbacks: {\n                                        footer: (tooltipItem) => {\n                                            let { dataIndex, dataset } = tooltipItem[0];\n                                            let { data } = dataset;\n                                            let v = data[dataIndex];\n                                            const s = data.reduce((prev, cur) => prev + cur, 0)\n                                            return parseFloat(v * 100 / s).toFixed(2).concat('%');\n                                        }\n                                    }\n                                }\n                            },\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={6}\n                //style={{ display: 'flex', flexWrap: 'wrap' }}\n                >\n                    <TextField\n                        id='current-date'\n                        label=\"Data\"\n                        type=\"date\"\n                        style={{\n                            marginLeft: '8px',\n                            marginRight: '8px',\n                            width: 200,\n                        }}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        defaultValue={new Date().toISOString().split('T')[0]}\n                        onChange={(event) => {\n                            let date = event.target.valueAsDate;\n                            let date_moment = moment(date);\n                            if (date_moment.isValid())\n                                setCurrentDate(() => date)\n                        }}\n                    />\n                    <List>\n                        {state.food_entries.length ? state.food_entries.map(({ id, type, quantity, time }) => {\n                            const { foods } = state;\n                            const name = foods.find((food) => food.id === type)?.name;\n                            const date = new Date(time).toLocaleString(currentLanguage);\n                            return (\n                                <ListItem key={id} dense divider>\n                                    <ListItemText primary={`${name} - ${quantity}g`} secondary={date} />\n                                </ListItem>\n                            )\n                        }) : null}\n                    </List>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}","import React from 'react';\nimport { Line } from 'react-chartjs-2'\nimport { useAuth } from '../../contexts/AuthContext'\nimport {\n    Container,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    CircularProgress,\n    Backdrop,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles'\nimport strings from '../../components/Language';\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}))\n\n/**\n * @description Page shows patient workouts graph (kcals).\n * @version 1.0.1\n * @name PatientWorkoutsGraph\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n */\nexport default function PatientWorkoutsGraph(props) {\n    const [state, setState] = React.useState({\n        labels: [],\n        data: [],\n        weight: 0,\n        list_patient_workouts: [{ name: \"\", duration: 0, time: \"\", }],\n        backdropOpen: false,\n    });\n    const classes = useStyles();\n\n    const isMountedRef = React.useRef(null);\n\n    const {\n        currentLanguage,\n        getPatientKcals,\n    } = useAuth();\n\n    const fetchData = React.useCallback((patientId) => getPatientKcals(patientId), [getPatientKcals])\n\n    const { patientId } = props;\n\n    React.useEffect(() => {\n        const _fetchData = async (patientId) => {\n\n            if (isMountedRef.current)\n                setState((s) => ({ ...s, backdropOpen: true }))\n\n            try {\n\n                let result = await fetchData(patientId); // getPatientKcals\n\n                let { data, status, statusText } = result;\n\n                if (status === 200) {\n                    console.debug(data.length);\n                }\n\n                let labels = data?.map(({ date }) => date);\n\n                let kcals = data?.map(({ tot_kcal }) => tot_kcal)\n\n                let list_patient_workouts = data?.map((item) => {\n                    if (item.workouts) {\n                        return item;\n                    } else {\n                        // if undefined set empty array\n                        return ({ ...item, workouts: [] })\n                    }\n                })?.map(({ workouts }) => {\n                    if (workouts)\n                        // if not empty array get positional values\n                        return workouts?.map((workout) => ({\n                            name: workout[0], //name - PASSI\n                            time: workout[1], //time\n                            duration: workout[2], //duration\n                            //name: _name,\n                            //time: _time,\n                        }));\n                });\n\n                if (isMountedRef.current)\n                    setState((s) => ({\n                        ...s,\n                        labels: labels,\n                        data: kcals,\n                        list_patient_workouts: list_patient_workouts?.flat() || [],\n                        backdropOpen: false,\n                    }))\n\n            } catch (err) {\n                if (isMountedRef.current)\n                    setState((s) => ({ ...s, backdropOpen: false }))\n                console.error(err);\n            }\n\n        }\n        isMountedRef.current = true;\n        if (patientId !== undefined)\n            _fetchData(patientId);\n        return () => isMountedRef.current = false;\n    }, [patientId, fetchData])\n\n    const { list_patient_workouts, data, labels, backdropOpen } = state;\n    if (backdropOpen) {\n        return (\n            <Backdrop className={classes.backdrop} open={backdropOpen}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Container maxWidth=\"md\">\n            <Grid container justifyContent=\"center\" spacing={2} direction='row'>\n                <Grid item xs={12}>\n                    <Line\n                        data={{\n                            labels: labels,\n                            datasets: [{\n                                label: \"kcal\",\n                                data: data,//.map(item => parseFloat(item * weight).toFixed(2)),\n                                backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                                borderColor: 'rgba(54, 162, 235, 1)',\n                                borderWidth: 1\n                            }]\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <List dense>\n                        {list_patient_workouts.length ? list_patient_workouts.map(({ name, time, duration }, i) => {\n                            const label = name === \"PASSI\" ? \"\" : strings.measures.minutes.toLowerCase();\n                            //console.debug(name, time, duration);\n                            return (\n                                <ListItem key={`entry-key-${i}`} divider={list_patient_workouts.length !== i}>\n                                    <ListItemText primary={`${name} - ${duration} ${label}`} secondary={new Date(time).toLocaleString(currentLanguage)} />\n                                </ListItem>\n                            )\n                        }) : (\n                            <ListItem>\n                                {/*<ListItemText primary={\"no any workout\"} />*/}\n                            </ListItem>\n                        )}\n                    </List>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}","import React from \"react\";\n// import PropTypes from 'prop-types'\nimport {\n    Container,\n    Grid,\n    Tabs,\n    Tab,\n    Box,\n    AppBar,\n    Typography,\n    Paper,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Button,\n} from \"@material-ui/core\";\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport PatientWeightsGraph from \"../views/therapy-status/PatientWeightsGraph\";\nimport PatientNutrientsGraph from \"../views/therapy-status/PatientNutrientsGraph\";\nimport PatientWorkoutsGraph from \"../views/therapy-status/PatientWorkoutsGraph\";\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Line } from 'react-chartjs-2';\nimport { useAuth } from '../contexts/AuthContext'\nimport classNames from \"classnames\";\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport { useParams } from \"react-router-dom\";\nimport strings from \"./Language\";\n\nconst useTabPanelStyles = makeStyles(theme => ({\n    root: {\n        // backgroundColor: `rgb(250,250,250)`,\n        backgroundColor: 'transparent'\n    },\n    fullWidth: {\n        width: `100%`\n    }\n}));\n\nfunction TabPanel(props) {\n    const { children, value, index, vertical, ...other } = props;\n    const classes = useTabPanelStyles();\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`tabpanel-${index}`}\n            aria-labelledby={`tab-${index}`}\n            className={classNames(vertical ? classes.root : '', classes.fullWidth)}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n                // <div className={classes.root}>\n                //     {children}\n                // </div>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    };\n}\n\nconst useVerticalTabsStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        // backgroundColor: theme.palette.background.paper,\n        display: 'flex',\n        height: `100%`,\n    },\n    tabs: {\n        borderRight: `1px solid ${theme.palette.divider}`,\n    },\n}));\n\nconst useFullWidthTabsStyles = makeStyles((theme) => ({\n    root: {\n        // backgroundColor: theme.palette.background.paper,\n        // width: 500,\n        backgroundColor: 'transparent',\n        width: `100%`\n    },\n}));\n\nexport default function VerticalTabs(props) {\n    const classes = useVerticalTabsStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const { patientId } = useParams();\n\n    return (\n        <Paper>\n            <div className={classes.root}>\n                <Tabs\n                    orientation=\"vertical\"\n                    variant=\"scrollable\"\n                    value={value}\n                    onChange={handleChange}\n                    aria-label=\"Vertical tabs example\"\n                    className={classes.tabs}\n                >\n                    <Tab label={strings.general.graphs} {...a11yProps(0)} icon={<ShowChartIcon />} />\n                    <Tab label={strings.general.tables} {...a11yProps(1)} icon={<TableChartIcon />} />\n                </Tabs>\n                <TabPanel value={value} index={0}>\n                    <FullWidthTabs patientId={patientId} {...props} />\n                </TabPanel>\n                <TabPanel value={value} index={1}>\n                    {/* <Calendar /> */}\n                    {/* <PatientWeightsTable patientId={patientId} {...props} /> */}\n                    <Typography>{strings.general.under_construction}</Typography>\n                </TabPanel>\n            </div>\n        </Paper>\n    );\n}\n\nfunction PatientWeightsTable(props) {\n    const [state, setState] = React.useState({\n        weights: [],\n        date: \"\",\n        value: \"\",\n    });\n\n    const isMountedRef = React.useRef(null);\n\n    const { getPatient } = useAuth();\n    const fetchData = React.useCallback((patientId) => getPatient(patientId), [getPatient]);\n\n    const { patientId } = props;\n\n    React.useEffect(() => {\n\n        const _fetchData = async (patientId) => {\n\n            let weights = [];\n\n            try {\n                let result = await fetchData(patientId);\n                if (!result.exists) {\n                    return;\n                }\n                result.data().weight.sort((a, b) => {\n                    return a.time.toDate() - b.time.toDate();\n                }).forEach(w => {\n                    weights.push({\n                        value: w.value,\n                        date: w.time.toDate().toISOString().split('T')[0],\n                    });\n                });\n                setState(s => ({ ...s, weights: weights }));\n            } catch (err) {\n                console.error(err);\n            }\n\n        }\n\n        isMountedRef.current = true;\n\n        _fetchData(patientId);\n\n        return () => isMountedRef.current = false\n    }, [patientId]);\n\n    const { weights } = state;\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container spacing={2}>\n                <Grid item xs={3}>\n                    <FormControl variant=\"outlined\" size=\"small\" fullWidth>\n                        <InputLabel id=\"select-date-label\">Data</InputLabel>\n                        <Select\n                            labelId=\"select-date-label\"\n                            id=\"select-date\"\n                            value={state.date}\n                            label=\"Giorno\"\n                            fullWidth\n                            onChange={e => {\n                                setState(s => {\n                                    const { weights } = s;\n                                    let item = weights.find(item => item.date === e.target.value);\n\n                                    if (item !== undefined) {\n                                        return ({ ...s, date: e.target.value, value: item.value })\n                                    }\n\n                                    return ({ ...s, date: e.target.value })\n                                });\n\n                            }}\n                        >\n                            {state.weights?.length >= 0 ? (\n                                state.weights.map(({ date }, i) => (\n                                    <MenuItem value={date}>{date}</MenuItem>\n                                ))\n                            ) : (\n                                <MenuItem value=\"\"><em>None</em></MenuItem>\n                            )}\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}>\n                    <TextField\n                        id=\"w_value\"\n                        type=\"number\"\n                        value={state.value}\n                        name=\"value\"\n                        onChange={(e) => {\n                            e.persist();\n                            setState(s => ({ ...s, [e.target.name]: e.target.value }));\n                        }}\n                        margin=\"normal\"\n                        label=\"KG\"\n                        variant=\"outlined\"\n\n                        size=\"small\"\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <Button variant=\"outlined\" fullWidth size=\"small\">\n                        Modifica\n                    </Button>\n                </Grid>\n                {weights.map((w, i) => <WeightRow key={`${i}-weight-row`} {...w} />)}\n            </Grid>\n        </Container>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            // width: '25ch',\n        },\n    },\n}));\n\nfunction WeightRow(props) {\n    const { value, date } = props;\n    const [state, setState] = React.useState({\n        value: \"\",\n        date: \"\",\n    });\n    const classes = useStyles();\n    React.useEffect(() => {\n\n        setState(s => ({ ...s, value: value, date: date }))\n\n    }, [value, date]);\n\n    return (\n        <Grid item xs={12} className={classes.root}>\n            <TextField\n                id=\"w_value\"\n                type=\"number\"\n                value={state.value}\n                name=\"value\"\n                onChange={(e) => {\n                    e.persist();\n                    setState(s => ({ ...s, [e.target.name]: e.target.value }));\n                }}\n                margin=\"normal\"\n                label=\"KG\"\n                variant=\"outlined\"\n            />\n            <TextField\n                id=\"w_date\"\n                type=\"date\"\n                value={state.date}\n                name=\"date\"\n                onChange={(e) => {\n                    e.persist();\n                    setState(s => ({ ...s, [e.target.name]: e.target.value }));\n                }}\n                margin=\"normal\"\n                label=\"Giorno\"\n                variant=\"outlined\"\n            />\n        </Grid>\n    )\n}\n\nfunction FullWidthTabs(props) {\n    const classes = useFullWidthTabsStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" color=\"default\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                    centered\n                    aria-label=\"full width tabs example\"\n                >\n                    <Tab label={strings.measures.weight} {...a11yProps(0)} />\n                    <Tab label={strings.visit.nutrients} {...a11yProps(1)} />\n                    <Tab label={strings.pageTitles.workouts} {...a11yProps(2)} />\n                </Tabs>\n            </AppBar>\n\n            <TabPanel value={value} index={0} vertical>\n                <PatientWeightsGraph {...props} />\n            </TabPanel>\n            <TabPanel value={value} index={1} vertical>\n                <PatientNutrientsGraph {...props} />\n            </TabPanel>\n            <TabPanel value={value} index={2} vertical>\n                <PatientWorkoutsGraph {...props} />\n            </TabPanel>\n\n        </div>\n    );\n}\n\nfunction TherapyStatus(props) {\n    const { location } = props;\n    const uid = location.state?.patient;\n    const [state, setState] = React.useState({\n        labels: [],\n        data: [],\n        patient: {},\n        weights: [],\n        weight: 0,\n        nutrient_labels: [],\n        data_carbs: [],\n        data_proteins: [],\n        data_fats: [],\n        workout_labels: [],\n        energies: []\n    });\n\n    const isMountedRef = React.useRef(null);\n    const { getPatient, getFoodEntries, getFoods, getPatientWorkouts, getWorkouts } = useAuth();\n\n    React.useEffect(() => {\n        isMountedRef.current = true;\n        const fetchPatients = async () => {\n            try {\n                const promises = [];\n                promises.push(getFoods());\n                promises.push(getFoodEntries(uid));\n                promises.push(getPatientWorkouts(uid));\n                promises.push(getWorkouts());\n                const [snap_foods, snap_entries, snap_workout_entries, snap_workouts] = await Promise.all(promises);\n                const workouts = snap_workouts.docs.map(workout => ({ ...workout.data(), uid: workout.id }));\n                // console.debug(workouts);\n                const workout_labels = [];\n                const energies = [];\n                const workout_entries = snap_workout_entries.docs.map(entry => {\n                    const duration = parseFloat(entry.data().duration)\n                    const type = entry.data().type;\n                    const time = entry.data().time.toDate();\n                    workout_labels.push(time.toDateString());\n                    const workout = workouts.find(w => w.id.toString() === type.toString());\n                    // console.debug(workout);\n                    const energy = (duration * workout?.met) / 60;\n                    // console.debug(energy);\n                    energies.push(energy);\n                    return ({ type: type, duration: duration, energy: energy })\n                });\n                // const snapshot = await getFoods();\n                const foods = snap_foods.docs.map(doc => ({ ...doc.data(), id: doc.id }));\n                // console.debug('foods', foods);\n\n                const data_fats = [], data_proteins = [], data_carbs = [], nutrient_labels = [];\n                console.debug('snap entries', snap_entries)\n                const entries = snap_entries.docs.map((doc) => {\n                    const data = doc.data();\n                    const food = foods.find(food => food.id.toString() === data.food_id.toString());\n                    // console.debug('food', i, food);\n                    const time = data.time.toDate();\n                    // console.debug(time);\n                    nutrient_labels.push(time.toDateString());\n                    data_fats.push(food?.fats);\n                    data_proteins.push(food?.proteins);\n                    data_carbs.push(food?.carbs);\n                    return ({\n                        ...data,\n                        uid: doc.id,\n                        time: data.time.toDate(),\n                        // carbs: food?.carbs,\n                        // fats: food?.fats,\n                        // proteins: food?.proteins,\n                        // name: food?.name\n                    });\n                });\n                console.debug('entries', entries);\n                if (isMountedRef.current)\n                    setState((s) => ({\n                        ...s,\n                        entries: entries,\n                        nutrient_labels: nutrient_labels,\n                        data_carbs: data_carbs,\n                        data_fats: data_fats,\n                        data_proteins: data_proteins,\n                        workout_entries: workout_entries,\n                        workouts: workouts,\n                        workout_labels: workout_labels,\n                        energies: energies\n                    }));\n            } catch (err) {\n                console.error(err);\n            }\n\n            try {\n                const doc = await getPatient(uid);\n                const labels = [];\n                const data = [];\n\n                // const data = doc.data();\n                // const uid = doc.id;\n                const patient = {\n                    ...doc.data(),\n                    weights: doc.data().weight,\n                    height: parseInt(doc.data().height)\n                }\n                const weights = patient.weights\n                    .sort((a, b) => a.time.toDate() - b.time.toDate())\n                    .map((w) => {\n                        const label = w.time.toDate();\n                        data.push(w.value);\n                        labels.push(label.toDateString())\n                        return ({ time: label, value: w.value });\n                    });\n                // const weight = weights.reduce((a, b) => {\n                //     return a.time > b.time ? a : b;\n                // })\n\n\n                if (isMountedRef.current)\n                    setState((s) => ({\n                        ...s,\n                        patient: patient,\n                        labels: labels,\n                        data: data,\n                        weights: weights,\n                        weight: weights[0].value\n                    }));\n            } catch (error) {\n                console.error(error.code);\n                console.error(error.message)\n            }\n        }\n        fetchPatients()\n        return () => (isMountedRef.current = false)\n    }, []);\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container justifyContent=\"center\" alignItems=\"center\" direction=\"row\">\n                <Grid item xs={12}>\n\n                    <Line\n                        data={{\n                            labels: state.labels,\n                            datasets: [{\n                                label: \"weights\",\n                                data: state.data,\n                                backgroundColor: 'rgb(255, 99, 132)',\n                                borderColor: 'rgba(255, 99, 132, 0.2)',\n                                borderWidth: 1\n                            }]\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n\n                    <Line\n                        data={{\n                            labels: state.nutrient_labels,\n                            datasets: [{\n                                label: \"carbs\",\n                                data: state.data_carbs,\n                                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                                borderColor: 'rgba(75, 192, 192, 1)',\n                                borderWidth: 1\n                            }, {\n                                label: \"proteins\",\n                                data: state.data_proteins,\n                                backgroundColor: 'rgba(153, 102, 255, 0.2)',\n                                borderColor: 'rgba(153, 102, 255, 1)',\n                                borderWidth: 1\n                            }, {\n                                label: \"fats\",\n                                data: state.data_fats,\n                                backgroundColor: 'rgba(255, 159, 64, 0.2)',\n                                borderColor: 'rgba(255, 159, 64, 1)',\n                                borderWidth: 1\n                            }]\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n\n                    <Line\n                        data={{\n                            labels: state.workout_labels,\n                            datasets: [{\n                                label: \"kcal\",\n                                data: state.energies.map(item => item * state.weight),\n                                backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                                borderColor: 'rgba(54, 162, 235, 1)',\n                                borderWidth: 1\n                            }]\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\n// export default TherapyStatus;","import React from \"react\";\n// import PropTypes from 'prop-types'\nimport { Typography, Container, Grid, Button, TextField, IconButton, Box, } from \"@material-ui/core\";\nimport { Card, CardContent, CardActions, CardHeader, Avatar, Backdrop, CircularProgress } from '@material-ui/core'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport CreateIcon from '@material-ui/icons/Create';\nimport { useAuth } from \"../contexts/AuthContext\";\nimport SendIcon from '@material-ui/icons/Send';\nimport { Timestamp } from 'firebase/firestore/'\nimport { makeStyles } from \"@material-ui/core\";\nimport DoneIcon from '@material-ui/icons/Done';\nimport Chip from '@material-ui/core/Chip';\nimport { useParams } from \"react-router-dom\";\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        color: 'red'\n    },\n    cardActions: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}))\n\nfunction Notifications(props) {\n    const { patientId } = useParams();\n    //patientId = patientId === undefined ? props.location?.state?.patientId : patientId;\n    const token = props.location?.state?.token;\n    const [state, setState] = React.useState({\n        notifications: [],\n        nextFetch: 1,\n        image: \"\",\n        date: new Date(),\n        backdrop: false,\n        filtered: [],\n        filter: \"all\",\n        tokenError: \"\",\n    });\n    const [notification, setNotification] = React.useState({\n        title: \"\",\n        emptyTitle: false,\n        description: \"\",\n        emptyDescription: false,\n    })\n    const {\n        getNotifications,\n        createNotification,\n        getUrlNotificationIcon,\n        sendNotification,\n        updateSeenNotificationStatus,\n    } = useAuth();\n\n    const fetchData = React.useCallback((patientId) => getNotifications(patientId), [getNotifications])\n\n    const handleSubmit = async (event) => {\n        //event.preventDefault();\n\n        // get the data\n\n        const data = new FormData(event.currentTarget);\n        const title = data.get('title').toString();\n        const description = data.get('description').toString();\n\n\n        // check for empty fields\n        if (title.length === 0) {\n            return setNotification(s => ({ ...s, emptyTitle: true }));\n        } else {\n            setNotification(s => ({ ...s, emptyTitle: false }));\n        }\n\n        if (!description.length) {\n            return setNotification(s => ({ ...s, emptyDescription: true }));\n        } else {\n            setNotification(s => ({ ...s, emptyDescription: false }));\n        }\n\n        let body_notification = {\n            title: title,\n            body: description,\n            event_time: Timestamp.now(),\n            category: \"manual\",\n            // image: state.image\n        }\n\n\n\n        createNotification(body_notification, patientId)\n            .then(() => {\n                setState(s => ({ ...s, nextFetch: s.nextFetch + 1, }));\n            })\n            .catch(err => console.error(err));\n\n\n\n        if (token)\n            try {\n                let result = await sendNotification({\n                    \"notification\": {\n                        \"title\": title,\n                        \"body\": description,\n                    },\n                }, token);\n                console.debug(result);\n            } catch (err) {\n                console.error(err);\n            }\n    }\n\n    const handleCreateNotification = async () => {\n        const {\n            title,\n            description,\n        } = notification;\n\n        if (title?.length === 0) {\n            return setNotification(s => ({ ...s, emptyTitle: true }))\n        }\n\n        if (description?.length === 0) {\n            return setNotification(s => ({ ...s, emptyDescription: true }))\n        }\n\n\n        if (token !== undefined && token !== null && token !== \"undefined\" && token !== \"null\") {\n            let device_body_notification = {\n                \"notification\": {\n                    \"title\": title,\n                    \"body\": description,\n                },\n                \"registrationToken\": token,\n            }\n\n            sendNotification(device_body_notification, token)\n                .then((res) => {\n\n\n                    let doc_notification = {\n                        title: title,\n                        body: description,\n                        event_time: Timestamp.now(),\n                        category: \"manual\",\n                    }\n\n\n                    createNotification(doc_notification, patientId)\n                        .then(() => {\n\n                            // clear fields\n                            setNotification(s => ({\n                                ...s,\n                                title: \"\",\n                                description: \"\",\n                                emptyDescription: false,\n                                emptyTitle: false,\n                            }))\n\n                            // request to refetch the list\n                            setState(s => ({\n                                ...s,\n                                nextFetch: s.nextFetch + 1,\n                                tokenError: \"\", // clear error token message\n                            }));\n\n                        })\n                        .catch((err) => {\n                            console.error(err);\n                            setState((s) => ({ ...s, tokenError: err.message }));\n                        });\n                })\n                .catch((err) => {\n                    console.error(err);\n                    setState((s) => ({\n                        ...s,\n                        tokenError: \"not possibile to send notification, check for patient token\",\n                    }));\n                });\n        } else {\n            setState(s => ({ ...s, tokenError: \"no device token is present\" }));\n        }\n\n    }\n\n    const handleFilterChange = (filter) => {\n        switch (filter) {\n            case \"manual\":\n                setState(s => {\n                    const { notifications } = s;\n                    return ({ ...s, filtered: notifications.filter(item => item.category === \"manual\"), filter: \"manual\" })\n                });\n                break;\n            case \"alert\":\n                setState(s => {\n                    const { notifications } = s;\n                    return ({ ...s, filtered: notifications.filter(item => item.category === \"alert\"), filter: \"alert\" })\n                });\n                break;\n            case \"scheduled\":\n                setState((s) => {\n                    const { notifications } = s;\n                    return ({ ...s, filtered: notifications.filter(item => item.category === \"scheduled\"), filter: \"scheduled\" })\n                });\n                break;\n            default:\n                setState(s => ({ ...s, filtered: s.notifications, filter: \"all\" }))\n        }\n    }\n\n    const classes = useStyles()\n    const isMountedRef = React.useRef(null);\n    React.useEffect(() => {\n\n        /*const fetchUrlNotificationIcon = async () => {\n            try {\n                let result = await getUrlNotificationIcon();\n                setState(s => ({ ...s, image: result }))\n                // console.debug(result);\n            } catch (error) {\n                console.error(error);\n            }\n        }*/\n\n        const _fetchData = async (patientId) => {\n\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, backdrop: true }))\n            }\n\n            try {\n\n                let result = await fetchData(patientId);\n\n                //let manual = 0, alert = 0, scheduled = 0, others = 0;\n\n                const notifications = result.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    const event_time_timestamp = data.event_time; // firestore Timestamp\n                    let event_time = Timestamp.fromDate(new Date());\n                    if (event_time_timestamp instanceof Timestamp)\n                        event_time = event_time_timestamp\n                    else {\n                        event_time = Timestamp.fromDate(new Date(event_time_timestamp));\n                    }\n                    /*switch (data.category) {\n                        case \"manual\":\n                            manual += 1;\n                            break;\n                        case \"alert\":\n                            alert += 1;\n                            break;\n                        case \"scheduled\":\n                            scheduled += 1;\n                            break;\n                        default:\n                            others += 1;\n                            break;\n                    }*/\n                    return ({\n                        ...data,\n                        uid: id,\n                        event_time: event_time.toDate().toLocaleString(),\n                    })\n                });//.sort((a, b) => b - a).map(({ event_time, ...rest }) => ({ ...rest, event_time: event_time. }))\n\n                if (isMountedRef.current)\n                    setState(s => {\n                        const { filter } = s;\n                        if (filter !== 'all')\n                            return ({\n                                ...s,\n                                notifications: notifications,\n                                backdrop: false,\n                                filtered: notifications.filter(item => item.category === filter),\n                            })\n                        else\n                            return ({\n                                ...s,\n                                notifications: notifications,\n                                backdrop: false,\n                                filtered: notifications,\n                            })\n                    });\n\n            } catch (error) {\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdrop: false }))\n                console.error(error);\n            }\n\n        }\n        isMountedRef.current = true;\n        _fetchData(patientId);\n        // fetchUrlNotificationIcon();\n        return () => (isMountedRef.current = false)\n    }, [state.nextFetch, patientId, fetchData]);\n\n    const handleNotificationChanges = ({ target }) => setNotification(props => {\n        return ({ ...props, [target.name]: target.value, });\n    })\n\n    const { filtered } = state;\n\n    return (\n        <Container maxWidth=\"md\">\n            <Grid\n                container\n                direction=\"row\"\n                justifyContent=\"space-between\"\n                alignItems=\"flex-start\"\n                spacing={2}\n            >\n                <Grid item xs={6}\n                    style={{\n                        position: 'sticky',\n                        top: '96px',\n                    }}\n                >\n                    <Card>\n                        <CardHeader\n                            avatar={\n                                <Avatar style={{ backgroundColor: 'transparent' }}>\n                                    <CreateIcon style={{ color: 'black' }} />\n                                </Avatar>\n                            }\n                            title={\"Crea una notifica\"}\n                            subheader={\"Invia ora la notifica al paziente\"}\n                        />\n                        <CardContent>\n\n                            <div id=\"alert-messages\">\n                                {state.tokenError.length ? (\n                                    <Alert severity=\"warning\">\n                                        <AlertTitle>{\"Warning\"}</AlertTitle>\n                                        {state.tokenError}\n                                    </Alert>\n\n                                ) : (null)}\n\n                                {notification.emptyTitle || notification.emptyDescription ? (\n                                    <Alert severity=\"warning\">\n                                        <AlertTitle>{\"Warning\"}</AlertTitle>\n                                        {\"fill the required * fields \"}\n                                    </Alert>\n\n                                ) : (null)}\n                            </div>\n\n\n\n                            <TextField\n                                id=\"title\"\n                                name=\"title\"\n                                label=\"Titolo\"\n                                //placeholder=\"Titolo\"\n                                type=\"text\"\n                                error={notification.emptyTitle}\n                                onChange={handleNotificationChanges}\n                                //size=\"small\"\n                                color=\"primary\"\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                fullWidth\n                                required\n                                value={notification.title}\n                            />\n                            <TextField\n                                id=\"body\"\n                                label=\"Messaggio\"\n                                name=\"description\"\n                                //placeholder=\"Messaggio\"\n                                type=\"text\"\n                                error={notification.emptyDescription}\n                                onChange={handleNotificationChanges}\n                                value={notification.description}\n                                required\n                                //size=\"small\"\n                                color=\"primary\"\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                fullWidth\n                                multiline\n                                maxRows={5}\n                                minRows={3}\n                            />\n\n\n                        </CardContent>\n                        <CardActions className={classes.cardActions}\n                        // style={{\n                        //     display: 'flex',\n                        //     justifyContent: 'flex-end',\n                        // }}\n                        >\n                            <Button\n                                endIcon={<SendIcon />}\n                                id=\"create-notification\"\n                                key=\"crate-notification-button\"\n                                variant=\"text\"\n                                color=\"primary\"\n                                //fullWidth \n                                //size=\"small\"\n                                //type=\"submit\"\n                                onClick={handleCreateNotification}\n                            >\n                                Invia\n                            </Button>\n\n                        </CardActions>\n                    </Card>\n                </Grid>\n                <Grid item xs={6}>\n\n                    <div style={{ paddingBottom: 16 }}>\n                        <Chip\n                            id=\"manual-filter\"\n                            label=\"Manual\"\n                            onClick={() => handleFilterChange('manual')}\n                            variant={state.filter === \"manual\" ? \"default\" : \"outlined\"}\n\n                        />\n                        <Chip\n                            id=\"alert-filter\"\n                            label=\"Alert\"\n                            onClick={() => handleFilterChange('alert')}\n                            variant={state.filter === \"alert\" ? \"default\" : \"outlined\"}\n\n                        />\n                        <Chip\n                            id=\"scheduled-filter\"\n                            label=\"Scheduled\"\n                            onClick={() => handleFilterChange('scheduled')}\n                            variant={state.filter === \"scheduled\" ? \"default\" : \"outlined\"}\n\n                        />\n                        <Chip\n                            id=\"all-filter\"\n                            label=\"All\"\n                            onClick={() => handleFilterChange('all')}\n                            variant={state.filter === \"all\" ? \"default\" : \"outlined\"}\n\n                        />\n                    </div>\n                    {filtered.length ? filtered.map((item) => (\n                        <Card key={item.uid} style={item.seen ? { marginBottom: 12 } : { marginBottom: 12, backgroundColor: '#e3e3e3' }}>\n                            <CardHeader\n                                action={\n                                    <IconButton onClick={async () => {\n                                        try {\n                                            await updateSeenNotificationStatus(patientId, item.uid);\n                                            setState(s => ({ ...s, nextFetch: s.nextFetch + 1 }));\n                                        } catch (e) {\n                                            console.error(e);\n                                        }\n                                    }}>\n                                        <DoneIcon />\n                                    </IconButton>\n                                }\n                                avatar={\n                                    <Avatar>\n                                        <NotificationsIcon />\n                                    </Avatar>\n                                }\n                                title={item.title}\n                                subheader={item.event_time}\n                            />\n                            <CardContent>\n                                <Typography variant=\"body2\" component=\"p\" color=\"inherit\">\n                                    {item.body}\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    )) :\n                        <Backdrop open={state.backdrop} className={classes.backdrop}>\n                            <CircularProgress color=\"inherit\" />\n                        </Backdrop>\n                    }\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default Notifications;","import React, { useCallback, useState, useRef, useEffect } from 'react'\nimport clsx from 'clsx'\nimport {\n    Container,\n    Grid,\n    Button,\n    Card,\n    CardHeader,\n    CardActions,\n    IconButton,\n    Collapse,\n    CardContent,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    TextField,\n} from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CreateIcon from '@material-ui/icons/Create';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles'\nimport AddIcon from '@material-ui/icons/Add'\nimport { useParams } from 'react-router-dom'\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Timestamp } from 'firebase/firestore';\n\nconst useCardStyles = makeStyles((theme) => ({\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n}))\n\nfunction NoteCard(props) {\n    const { title, description, time, id, deleteRequest, ...rest } = props;\n    const classes = useCardStyles();\n    const [state, setState] = useState({\n        title: \"\",\n        newTitle: \"\",\n        description: \"\",\n        newDescription: \"\",\n        time: undefined,\n        id: \"\",\n        open: false,\n    });\n\n    const { patientId } = useParams();\n\n    const isMountedRef = useRef(null);\n\n    const { updatePatientNote } = useAuth();\n\n    const modifyPatientNote = useCallback((patientId, noteId, note) => {\n        return updatePatientNote(patientId, noteId, note);\n    }, [updatePatientNote]);\n\n    const handleModifyClick = async () => {\n\n        let note = { title: state.newTitle, description: state.newDescription }\n        try {\n\n            await modifyPatientNote(patientId, state.id, note);\n\n            setState(state => ({ ...state, open: false, ...note }));\n\n\n        } catch (err) {\n            setState(state => ({ ...state, open: false, }));\n            console.error(err);\n        }\n\n    }\n\n    useEffect(() => {\n        isMountedRef.current = true;\n\n        setState(state => ({\n            ...state,\n            title: title,\n            newTitle: title,\n            newDescription: description,\n            description: description,\n            time: time,\n            id: id,\n        }));\n\n        return () => isMountedRef.current = false\n\n    }, [title, description, time, id]);\n\n    const [expanded, setExpanded] = React.useState(true);\n\n    const handleExpandClick = () => {\n        setExpanded((expanded) => !expanded);\n    }\n\n    const handleOpen = () => {\n        setState(state => ({ ...state, open: true, }))\n    }\n\n    const handleChange = ({ target }) => setState(state => ({ ...state, [target.name]: target.value }))\n\n    const handleClose = () => setState(state => ({ ...state, open: false, }))\n\n    return (\n        <Card variant='outlined'>\n            <CardHeader\n                title={state.title}\n                subheader={state.time?.toDate().toLocaleString()}\n            />\n            <CardActions disableSpacing>\n                <IconButton onClick={handleOpen}>\n                    <CreateIcon />\n                </IconButton>\n                <IconButton onClick={deleteRequest(state.id)}>\n                    <DeleteIcon />\n                </IconButton>\n                <IconButton\n                    className={clsx(classes.expand, {\n                        [classes.expandOpen]: expanded,\n                    })}\n                    onClick={handleExpandClick}\n                    aria-expanded={expanded}\n                    aria-label=\"show more\"\n                >\n                    <ExpandMoreIcon />\n                </IconButton>\n                <Dialog fullWidth maxWidth=\"xs\" open={state.open} onClose={handleClose}>\n                    <DialogTitle>\n                        Modifica nota\n                    </DialogTitle>\n                    <DialogContent dividers>\n                        <DialogContentText>\n                            Modifica nota selezionata\n                        </DialogContentText>\n                        <TextField\n                            onChange={handleChange}\n                            value={state.newTitle}\n                            name=\"newTitle\"\n                            type=\"text\"\n                            fullWidth\n                            label=\"Titolo\"\n                            id=\"title-note\"\n                            //helperText=\"short\"\n                            variant=\"outlined\"\n                            margin='normal'\n                        />\n                        <TextField\n                            onChange={handleChange}\n                            value={state.newDescription}\n                            name=\"newDescription\"\n                            type=\"text\"\n                            fullWidth\n                            id=\"description-note\"\n                            //helperText=\"long\"\n                            label=\"Descrizione\"\n                            margin='normal'\n                            multiline\n                            variant=\"outlined\"\n                            maxRows={5}\n                            minRows={2}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"text\" color=\"secondary\" onClick={handleClose}>\n                            {\"Annulla\"}\n                        </Button>\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleModifyClick}>\n                            {\"Modifica\"}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </CardActions>\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent style={{ paddingTop: 0 }}>\n                    <Typography paragraph>{state.description}</Typography>\n                </CardContent>\n            </Collapse>\n\n        </Card>\n    )\n}\n\nexport function PatientNotes(props) {\n    const [state, setState] = useState({\n        title: \"\",\n        description: \"\",\n        notes: [],\n        open: false,\n    });\n\n    const handleOpen = () => setState(state => (\n        {\n            ...state,\n            open: true,\n            description: \"\",\n            title: \"\",\n        }\n    ));\n\n    const { patientId } = useParams();\n\n    const { getPatientNotes, createPatientNote, deletePatientNote } = useAuth();\n\n    const fetchPatientNotes = useCallback((patientId) => {\n        return getPatientNotes(patientId)\n    }, [getPatientNotes]);\n\n    const addPatientNote = useCallback((patientId, note) => {\n        return createPatientNote(patientId, note);\n    }, [createPatientNote]);\n\n    const removePatientNote = useCallback((patientId, noteId) => {\n        return deletePatientNote(patientId, noteId);\n    }, [deletePatientNote]);\n\n    const isMountedRef = useRef(null);\n\n    useEffect(() => {\n        const fetchData = async (patientId) => {\n            try {\n\n                const snapshot = await fetchPatientNotes(patientId);\n\n                if (snapshot.empty) {\n                    return;\n                }\n\n                if (isMountedRef.current) {\n                    setState(state => ({\n                        ...state,\n                        notes: snapshot.docs.map(doc => ({\n                            ...doc.data(),\n                            id: doc.id,\n                        })),\n                    }));\n                }\n\n            } catch (err) {\n                console.error(err);\n            }\n        }\n\n        isMountedRef.current = true;\n\n        if (patientId !== undefined) {\n            fetchData(patientId);\n        }\n\n        return () => isMountedRef.current = false\n\n    }, [patientId, fetchPatientNotes]);\n\n    const handleCreateClick = async () => {\n        const { title, description } = state;\n\n        let note = {\n            description: description,\n            title: title,\n            time: Timestamp.now(),\n        }\n\n        try {\n\n            // save new note and return its unique id\n            let docRef = await addPatientNote(patientId, note);\n\n            setState(state => {\n                const { notes } = state;\n                notes.unshift({ ...note, id: docRef.id });\n                return ({\n                    ...state,\n                    notes: notes,\n                    open: false,\n                    title: \"\",\n                    description: \"\",\n                });\n            });\n\n\n        } catch (err) {\n            setState(state => ({\n                ...state,\n                open: false,\n            }))\n            console.error(err);\n        }\n    }\n\n    const handleDeleteClick = (id) => async () => {\n        try {\n\n            await removePatientNote(patientId, id);\n\n            setState(state => {\n                return ({\n                    ...state,\n                    notes: state.notes.filter(note => note.id !== id),\n                })\n            })\n\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const handleClose = () => {\n        setState(state => ({ ...state, open: false, title: \"\", description: \"\", }))\n    }\n\n    const handleChange = ({ target }) => setState(state => (\n        { ...state, [target.name]: target.value }\n    ))\n\n    return (\n        <Container maxWidth=\"md\">\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Button\n                        variant='contained'\n                        startIcon={<AddIcon />}\n                        size=\"large\"\n                        color=\"primary\"\n                        onClick={handleOpen}\n                    // fullWidth\n                    >\n                        Nuova nota\n                    </Button>\n                    <Dialog maxWidth=\"xs\" fullWidth open={state.open} onClose={handleClose}>\n                        <DialogTitle>\n                            Nuova nota\n                        </DialogTitle>\n                        <DialogContent dividers>\n                            <DialogContentText>\n                                Crea una nuova nota\n                            </DialogContentText>\n                            <TextField\n                                onChange={handleChange}\n                                value={state.title}\n                                name=\"title\"\n                                type=\"text\"\n                                fullWidth\n                                label=\"Titolo\"\n                                id=\"title-note\"\n                                //helperText=\"short\"\n                                variant=\"outlined\"\n                                margin='normal'\n                            />\n                            <TextField\n                                onChange={handleChange}\n                                value={state.description}\n                                name=\"description\"\n                                type=\"text\"\n                                fullWidth\n                                id=\"description-note\"\n                                //helperText=\"long\"\n                                label=\"Descrizione\"\n                                multiline\n                                variant=\"outlined\"\n                                margin='normal'\n                                maxRows={5}\n                                minRows={2}\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button variant=\"text\" color=\"secondary\" onClick={handleClose}>\n                                {\"Annulla\"}\n                            </Button>\n                            <Button variant=\"contained\" color=\"primary\" onClick={handleCreateClick}>\n                                {\"Crea\"}\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                </Grid>\n                {state.notes.length ? (\n                    state.notes.map((note) => (\n                        <Grid item xs={4} key={note.id}>\n                            <NoteCard\n                                time={note.time}\n                                title={note.title}\n                                description={note.description}\n                                id={note.id}\n                                deleteRequest={handleDeleteClick}\n                            />\n                        </Grid>\n                    ))\n                ) : (\n                    <Grid item>\n\n                    </Grid>\n                )}\n            </Grid>\n        </Container>\n    )\n}","import React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport clsx from 'clsx';\nimport {\n    Typography,\n    Grid,\n    TextField,\n    Container,\n    InputAdornment,\n    IconButton,\n    Paper,\n    TableContainer,\n    Table,\n    TableBody,\n    TableRow,\n    TableCell,\n    TableSortLabel,\n    Checkbox,\n    Toolbar,\n    TablePagination,\n    TableHead,\n    Tooltip,\n    Backdrop,\n    CircularProgress,\n} from \"@material-ui/core\";\nimport BlockIcon from '@material-ui/icons/Block';\nimport NoteIcon from '@material-ui/icons/Note';\nimport {\n    makeStyles,\n    withStyles,\n    createTheme,\n    ThemeProvider,\n    alpha,\n    lighten,\n} from \"@material-ui/core/styles\";\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { Timestamp } from \"firebase/firestore\";\nimport PropTypes from 'prop-types';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport strings from '../../components/Language';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n        borderRadius: 24,\n        padding: theme.spacing(3),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nconst WarningIconStyled = withStyles(() => ({\n    root: {\n        color: \"#ffc107\",\n    },\n}))(({ children, ...rest }) => <WarningIcon {...rest} fontSize=\"small\" />);\n\nconst ErrorIconStyled = withStyles(() => ({\n    root: {\n        color: '#f44336',\n    },\n}))(({ children, ...rest }) => <ErrorIcon {...rest} fontSize=\"small\" />);\n\nconst CheckCircleIconStyled = withStyles(() => ({\n    root: {\n        color: \"#4caf50\",\n    },\n}))(({ children, ...rest }) => <CheckCircleIcon {...rest} fontSize=\"small\" />)\n\nconst PATIENT_STATUS = {\n    YELLOW: \"yellow\",\n    GREEN: \"green\",\n    RED: \"red\",\n}\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.primary.main,\n                backgroundColor: lighten(theme.palette.primary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.primary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nfunction EnhancedTableToolbar({\n    numSelected,\n    handleSearch,\n    onRequestDropOut,\n    onRequestNotes,\n    onRequestVisit,\n    onRequestChangeStatus,\n    onRequestRecoverDropped\n}) {\n\n    const classes = useToolbarStyles();\n\n    const getMainActionButtons = (numSelected) => {\n        switch (numSelected) {\n            case 0:\n                return <TextField\n                    id=\"search\"\n                    type=\"search\"\n                    //value={state.search}\n                    onChange={(event) => handleSearch(event.target.value)}\n                    name=\"search\"\n                    margin='none'\n                    size='small'\n                    label=\"Cerca\"\n                    //helperText=\"Cerca per nome o cognome\"\n                    variant='outlined'\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">\n                            <IconButton aria-label='search patient'>\n                                <SearchIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    }}\n                />\n            case 1:\n                return <>\n                    <Tooltip title=\"Recover Dropped\">\n                        <IconButton onClick={onRequestRecoverDropped}>\n                            <RestoreIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Torna regolare\">\n                        <IconButton onClick={onRequestChangeStatus}>\n                            <CheckCircleIconStyled />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Drop Out\">\n                        <IconButton onClick={onRequestDropOut}>\n                            <BlockIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Note\">\n                        <IconButton onClick={onRequestNotes}  >\n                            <NoteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Visita medica\">\n                        <IconButton onClick={onRequestVisit}  >\n                            <LocalHospitalIcon />\n                        </IconButton>\n                    </Tooltip>\n                </>;\n            default:\n                return;\n\n        }\n    }\n\n    return (\n        <Toolbar className={clsx(classes.root, { [classes.highlight]: numSelected > 0, })}>\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selezionato/i\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Pazienti\n                </Typography>\n            )}\n\n            {getMainActionButtons(numSelected)}\n\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n    // onRequestDelete: PropTypes.func.isRequired,\n};\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, headCells, } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all desserts' }}\n                        color=\"primary\"\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nfunction TablePatients(props) {\n    const { rows, headCells, history, handleSearch, handleDropout, changePatientStatus, recoverDropped, classes } = props;\n\n    const [order, setOrder] = React.useState('desc');\n    const [orderBy, setOrderBy] = React.useState('createdAt');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.uid);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, uid) => {\n        const selectedIndex = selected.indexOf(uid);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, uid);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    // const handleChangePage = (event, newPage) => {\n    //     setPage(newPage);\n    // };\n\n    // const handleChangeRowsPerPage = (event) => {\n    //     setRowsPerPage(parseInt(event.target.value, 10));\n    //     setPage(0);\n    // };\n\n    const isSelected = (uid) => selected.indexOf(uid) !== -1;\n\n    const handleClickSeeMore = (e, patientId) => {\n        history.push(`/${patientId}/patient-details`, { patientId: patientId, titlePage: strings.pageTitles.details_patient, })\n    }\n\n    const getPatientStatusIcon = (status) => {\n        switch (status) {\n            case PATIENT_STATUS.GREEN:\n                return <CheckCircleIconStyled />\n            case PATIENT_STATUS.RED:\n                return <ErrorIconStyled />\n            case PATIENT_STATUS.YELLOW:\n                return <WarningIconStyled />\n            default:\n                return;\n        }\n    }\n\n    const handleRecoverDropped = () => {\n        recoverDropped(selected[0]);\n    }\n\n    const isDropped = (patient) => {\n        if (typeof patient.dropped !== 'undefined') {\n            return patient.dropped;\n        } else {\n            return false;\n        }\n    }\n\n    const getDroppedDate = (patient) => {\n        if (isDropped(patient)) {\n            return patient.droppedAt.toDate().toLocaleDateString();\n        } else return \"\";\n    }\n\n    const handlePatientNotes = () => {\n        let id = selected[0];\n        history.push(`/${id}/notes`, {\n            patientId: id,\n            titlePage: strings.pageTitles.notes,\n        });\n    }\n\n    const handlePatientVisit = () => {\n        let id = selected[0];\n        history.push(`/${id}/medical-visit`, {\n            patientId: id,\n            titlePage: strings.pageTitles.medical_visit,\n        });\n    }\n\n    const handleChangePatientStatus = () => {\n        changePatientStatus(selected[0]);\n    }\n\n    const handleRequestDropout = () => {\n        handleDropout(selected[0]);\n    }\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    const theme = createTheme();\n    theme.overrides = {\n        MuiTableRow: {\n            root: {\n                '&$selected, &$selected:hover': {\n                    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n                },\n            }\n        }\n    }\n\n    return (\n        <div className={classes.root}>\n            <ThemeProvider theme={theme}>\n                <Paper className={classes.paper}>\n                    <EnhancedTableToolbar\n                        numSelected={selected.length}\n                        handleSearch={handleSearch}\n                        onRequestDropOut={handleRequestDropout}\n                        onRequestNotes={handlePatientNotes}\n                        onRequestVisit={handlePatientVisit}\n                        onRequestChangeStatus={handleChangePatientStatus}\n                        onRequestRecoverDropped={handleRecoverDropped}\n                    />\n                    <TableContainer>\n                        <Table className={classes.table} size={dense ? \"small\" : \"medium\"}>\n                            <EnhancedTableHead\n                                classes={classes}\n                                numSelected={selected.length}\n                                order={order}\n                                orderBy={orderBy}\n                                onSelectAllClick={handleSelectAllClick}\n                                onRequestSort={handleRequestSort}\n                                rowCount={rows.length}\n                                headCells={headCells}\n                            />\n                            <TableBody>\n                                {stableSort(rows, getComparator(order, orderBy))\n                                    // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    .map((row, index) => (\n                                        <TableRow tabIndex={-1} key={row.uid} selected={isSelected(row.uid)} hover>\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    onClick={(event) => handleClick(event, row.uid)}\n                                                    checked={isSelected(row.uid)}\n                                                    inputProps={{ 'aria-labelledby': `enhanced-table-checkbox-${index}` }}\n                                                    color=\"primary\"\n                                                />\n                                            </TableCell>\n                                            {/* <TableCell component=\"th\" id={`enhanced-table-checkbox-${index}`} scope=\"row\" padding=\"none\">\n                                                {row.uid}\n                                            </TableCell> */}\n                                            <TableCell align=\"left\">{row.name}</TableCell>\n                                            <TableCell align=\"left\">{row.surname}</TableCell>\n                                            <TableCell align=\"right\">{row.therapyStartDate}</TableCell>\n                                            <TableCell align=\"right\">{row.therapyEndDate}</TableCell>\n                                            <TableCell align='right'>\n\n                                                {getDroppedDate(row)}\n\n                                            </TableCell>\n                                            <TableCell align='right'>\n                                                <IconButton disabled size='small'>\n                                                    {getPatientStatusIcon(row.status)}\n                                                </IconButton>\n                                            </TableCell>\n\n                                            <TableCell align=\"right\">\n                                                <IconButton onClick={(event) => handleClickSeeMore(event, row.uid)} size=\"small\">\n                                                    <ChevronRightIcon fontSize=\"small\" />\n                                                </IconButton>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                {emptyRows > 0 && (\n                                    <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                        <TableCell colSpan={8} />\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    {/* <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={rows.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    /> */}\n                </Paper>\n            </ThemeProvider>\n        </div>\n    )\n}\n\nfunction createData(uid, name, surname, therapyStartDate, therapyEndDate, status, dropped, droppedAt) {\n    return ({ uid, name, surname, therapyStartDate, therapyEndDate, status, dropped, droppedAt });\n}\n\nexport default function Patients(props) {\n\n    const { history } = props;\n\n    const { getPatients, currentLanguage } = useAuth();\n\n    const fetchPatients = useCallback(() => getPatients(), [getPatients]);\n\n    const [state, setState] = useState({\n        patients: [],\n        filtered: [],\n        backdrop: false,\n    });\n\n    const isMountedRef = useRef(null);\n\n    useEffect(() => {\n\n        isMountedRef.current = true;\n\n        const fetchData = async (currentLanguage) => {\n\n            try {\n\n                if (isMountedRef.current)\n                    setState(state => ({ ...state, backdrop: true, }))\n\n                const snapshot = await fetchPatients();\n\n                if (snapshot.empty)\n                    return;\n\n                const patients = snapshot.docs.map((doc) => {\n                    const data = doc.data();\n                    const createdAt = data.createdAt;\n                    let patient = { ...data }\n                    if (typeof createdAt === \"string\") {\n                        patient = { ...patient, createdAt: new Date(createdAt).toLocaleString(currentLanguage) }\n                    } else if (createdAt instanceof Timestamp) {\n                        patient = { ...patient, createdAt: createdAt.toDate().toLocaleString(currentLanguage) }\n                    }\n                    const status = data.status;\n                    if (status === undefined) {\n                        patient = { ...patient, status: 'green' }\n                    }\n\n                    const { therapyStartDate } = patient;\n                    if (typeof therapyStartDate === \"string\") {\n                        patient = { ...patient, therapyStartDate: new Date(therapyStartDate).toLocaleDateString(currentLanguage), }\n                    } else if (therapyStartDate instanceof Timestamp) {\n                        patient = { ...patient, therapyStartDate: therapyStartDate.toDate().toLocaleDateString(currentLanguage), }\n                    }\n\n                    const { therapyEndDate } = patient;\n                    if (typeof therapyEndDate === \"string\") {\n                        patient = { ...patient, therapyEndDate: new Date(therapyEndDate).toLocaleDateString(currentLanguage), }\n                    } else if (therapyEndDate instanceof Timestamp) {\n                        patient = { ...patient, therapyEndDate: therapyEndDate.toDate().toLocaleDateString(currentLanguage), }\n                    }\n                    return ({ ...patient, uid: doc.id });\n                }).filter(patient => !((typeof patient.controlGroup === 'boolean') && patient.controlGroup));\n\n\n                if (isMountedRef.current)\n                    setState((state) => {\n                        return ({\n                            ...state,\n                            patients: patients,\n                            filtered: patients,\n                            backdrop: false,\n                        });\n                    });\n\n            } catch (err) {\n                if (isMountedRef.current) {\n                    setState(state => ({ ...state, backdrop: false, }))\n                }\n                console.error(err);\n            }\n\n        }\n\n        fetchData(currentLanguage);\n\n        return () => isMountedRef.current = false\n\n    }, [fetchPatients, currentLanguage]);\n\n    const { setPatientDroppedOut, updatePatientStatus, recoverDroppedPatient } = useAuth();\n\n    const dropPatientOut = React.useCallback((patientId) => {\n        return setPatientDroppedOut(patientId);\n    }, [setPatientDroppedOut]);\n\n    const handleDropout = async (patientId) => {\n\n        try {\n\n            await dropPatientOut(patientId);\n\n            setState((state) => {\n                let patients = state.patients.map((patient) => {\n                    if (patient.uid === patientId) {\n                        return ({ ...patient, dropped: true, droppedAt: Timestamp.now() });\n                    } else return patient;\n                })\n                return ({\n                    ...state,\n                    patients: patients,\n                    filtered: patients,\n                });\n            });\n\n        } catch (err) {\n            console.error(err);\n        }\n\n    }\n\n    const handleChangePatientStatus = async (patientId) => {\n\n        try {\n\n            await updatePatientStatus(patientId, \"green\");\n\n            setState((state) => {\n                let patients = state.patients.map((patient) => {\n                    if (patient.uid === patientId)\n                        return ({ ...patient, status: \"green\" })\n                    else return patient;\n                })\n                return ({\n                    ...state,\n                    patients: patients,\n                    filtered: patients,\n                })\n            });\n\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const handleRecoverDropped = async (patientId) => {\n        try {\n\n            await recoverDroppedPatient(patientId);\n\n            setState(state => {\n                let patients = state.patients.map((patient) => {\n                    if (patient.uid === patientId) {\n                        return ({ ...patient, dropped: false })\n                    } else\n                        return patient;\n                })\n                return ({\n                    ...state,\n                    patients: patients,\n                    filtered: patients,\n                })\n            })\n\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const handleSearch = (searchText) => {\n        if (searchText === undefined || searchText.length === 0) {\n            return setState(state => ({ ...state, filtered: state.patients, }));\n        }\n\n        setState((state) => ({\n            ...state,\n            filtered: state.patients.filter(({ name, surname }) => {\n                return (\n                    name.includes(searchText) ||\n                    surname.includes(searchText)\n                )\n            }),\n        }));\n    }\n\n    const headCells = [\n        // { id: 'uid', numeric: false, disablePadding: true, label: 'ID', },\n        { id: 'name', numeric: false, disablePadding: false, label: 'Nome', },\n        { id: 'surname', numeric: false, disablePadding: false, label: 'Cognome', },\n        // { id: 'createdAt', numeric: true, disablePadding: false, label: \"Data iscrizione\" },\n        { id: 'therapyStartDate', numeric: true, disablePadding: false, label: \"Inizio\", },\n        { id: 'therapyEndDate', numeric: true, disablePadding: false, label: \"Fine\", },\n        { id: 'dropped', numeric: true, disablePadding: false, label: \"Dropped\", },\n        { id: 'status', numeric: true, disablePadding: false, label: \"Status\", },\n        { id: 'seeMore', numeric: true, disablePadding: false, label: \"See more\", },\n    ];\n    const classes = useStyles();\n\n    const { filtered, backdrop } = state;\n\n    let rows = filtered.map(({ uid, name, surname, therapyStartDate, therapyEndDate, status, dropped, droppedAt }) => {\n        return createData(uid, name, surname, therapyStartDate, therapyEndDate, status, dropped, droppedAt);\n    });\n\n    if (backdrop) {\n        return (\n            <Backdrop timeout={2000} className={classes.backdrop} open={backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <TablePatients\n                        classes={classes}\n                        rows={rows}\n                        headCells={headCells}\n                        history={history}\n                        handleSearch={handleSearch}\n                        handleDropout={handleDropout}\n                        changePatientStatus={handleChangePatientStatus}\n                        recoverDropped={handleRecoverDropped}\n                    />\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}","import React, { useEffect, useState, useRef } from \"react\";\nimport { Container, Grid, List, ListItem, Button, ThemeProvider, IconButton, ListItemSecondaryAction, Paper, ListItemText, Switch, ListItemAvatar } from '@material-ui/core'\nimport { useAuth } from \"../../contexts/AuthContext\"\nimport FitnessCenterIcon from '@material-ui/icons/FitnessCenter';\nimport { Avatar } from \"@material-ui/core\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport { Timestamp } from \"@firebase/firestore\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { createTheme } from '@material-ui/core/styles'\n\nconst theme = createTheme();\ntheme.overrides = {\n    // <Switch/> default: color=secondary\n    MuiSwitch: {\n        root: {\n\n        },\n        colorSecondary: {\n            '&$checked': {\n                color: '#2e7d32',\n                '&:hover': {\n                    backgroundColor: '#4caf50',\n                    '@media (hover: none)': {\n                        backgroundColor: 'transparent',\n                    },\n                },\n            },\n            // '&$disabled': {\n            //     color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n            // },\n            '&$checked + $track': {\n                backgroundColor: '#1b5e20',\n            },\n            // '&$disabled + $track': {\n            //     backgroundColor:\n            //         theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n            // },\n        }\n    }\n}\nexport default function PhysicalExercises(props) {\n    const patient = props.location?.state?.patient;\n    const [state, setState] = useState({\n        workouts: [],\n        patient_workouts: [],\n        updateWorkouts: 1,\n    })\n    const { listWorkouts, updatePatientWorkouts, getPatient } = useAuth();\n    const handleCheckWorkout = (checked, uid) => {\n        setState(s => {\n            const { workouts, patient_workouts } = s;\n\n            if (checked) {\n                // add workout to patient workouts list\n                const workout = workouts.find(w => w.uid === uid);\n                patient_workouts.push({\n                    ...workout,\n                    from: Timestamp.fromDate(new Date()),\n                    to: Timestamp.fromDate(new Date())\n                });\n            } else {\n                // if false then it's present in list so must be removed\n                const currentIndex = patient_workouts.map(({ uid }) => uid).indexOf(uid);\n\n                if (currentIndex !== -1) {\n                    // confirm it's present\n                    patient_workouts.splice(currentIndex, 1);\n                }\n            }\n\n            return ({ ...s, patient_workouts: patient_workouts })\n        })\n    }\n    const handleSaveClick = async () => {\n        try {\n\n            const { patient_workouts } = state;\n\n            await updatePatientWorkouts({ workouts: patient_workouts, }, patient);\n            setState((s) => ({ ...s, updateWorkouts: s.updateWorkouts + 1 }))\n\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    const isMountedRef = useRef(null);\n    useEffect(() => {\n        const fetchData = async () => {\n            const promises = [];\n            promises.push(getPatient(patient), listWorkouts())\n            try {\n\n                const [patient_data, snapshot] = await Promise.all(promises);\n\n                // const patient_data = await getPatient(patient);\n\n                const patient_workouts = patient_data.data().workouts || [];\n\n                // let snapshot = await listWorkouts();\n                const workouts = snapshot.docs.map(doc => ({ ...doc.data(), uid: doc.id }))\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, workouts: workouts, patient_workouts: patient_workouts }))\n                }\n\n            } catch (error) {\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true\n        fetchData();\n        return () => (isMountedRef.current = false)\n    }, [patient, state.updateWorkouts])\n    return (\n        <Container maxWidth=\"lg\" id=\"wrapper\">\n            <ThemeProvider theme={theme}>\n                <Paper elevation={3}>\n                    <Grid spacing={2} container id=\"container\" justifyContent=\"center\" alignItems=\"flex-start\">\n                        {/* <Grid item xs={12} id=\"item\">\n                        <ul>\n                            {state.workouts && state.workouts.map(({ name, uid, id }) => (\n                                <li key={uid}>{`${id}, ${uid}, ${name}`}</li>)\n                            )}\n                        </ul>\n                    </Grid> */}\n                        <Grid item xs={8}>\n                            <List>\n                                {\n                                    state.workouts && state.workouts.map(({ name, uid, id, difficulty }) => {\n                                        const { patient_workouts } = state;\n                                        const workout = patient_workouts.find((w) => w.uid === uid);\n                                        const from = workout?.from || Timestamp.fromDate(new Date());\n                                        const to = workout?.to || Timestamp.fromDate(new Date());\n                                        return (\n                                            <ListItem key={uid} id={id.toString()} divider>\n                                                <ListItemAvatar>\n                                                    <Avatar>\n                                                        <FitnessCenterIcon />\n                                                    </Avatar>\n                                                </ListItemAvatar>\n                                                <ListItemText primary={`(${difficulty}) ${name}`} secondary={`${from.toDate().toLocaleString()} - ${to.toDate().toLocaleString()}`} />\n                                                <ListItemSecondaryAction>\n                                                    <Tooltip title=\"Programma questo workout\">\n                                                        <IconButton>\n                                                            <ScheduleIcon />\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                    <Switch\n                                                        checked={state.patient_workouts.map(({ id }) => id).indexOf(id) !== -1}\n                                                        onChange={({ target }) => handleCheckWorkout(target.checked, uid)}\n                                                    // name=\"checkedA\"\n\n                                                    />\n                                                </ListItemSecondaryAction>\n                                            </ListItem>\n                                        )\n                                    })\n                                }\n                            </List>\n                        </Grid>\n                        <Grid item xs={8} style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                            {/* <ButtonGroup size=\"small\" variant=\"outlined\">\n                            <Button\n                                // variant=\"text\"\n                                color=\"default\"\n                                onClick={() => console.debug('scarica i dati')}\n                            >\n                                Reimposta\n                            </Button> */}\n                            <Button\n                                onClick={handleSaveClick}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                endIcon={<SaveIcon />}\n                            >\n                                Salva\n                            </Button>\n                            {/* </ButtonGroup> */}\n\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </ThemeProvider>\n        </Container>\n    )\n}","import React, { useState } from 'react';\nimport {\n    Avatar,\n    Button,\n    CssBaseline,\n    TextField,\n    Grid,\n    Box,\n    Typography,\n    Container,\n    CircularProgress,\n    Backdrop\n} from '@material-ui/core';\nimport { ThemeProvider, createTheme, makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport { Alert, AlertTitle } from '@material-ui/lab'\nimport strings from './Language/'\n\nconst theme = createTheme();\n\nconst useStyles = makeStyles((theme) => ({\n    errorAlert: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    avatar: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    mainLogo: {\n        width: theme.spacing(12),\n        height: theme.spacing(12),\n    },\n}));\n\n/**\n * @description\n * @version 1.0.1\n * @name ForgotPassword\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @param {*} props \n * @returns \n */\nexport function ForgotPassword(props) {\n    // const { history, location } = props;\n    // console.debug(location.state);\n    // const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [backdropOpen, setBackdropOpen] = useState(false);\n    const [message, setMessage] = useState('');\n\n    const { resetPassword } = useAuth();\n\n    const classes = useStyles();\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        const email = data.get('email');\n        const confirmEmail = data.get('confirm-email');\n\n        if (email !== confirmEmail) {\n            // console.debug(confirmEmail.toString(), email.toString());\n            return setError(\"Emails do not much\")\n        }\n\n        // clear error and message\n        setError('');\n        setMessage('')\n\n        // const { file, filename } = state;\n        setBackdropOpen(true);\n\n        try {\n            await resetPassword(email)\n\n            // console.debug(result);\n            // history.push('/reserved/');\n            setMessage('Check your inbox for further instructions')\n        } catch (error) {\n            // console.error(error);\n            // setBackdropOpen(false);\n            setError(error.message);\n        }\n        setBackdropOpen(false);\n\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <Backdrop className={classes.backdrop} open={backdropOpen}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n                <CssBaseline />\n                <Box className={classes.paper}>\n                    <Avatar alt=\"osp\" src=\"/aovr.png\" className={classes.mainLogo} />\n                    <Typography component=\"h1\" variant=\"h5\">\n                        {`${strings.account.reset} ${strings.account.password}`}\n                    </Typography>\n                    <Grid item xs={12} className={classes.errorAlert}>\n                        {\n                            error && <Alert severity=\"error\">\n                                <AlertTitle>{strings.general.error}</AlertTitle>\n                                {error}\n                            </Alert>\n                        }\n                        {\n                            message && <Alert severity=\"success\">\n                                <AlertTitle>{strings.general.done}</AlertTitle>\n                                {message}\n                            </Alert>\n                        }\n                    </Grid>\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label={strings.patient.email}\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"confirm-email\"\n                            label={strings.account.confirm_email}\n                            type=\"email\"\n                            id=\"confirm-email\"\n                            variant=\"outlined\"\n                        // autoComplete=\"current-password\"\n                        />\n\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            // sx={{ mt: 3, mb: 2 }}\n                            disabled={backdropOpen}\n                            color=\"primary\"\n                        >\n                            {strings.account.reset}\n                        </Button>\n                        <Grid container justifyContent=\"space-between\" spacing={1}>\n                            <Grid item>\n                                <Link to={location => ({ ...location, pathname: \"/login\" })} variant=\"body2\">\n                                    {strings.account.sign_in}\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link\n                                    to={location => ({\n                                        ...location,\n                                        pathname: \"/signup\",\n                                        // state: { from: location.pathname }\n                                    })}\n                                    variant=\"body2\">\n                                    {`${strings.account.no_account} ${strings.account.sign_up}`}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n}\n","import React, { useCallback } from 'react';\nimport {\n    Container,\n    Grid,\n    List,\n    ListItem,\n    Typography,\n    Paper,\n    CircularProgress,\n    Backdrop,\n    ListItemText,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useAuth } from '../contexts/AuthContext'\nimport strings from './Language';\n\nconst useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport function Profile() {\n    const [state, setState] = React.useState({\n        patients: [],\n        backdropOpen: false,\n    });\n\n    const classes = useStyles();\n    const { getPatients } = useAuth();\n    const fetchPatients = useCallback(() => getPatients(), [getPatients]);\n    const isMounted = React.useRef(null);\n    React.useEffect(() => {\n        const fetchData = async () => {\n\n\n            try {\n\n                if (isMounted.current)\n                    setState(s => ({ ...s, backdropOpen: true }))\n\n                const snapshot = await fetchPatients();\n                const patients = snapshot.docs.map(doc => ({ ...doc.data(), uid: doc.id }))\n\n\n                if (isMounted.current)\n                    setState(s => ({ ...s, backdropOpen: false, patients: patients }))\n\n            } catch (error) {\n                console.error(error);\n                if (isMounted.current)\n                    setState(s => ({ ...s, backdropOpen: false }))\n            }\n\n        }\n        isMounted.current = true\n        fetchData();\n        return () => (isMounted.current = false)\n    }, [fetchPatients])\n\n    const { backdropOpen } = state;\n\n    if (backdropOpen) {\n        return (\n            <Backdrop className={classes.backdrop} open={backdropOpen}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    const { patients } = state;\n\n    return (\n        <Container>\n            <Grid container spacing={3} direction=\"row\" justifyContent=\"flex-start\" alignItems=\"flex-start\">\n                <Grid item xs={4} >\n                    <Paper elevation={3} variant=\"elevation\" style={{ padding: 12 }}>\n                        <Typography variant=\"h6\" gutterBottom color=\"textSecondary\">Lista pazienti</Typography>\n                        <List>\n                            {patients.length ? patients.map(({ name, surname, email, uid }) => (\n                                <ListItem key={uid}>\n                                    <ListItemText primary={`${surname} ${name}`} secondary={email} />\n                                </ListItem>\n                            )) : (\n                                <ListItem>\n                                    <ListItemText primary={strings.general.empty_list} />\n                                </ListItem>\n                            )}\n                        </List>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}","import React, { useState, useRef } from 'react';\nimport {\n    Avatar,\n    Button,\n    CssBaseline,\n    TextField,\n    Grid,\n    Box,\n    Typography,\n    Container,\n    CircularProgress,\n    Backdrop\n} from '@material-ui/core';\nimport { ThemeProvider, createTheme, makeStyles } from '@material-ui/core/styles';\n// import { Link } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport { Alert, AlertTitle } from '@material-ui/lab'\n// import {\n//     LockOutlined as LockOutlinedIcon\n// } from \"@material-ui/icons\";\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport strings from './Language';\n\nconst theme = createTheme();\n\nconst useStyles = makeStyles((theme) => ({\n    errorAlert: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    avatar: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    paper: {\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    innerBox: {\n        //backgroundColor: '#fff',\n        padding: theme.spacing(2),\n        borderRadius: '8px',\n        //border: '1px solid #000'\n    },\n}));\nexport const UpdateProfile = () => {\n    // const { history, location } = props;\n    // console.debug(location.state);\n    // const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [backdropOpen, setBackdropOpen] = useState(false);\n    const [message, setMessage] = useState('');\n    const isMountedRef = useRef(null);\n    const [state, setState] = useState({\n        displayName: \"\",\n        email: \"\",\n    })\n    const { currentUser, updateEmail, updatePassword, updateProfile } = useAuth();\n\n    const classes = useStyles();\n\n    React.useEffect(() => {\n        isMountedRef.current = true;\n        const fetchData = () => {\n            const { displayName, email } = currentUser;\n            //console.debug(displayName, email);\n            if (isMountedRef.current)\n                setState((s) => ({ ...s, displayName: displayName, email: email }))\n        }\n        fetchData();\n        return () => (isMountedRef.current = false)\n    }, [currentUser])\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        const displayName = data.get('displayName');\n        const email = data.get('email');\n        const password = data.get('password');\n        const confirmPassword = data.get('confirm-password');\n\n        if (password !== confirmPassword) {\n            // console.debug(confirmEmail.toString(), email.toString());\n            return setError(\"Passwords do not match\")\n        }\n\n        // clear error and message\n        setError('');\n        setMessage('')\n\n        // const { file, filename } = state;\n        setBackdropOpen(true);\n\n        const promises = [];\n\n        if (displayName.toString().length && displayName.toString() !== state.displayName) {\n            promises.push(updateProfile({ displayName: displayName }))\n        }\n\n        if (email.toString() !== state.email && email.toString().length) {\n            promises.push(updateEmail(email))\n        }\n\n        if (password !== undefined && password.toString().length) {\n            promises.push(updatePassword(password))\n        }\n\n        Promise.all(promises).then(() => {\n            // setBackdropOpen(() => false)\n            setMessage(\"Your informations has been updated\")\n            // history.push(\"/reserved/\")\n        }).catch((error) => {\n            setError(() => error.message)\n            // setBackdropOpen(() => false)\n        }).finally(() => setBackdropOpen(() => false))\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <Backdrop className={classes.backdrop} open={backdropOpen}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n                <CssBaseline />\n                <Box className={classes.paper}>\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                        <LocalHospitalIcon />\n                    </Avatar>\n\n                    <Typography component=\"h1\" variant=\"h5\">\n                        {strings.account.modify_profile}\n                    </Typography>\n                    <Grid item xs={12} className={classes.errorAlert}>\n                        {\n                            error && <Alert severity=\"error\">\n                                <AlertTitle>{strings.general.error}</AlertTitle>\n                                {error}\n                            </Alert>\n                        }\n                        {\n                            message && <Alert severity=\"success\">\n                                <AlertTitle>{strings.general.done}</AlertTitle>\n                                {message}\n                            </Alert>\n                        }\n                    </Grid>\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }} className={classes.innerBox}>\n                        <TextField\n                            margin=\"normal\"\n                            // required\n                            fullWidth\n                            id=\"displayName\"\n                            label={strings.formatString(strings.patient.full_name, strings.patient.first_name, strings.patient.last_name)}\n                            name=\"displayName\"\n                            //defaultValue={state.displayName}\n                            value={state.displayName}\n                            autoFocus\n                            type=\"text\"\n                            variant='outlined'\n                            helperText={strings.account.doctor}\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email\"\n                            name=\"email\"\n                            type=\"email\"\n                            value={state.email}\n                            //defaultValue={state.email}\n                            variant=\"outlined\"\n                        // autoComplete=\"email\"\n                        // autoFocus\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            variant='outlined'\n                        // autoComplete=\"current-password\"\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"confirm-password\"\n                            label=\"Conferma password\"\n                            type=\"password\"\n                            id=\"confirm-password\"\n                            variant='outlined'\n                        // autoComplete=\"current-password\"\n                        />\n\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            // sx={{ mt: 3, mb: 2 }}\n                            disabled={backdropOpen}\n                            color=\"primary\"\n                        >\n                            {\"Modifica\"}\n                        </Button>\n                        {/* <Grid container justifyContent=\"space-between\" spacing={1}>\n                            <Grid item>\n                                <Link to={location => ({ ...location, pathname: \"/login\" })} variant=\"body2\">\n                                    Sign in\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link\n                                    to={location => ({\n                                        ...location,\n                                        pathname: \"/signup\",\n                                        // state: { from: location.pathname }\n                                    })}\n                                    variant=\"body2\">\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid> */}\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n}","import React, { useCallback, useEffect } from 'react'\nimport {\n    Button,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    Grid,\n    Paper,\n    TextField,\n    IconButton,\n    Backdrop,\n    CircularProgress,\n    Snackbar,\n    Container,\n    Avatar,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    DialogContentText,\n    Menu,\n    MenuItem,\n    ButtonGroup,\n} from '@material-ui/core';\nimport { Alert, AlertTitle, } from '@material-ui/lab'\nimport { makeStyles } from '@material-ui/core/styles'\nimport strings from '../../components/Language';\nimport { useParams } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext'\nimport { Timestamp } from 'firebase/firestore'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport CreateIcon from '@material-ui/icons/Create';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport LooksOneRoundedIcon from '@material-ui/icons/LooksOneRounded';\nimport LooksTwoRoundedIcon from '@material-ui/icons/LooksTwoRounded';\nimport Looks3RoundedIcon from '@material-ui/icons/Looks3Rounded';\nimport Looks4RoundedIcon from '@material-ui/icons/Looks4Rounded';\nimport Looks5RoundedIcon from '@material-ui/icons/Looks5Rounded';\nimport Looks6RoundedIcon from '@material-ui/icons/Looks6Rounded';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport PropTypes from 'prop-types';\n\nfunction ConfirmDeletionDialog(props) {\n\n    const { open, onClose, ...other } = props;\n\n    /*const [value, setValue] = React.useState(valueProp);\n\n    React.useEffect(() => {\n        if (!open) {\n            setValue(valueProp);\n        }\n    }, [valueProp, open]);*/\n\n    const handleCancel = () => {\n        onClose(false);\n    }\n\n    const handleOk = () => {\n        onClose(true);\n    }\n\n    return (\n        <Dialog maxWidth=\"xs\" open={open} fullWidth {...other} aria-labelledby=\"confirmation-dialog-title\">\n            <DialogTitle aria-labelledby=\"confirmation-dialog-title\">\n                Conferma\n            </DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText>\n                    Eliminazione visita medica\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus color=\"primary\" onClick={handleCancel}>\n                    Annulla\n                </Button>\n                <Button color=\"primary\" onClick={handleOk}>\n                    Conferma\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nConfirmDeletionDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n}\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        // minWidth: 220,\n    },\n    paper: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        padding: theme.spacing(2),\n        borderRadius: 24,\n        // width:'100%',\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nconst SEVERITY = {\n    ERROR: \"error\",\n    WARNING: \"warning\",\n    INFO: \"info\",\n    SUCCESS: \"success\",\n}\n\nfunction CreatePatientVisit(props) {\n    const { open, ...rest } = props;\n\n    const handleClose = () => { }\n\n    const handleOk = () => { }\n\n    return (\n        <Dialog maxWidth=\"xs\" fullWidth open={open} onClose={handleClose}>\n            <DialogTitle>\n                Crea\n            </DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText>\n                    Crea visita medica\n                </DialogContentText>\n                <TextField\n                    id=\"visit-name\"\n                    name=\"visitName\"\n                    type=\"text\"\n                    label=\"Nome visita\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"visit-date\"\n                    name=\"createdAt\"\n                    type=\"datetime-local\"\n                    label=\"Data e ora\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button variant='text' color=\"secondary\" onClick={handleClose}>\n                    Annulla\n                </Button>\n                <Button variant='contained' color=\"primary\" onClick={handleOk}>\n                    Conferma\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nfunction ModifyPatientVisit(props) {\n    const { open, ...rest } = props;\n\n    const handleClose = () => { }\n\n    const handleOk = () => { }\n\n    return (\n        <Dialog maxWidth=\"xs\" fullWidth open={open} onClose={handleClose}>\n            <DialogTitle>\n                Modifica\n            </DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText>\n                    Modifica visita medica\n                </DialogContentText>\n                <TextField\n                    id=\"visit-name\"\n                    name=\"visitName\"\n                    type=\"text\"\n                    label=\"Nome visita\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"visit-date\"\n                    name=\"createdAt\"\n                    type=\"datetime-local\"\n                    label=\"Data e ora\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button variant='text' color=\"secondary\" onClick={handleClose}>\n                    Annulla\n                </Button>\n                <Button variant='contained' color=\"primary\" onClick={handleOk}>\n                    Modifica\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\n/**\n * @description Page where doctor collects first patient data per steps.\n * Steps are the following: patient data, family history, physiological anamnesis,\n * pathological anamnesis, physical examination, blood chemistry, metabolism calculation,\n * bioimpedance, weight history, food anamnesis, eating behavior, nutritional plan, allergies.\n * @version 1.0.0\n * @name VisitPage\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @param {object} props Parent properties.\n * @returns React element.\n */\nexport function VisitPage(props) {\n    const { history } = props;\n    const [state, setState] = React.useState({\n        visitId: \"\",\n        visits: [],\n        visitName: \"\",\n        createdAt: \"\",\n        errorVisitName: false,\n        nextUpdate: 1,\n        openBackdrop: false,\n        snackbar: {\n            open: false,\n            message: \"\",\n            severity: \"error\",\n        },\n        confirmDeletion: false,\n        open: false,\n        selectedVisit: \"\",\n    });\n\n    const { patientId } = useParams();\n\n    const {\n        getPatientVisits,\n        createPatientVisit,\n        removePatientVisit,\n        currentLanguage,\n        modifyPatientVisit,\n        deletePatientVisit,\n    } = useAuth();\n\n    const fetchPatientVisits = useCallback((patientId) => getPatientVisits(patientId), [getPatientVisits]);\n\n    const isMountedRef = React.useRef(null);\n\n    useEffect(() => {\n        const fetchData = async (patientId, currentLanguage) => {\n\n            let icons = [\n                <LooksOneRoundedIcon />,\n                <LooksTwoRoundedIcon />,\n                <Looks3RoundedIcon />,\n                <Looks4RoundedIcon />,\n                <Looks5RoundedIcon />,\n                <Looks6RoundedIcon />,\n            ]\n\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, openBackdrop: true }));\n            }\n\n            let visits = [];\n\n            try {\n\n                let result = await fetchPatientVisits(patientId);\n\n                if (result.empty)\n                    return setState(s => ({ ...s, openBackdrop: false }))\n\n                result.docs.forEach((doc, i) => {\n\n                    let visit = { ...doc.data(), visitId: doc.id }\n\n                    const { createdAt } = visit;\n\n                    if (createdAt !== undefined) {\n                        visit = { ...visit, createdAt: createdAt.toDate().toISOString().split('T')[0] }\n                    }\n\n                    if (i < 6) {\n                        visit = { ...visit, icon: icons[i] }\n                    }\n\n                    visits.push(visit);\n                });\n\n\n            } catch (e) {\n                if (isMountedRef.current)\n                    setState(s => ({\n                        ...s,\n                        openBackdrop: false,\n                        snackbar: {\n                            open: true,\n                            message: \"An error was thrown\",\n                            severity: SEVERITY.ERROR,\n                        },\n                    }))\n                console.error(e);\n            }\n\n            if (isMountedRef.current)\n                setState(s => ({\n                    ...s,\n                    visits: visits,\n                    openBackdrop: false,\n                    snackbar: {\n                        open: true,\n                        message: \"Dati recuperati correttamente\",\n                        severity: SEVERITY.SUCCESS,\n                    }\n                }));\n        }\n        isMountedRef.current = true;\n        if (patientId !== undefined)\n            fetchData(patientId, currentLanguage);\n        return () => isMountedRef.current = false\n    }, [patientId, state.nextUpdate, currentLanguage, fetchPatientVisits])\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setState(s => ({ ...s, snackbar: { ...s.snackbar, open: false, } }))\n    }\n\n    const classes = useStyles();\n\n    // React.useEffect(() => {\n\n    //     if (state.confirmDeletion) {\n    //         handleClickRemoveVisit(state.visitId);\n    //     }\n\n    // }, [state.confirmDeletion, state.visitId]);\n\n    const handleClose = (confirmation) => {\n        if (confirmation) {\n\n            setState(state => {\n                return ({ ...state, confirmDeletion: true, open: false, });\n            });\n\n        } else {\n            setState(state => ({ ...state, confirmDeletion: false, open: false, }))\n        }\n    }\n\n    const handleClickDeletePatientVisit = async () => {\n        try {\n\n            const { selectedVisit } = state;\n\n            await deletePatientVisit(patientId, selectedVisit);\n\n            setState((state) => {\n                const { visits, selectedVisit } = state;\n                return ({\n                    ...state,\n                    visits: visits.filter((visit, i) => visit.visitId !== selectedVisit),\n                    visitName: \"\",\n                    createdAt: \"\",\n                    selectedVisit: \"\",\n                });\n            });\n\n        } catch (err) {\n            console.error(err);\n        }\n\n    }\n\n    const handleClickModifyPatientVisit = async () => {\n\n        try {\n\n            const { visitName, createdAt, selectedVisit } = state;\n\n            let data = {\n                visitName: visitName,\n                createdAt: Timestamp.fromDate(new Date(createdAt)),\n            }\n\n            await modifyPatientVisit(patientId, selectedVisit, data);\n\n            setState(state => {\n                let { visits, createdAt, visitName, selectedVisit } = state;\n\n                visits.forEach((visit, i) => {\n                    if (visit.visitId === selectedVisit) {\n                        visit.createdAt = createdAt;\n                        visit.visitName = visitName;\n                    }\n                });\n\n                return ({\n                    ...state,\n                    visits: visits,\n                    visitName: \"\",\n                    createdAt: \"\",\n                    selectedVisit: \"\",\n                });\n\n            })\n\n        } catch (err) {\n            console.error(err);\n        }\n\n    }\n\n    const handleClickRemoveVisit = async (visitId) => {\n\n        // const { confirmDeletion } = state;\n\n        // if (!confirmDeletion) {\n        //     // if false pop up the confirm deletion dialog\n        //     return (\n        //         setState(state => ({ ...state, open: true, visitId: visitId, }))\n        //     )\n        // }\n\n        try {\n\n            await removePatientVisit(patientId, visitId);\n\n            // remove manually from the list instead of reload data from remote\n            setState((state) => ({\n                ...state,\n                visits: state.visits.filter(visit => visit.visitId !== visitId),\n            }));\n\n        } catch (e) {\n            console.error(e);\n        }\n\n    }\n\n    const handleClickNewVisit = async () => {\n        const { visitName, visits, createdAt } = state;\n\n        if (visitName.length === 0 || createdAt.length === 0) {\n            return setState(s => ({ ...s, errorVisitName: true }))\n        }\n\n        try {\n\n            // creation of the new visit\n            let visit = {\n                visitName: visitName,\n                createdAt: Timestamp.fromDate(new Date(createdAt)),\n            }\n\n            // new visit starting from the previous\n            let prevVisit = visits[visits.length - 1]\n\n            let data = {\n                // 1 personal data\n                patient_age: prevVisit?.patient_age,\n                patient_occupation: prevVisit?.patient_occupation,\n                educational_qualification: prevVisit?.educational_qualification,\n                marital_status: prevVisit?.marital_status,\n                ethnicity: prevVisit?.ethnicity,\n                consent: prevVisit?.consent,\n                gender: prevVisit?.gender,\n                // 2 family history\n                selection: prevVisit?.selection,\n                over: prevVisit?.over,\n                // 3 physical examination\n                weight: prevVisit?.weight,\n                height: prevVisit?.height,\n                bmi: prevVisit?.bmi,\n                neck_circumference: prevVisit?.neck_circumference,\n                waist_circumference: prevVisit?.waist_circumference,\n                heart_tones: prevVisit?.heart_tones,\n                heart_murmur: prevVisit?.heart_murmur,\n                heart_rate: prevVisit?.heart_rate,\n                mv_chest: prevVisit?.mv_chest,\n                pathological_noises: prevVisit?.pathological_noises,\n                murphy_blumberg: prevVisit?.murphy_blumberg,\n                palpable_liver: prevVisit?.palpable_liver,\n                palpable_thyroid: prevVisit?.palpable_thyroid,\n                declining_edema: prevVisit?.declining_edema,\n                carotid_murmurs: prevVisit?.carotid_murmurs,\n                min_blood_pressure: prevVisit?.min_blood_pressure,\n                max_blood_pressure: prevVisit?.max_blood_pressure,\n                abdomen: prevVisit?.abdomen,\n                // 4 pathological history\n                eating: prevVisit?.eating,\n                mood: prevVisit?.mood,\n                anxiety: prevVisit?.anxiety,\n                psychosis: prevVisit?.psychosis,\n                personality: prevVisit?.personality,\n                inprogress_pathologies: prevVisit?.inprogress_pathologies,\n                previous_pathologies: prevVisit?.previous_pathologies,\n                // 5 allergies\n                foods: prevVisit?.foods,\n                foods_text: prevVisit?.foods_text,\n                medications: prevVisit?.medications,\n                medications_text: prevVisit?.medications_text,\n            }\n\n            /*if (!Object.keys(data).map(k => data[k]).includes(undefined)) {\n                // in this way does't work ...some field could be undefined\n                visit = { ...visit, ...data }\n            }*/\n\n            Object.keys(data).forEach(key => {\n                if (typeof data[key] !== 'undefined') {\n                    visit[key] = data[key]\n                }\n            });\n\n            await createPatientVisit(patientId, visit);\n\n            setState(s => {\n                return ({\n                    ...s,\n                    nextUpdate: s.nextUpdate + 1,\n                    visitName: \"\",\n                    createdAt: \"\",\n                    errorVisitName: false,\n                    selectedVisit: \"\",\n                })\n            });\n\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    const goToPatientVisit = (visitId, visitName) => {\n        history.push(`/${patientId}/visit/${visitId}`, {\n            titlePage: visitName,\n            patientId: patientId,\n        });\n    }\n\n\n    const handleListItemClick = (event, visitId) => {\n\n        setState(state => {\n            let { selectedVisit } = state;\n            if (selectedVisit === visitId) {\n                return ({\n                    ...state,\n                    createdAt: \"\",\n                    visitName: \"\",\n                    selectedVisit: \"\",\n                });\n            }\n            let { visits } = state;\n            let visitFound = visits.find((visit, i) => visitId === visit.visitId);\n            if (visitFound !== undefined)\n                return ({\n                    ...state,\n                    createdAt: visitFound.createdAt,\n                    visitName: visitFound.visitName,\n                    selectedVisit: visitId,\n                });\n            else\n                return ({\n                    ...state,\n                    createdAt: \"\",\n                    visitName: \"\",\n                    selectedVisit: \"\",\n                });\n        });\n\n    }\n\n    const { openBackdrop } = state;\n\n    if (openBackdrop) {\n        return (\n            <Backdrop className={classes.backdrop} open={openBackdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    const { visits, visitName, errorVisitName, snackbar, } = state;\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Paper className={classes.paper} elevation={2}>\n\n                <Grid container spacing={2} justifyContent=\"flex-start\" direction='row' alignItems='center'>\n                    <Snackbar\n                        anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n                        open={snackbar.open}\n                        onClose={handleSnackbarClose}\n                        autoHideDuration={5000}\n                    //message={snackbar.message}\n                    >\n                        <Alert severity={snackbar.severity} onClose={handleSnackbarClose}>\n                            <AlertTitle>{state.snackbar.message}</AlertTitle>\n                        </Alert>\n                    </Snackbar>\n                    <ConfirmDeletionDialog\n                        id=\"confirm-deletion\"\n                        keepMounted\n                        open={state.open}\n                        onClose={handleClose}\n                    />\n                    <Grid item xs={5}>\n                        <TextField\n                            id=\"visitName\"\n                            value={visitName}\n                            error={errorVisitName}\n                            name=\"visitName\"\n                            label={strings.visit.visit_name}\n                            variant=\"outlined\"\n                            fullWidth\n                            // required\n                            margin=\"none\"\n                            size=\"small\"\n                            onChange={({ target }) => setState(s => ({ ...s, [target.name]: target.value }))}\n                        />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <TextField\n                            id=\"visitDate\"\n                            value={state.createdAt}\n                            // error={errorVisitName}\n                            name=\"createdAt\"\n                            label=\"Data visita\"\n                            variant=\"outlined\"\n                            fullWidth\n                            type=\"date\"\n                            // required\n                            margin=\"none\"\n                            size=\"small\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            onChange={({ target }) => {\n                                // let newDate = target.value;\n                                // console.log(newDate);\n                                setState(s => {\n                                    return ({ ...s, [target.name]: target.value });\n                                });\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={4}>\n                        <ButtonGroup size=\"large\" color=\"primary\" fullWidth>\n                            <Button endIcon={<AddIcon />} onClick={handleClickNewVisit}>\n                                Nuova\n                            </Button>\n\n                            <Button endIcon={<CreateIcon />} onClick={handleClickModifyPatientVisit}\n                                disabled={state.selectedVisit === \"\"}>\n                                Modifica\n                            </Button>\n\n                            <Button endIcon={<DeleteIcon />} onClick={handleClickDeletePatientVisit}\n                                disabled={state.selectedVisit === \"\"}>\n                                Elimina\n                            </Button>\n                        </ButtonGroup>\n                    </Grid>\n                    {/* <Grid item xs>\n                        <Button\n                            startIcon={<AddCircleIcon />}\n                            onClick={handleClickNewVisit}\n                            size=\"large\"\n                            color=\"primary\"\n                        >\n                            {strings.visit.new_visit}\n                        </Button>\n                    </Grid> */}\n                    <Grid item xs={12}>\n                        {/* <Menu\n                            id=\"long-menu\"\n                            anchorEl={anchorEl}\n                            keepMounted\n                            open={Boolean(anchorEl)}\n                            onClose={handleCloseLongMenu}\n\n                        >\n                            <MenuItem>\n                                <ListItemIcon>\n                                    <CreateIcon fontSize='small' />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Modifica\" />\n                            </MenuItem>\n\n                            <MenuItem\n                                button\n                                onClick={() => {\n                                    handleCloseLongMenu();\n                                    handleClickRemoveVisit(state.visitId);\n                                }}>\n                                <ListItemIcon>\n                                    <DeleteIcon fontSize='small' />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Elimina\" />\n                            </MenuItem>\n\n                        </Menu> */}\n                        <List dense>\n                            {visits.length ? (\n                                visits.map(({ visitId, visitName, icon, ...rest }, i) => {\n                                    let selectedVisit = state.selectedVisit === visitId;\n                                    return (\n                                        <ListItem\n                                            key={visitId}\n                                            button\n                                            selected={selectedVisit}\n                                            onClick={(e) => handleListItemClick(e, visitId)}\n                                            // component=\"a\"\n                                            // href={`/${patientId}/visit/${visitId}`}\n                                            dense\n                                        >\n                                            <ListItemIcon>\n                                                <FolderIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary={visitName} secondary={rest?.createdAt || \"\"} />\n                                            <ListItemSecondaryAction>\n                                                <IconButton edge=\"end\" onClick={() => goToPatientVisit(visitId, visitName)}>\n                                                    <KeyboardArrowRightIcon />\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    )\n                                })\n                            ) : (\n                                <ListItem>\n                                    <ListItemIcon>\n                                        <FolderIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary={strings.visit.no_visits} />\n                                </ListItem>\n                            )}\n                        </List>\n                    </Grid>\n                </Grid>\n            </Paper>\n\n        </Container>\n    )\n}\n","import React from 'react'\nimport { Typography } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles'\n\nexport default withStyles({\n    root: {}\n})(({ children, ...props }) => {\n    return (\n        <Typography {...props} variant=\"h5\" color=\"textPrimary\" gutterBottom>\n            {children}\n        </Typography>\n    )\n})","import React from \"react\";\nimport {\n    Grid,\n    Button,\n    Backdrop,\n    CircularProgress,\n    Paper as MuiPaper,\n    List,\n    ListItem,\n    ListSubheader,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    Switch,\n    ListItemText,\n    Checkbox,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from \"../../Typography/TitleStepper\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { useAuth } from \"../../../contexts/AuthContext\";\nimport strings from '../../Language/'\nimport PropTypes from 'prop-types'\n\n\nconst useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    paper: {\n        borderRadius: 24,\n        padding: theme.spacing(3),\n    }\n}));\n\nconst Paper = withStyles((theme) => ({\n    root: {\n        borderRadius: '10px',\n        padding: theme.spacing(1),\n        backgroundColor: \"#f1f1f1\"\n    }\n}))(({ children, ...props }) => (<MuiPaper {...props} variant=\"outlined\">{children}</MuiPaper>))\n\nexport function FamilyHistory(props) {\n    const { pageName, onClickBack, onClickNext, patient, visit } = props;\n    const [state, setState] = React.useState({\n        obesity: {\n            // father: false,\n            // mother: false,\n            // siblings: false,\n            // uncle: false,\n            // grandparents: false,\n        },\n        diabetes: {},\n        heartAttack: {},\n        hypertension: {},\n        dyslipidemia: {},\n        thyroid: {},\n        backdrop: false,\n    })\n\n    const [checked, setChecked] = React.useState({\n        obesity: {\n            // father: false,\n            // mother: false,\n            // siblings: false,\n            // uncle: false,\n            // grandparents: false,\n        },\n        diabetes: {},\n        heartAttack: {},\n        hypertension: {},\n        dyslipidemia: {},\n        thyroid: {},\n    })\n\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n\n    const fetchData = React.useCallback((visitId, patientId) => pullPatientVisitData(visitId, patientId), [pullPatientVisitData])\n\n    const handleBackClick = () => onClickBack()\n\n    const classes = useStyles()\n\n    const handleNextClick = async () => {\n\n        const data = {\n            selection: {\n                obesity: checked.obesity,\n                diabetes: checked.diabetes,\n                heartAttack: checked.heartAttack,\n                hypertension: checked.hypertension,\n                dyslipidemia: checked.dyslipidemia,\n                thyroid: checked.thyroid,\n            },\n            over: {\n                obesity: state.obesity,\n                diabetes: state.diabetes,\n                heartAttack: state.heartAttack,\n                hypertension: state.hypertension,\n                dyslipidemia: state.dyslipidemia,\n                thyroid: state.thyroid,\n            }\n        }\n\n        try {\n            await pushPatientVisitData(data, visit, patient);\n        } catch (error) {\n            console.error(error);\n        }\n        onClickNext();\n    }\n\n    const isMountedRef = React.useRef(null)\n\n    React.useEffect(() => {\n        const _fetchData = async (visit, patient) => {\n\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdrop: true }));\n\n            try {\n\n                const snapshot = await fetchData(visit, patient);\n\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n\n                    if (isMountedRef.current) {\n                        setChecked(s => ({\n                            ...s,\n                            ...result.selection,\n                        }));\n                        setState(s => ({\n                            ...s,\n                            ...result.over,\n                            backdrop: false,\n                        }));\n                    }\n                } else {\n                    if (isMountedRef.current) {\n                        setState(s => ({ ...s, backdrop: false }))\n                    }\n                }\n            } catch (error) {\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdrop: false }))\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        if (visit !== undefined && patient !== undefined)\n            _fetchData(visit, patient)\n        return () => (isMountedRef.current = false)\n    }, [visit, patient, fetchData]);\n\n    const { backdrop } = state\n    if (backdrop) {\n        return (\n            <Backdrop className={classes.backdrop} open={state.backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    // !use this template to easily change the ages, string label always will be the same\n    const under_55 = strings.formatString(strings.visit.under, { age: 55 });\n    const over_55 = strings.formatString(strings.visit.over, { age: 55 });\n\n    const parts = [\n        {\n            value: \"father\",\n            label: strings.relationship.father,\n        }, {\n            value: \"mother\",\n            label: strings.relationship.mother,\n        }, {\n            value: \"siblings\",\n            label: strings.relationship.siblings,\n        }, {\n            value: \"uncle\",\n            label: strings.relationship.uncle,\n        }, {\n            value: \"grandparents\",\n            label: strings.relationship.grandparents,\n        }\n    ]\n\n    return (\n        <Grid\n            id=\"visit-step\"\n            container\n            direction=\"row\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n            spacing={3}\n        >\n            <Grid item xs={12} id=\"title-page-name\">\n                <TitleStepper>{pageName}</TitleStepper>\n            </Grid>\n            <Grid item xs={4}>\n                <Paper>\n                    <List subheader={<ListSubheader>{strings.patient.overweight}</ListSubheader>}>\n                        {parts.map(({ value, label }) => {\n                            const under_obesity = !!(state.obesity[value]);\n                            const enable_obesity = !!(checked.obesity[value]);\n                            return (\n                                <ListItem key={value}>\n                                    <ListItemIcon>\n                                        <Checkbox\n                                            edge=\"start\"\n                                            checked={enable_obesity}\n                                            name={value}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setChecked((s) => {\n                                                    const { obesity } = s;\n                                                    return ({ ...s, obesity: { ...obesity, [name]: checked } })\n                                                })\n                                            }}\n                                            tabIndex={-1}\n                                            disableRipple\n                                        />\n                                    </ListItemIcon>\n                                    <ListItemText primary={label} secondary={under_obesity ? under_55 : over_55} />\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            name={value}\n                                            disabled={!enable_obesity}\n                                            checked={under_obesity}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setState(s => {\n                                                    const { obesity } = s;\n                                                    return ({ ...s, obesity: { ...obesity, [name]: checked } })\n                                                })\n                                            }}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n                    </List>\n                </Paper>\n            </Grid>\n            <Grid item xs={4}>\n                <Paper>\n                    <List subheader={<ListSubheader>{strings.patient.diabetes}</ListSubheader>}>\n                        {parts.map(({ value, label }) => {\n                            const under_diabetes = !!(state.diabetes[value]);\n                            const enable_diabetes = !!(checked.diabetes[value]);\n                            return (\n                                <ListItem key={value}>\n                                    <ListItemIcon>\n                                        <Checkbox\n                                            edge=\"start\"\n                                            name={value}\n                                            checked={enable_diabetes}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setChecked((s) => {\n                                                    const { diabetes } = s;\n                                                    return ({ ...s, diabetes: { ...diabetes, [name]: checked } })\n                                                })\n                                            }}\n                                            tabIndex={-1}\n                                            disableRipple\n                                        />\n                                    </ListItemIcon>\n                                    <ListItemText primary={label} secondary={under_diabetes ? under_55 : over_55} />\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            name={value}\n                                            disabled={!enable_diabetes}\n                                            checked={under_diabetes}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setState(s => {\n                                                    const { diabetes } = s;\n                                                    return ({ ...s, diabetes: { ...diabetes, [name]: checked } })\n                                                })\n                                            }}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n                    </List>\n                </Paper>\n            </Grid>\n            <Grid item xs={4}>\n                <Paper>\n                    <List subheader={<ListSubheader>{strings.patient.heartAttack}</ListSubheader>}>\n                        {parts.map(({ value, label }) => {\n                            const under_heartAttack = !!(state.heartAttack[value]);\n                            const enable_heartAttack = !!(checked.heartAttack[value]);\n                            return (\n                                <ListItem key={value}>\n                                    <ListItemIcon>\n                                        <Checkbox\n                                            edge=\"start\"\n                                            checked={enable_heartAttack}\n                                            name={value}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setChecked((s) => {\n                                                    const { heartAttack } = s;\n                                                    return ({ ...s, heartAttack: { ...heartAttack, [name]: checked } })\n                                                })\n                                            }}\n                                            tabIndex={-1}\n                                            disableRipple\n                                        />\n                                    </ListItemIcon>\n                                    <ListItemText primary={label} secondary={under_heartAttack ? under_55 : over_55} />\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            disabled={!enable_heartAttack}\n                                            name={value}\n                                            checked={under_heartAttack}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setState(s => {\n                                                    const { heartAttack } = s;\n                                                    return ({ ...s, heartAttack: { ...heartAttack, [name]: checked } })\n                                                })\n                                            }}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n\n                    </List>\n                </Paper>\n            </Grid>\n            <Grid item xs={4}>\n                <Paper>\n                    <List subheader={<ListSubheader>{strings.patient.hypertension}</ListSubheader>}>\n                        {parts.map(({ value, label }) => {\n                            const under_hypertension = !!(state.hypertension[value])\n                            const enable_hypertension = !!(checked.hypertension[value])\n                            return (\n                                <ListItem key={value}>\n                                    <ListItemIcon>\n                                        <Checkbox\n                                            edge=\"start\"\n                                            checked={enable_hypertension}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setChecked((s) => {\n                                                    const { hypertension } = s;\n                                                    return ({ ...s, hypertension: { ...hypertension, [name]: checked } })\n                                                })\n                                            }}\n                                            name={value}\n                                            tabIndex={-1}\n                                            disableRipple\n                                        />\n                                    </ListItemIcon>\n                                    <ListItemText primary={label} secondary={under_hypertension ? under_55 : over_55} />\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            disabled={!enable_hypertension}\n                                            checked={under_hypertension}\n                                            name={value}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setState(s => {\n                                                    const { hypertension } = s;\n                                                    return ({ ...s, hypertension: { ...hypertension, [name]: checked } })\n                                                })\n                                            }}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n\n                    </List>\n                </Paper>\n            </Grid>\n            <Grid item xs={4}>\n                <Paper>\n                    <List subheader={<ListSubheader>{strings.patient.dyslipidemia}</ListSubheader>}>\n                        {parts.map(({ value, label }) => {\n                            const under_dyslipidemia = !!(state.dyslipidemia[value]);\n                            const enable_dyslipidemia = !!(checked.dyslipidemia[value]);\n                            return (\n                                <ListItem key={value}>\n                                    <ListItemIcon>\n                                        <Checkbox\n                                            edge=\"start\"\n                                            checked={enable_dyslipidemia}\n                                            name={value}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setChecked((s) => {\n                                                    const { dyslipidemia } = s;\n                                                    return ({ ...s, dyslipidemia: { ...dyslipidemia, [name]: checked } })\n                                                })\n                                            }}\n                                            tabIndex={-1}\n                                            disableRipple\n                                        />\n                                    </ListItemIcon>\n                                    <ListItemText primary={label} secondary={under_dyslipidemia ? under_55 : over_55} />\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            disabled={!enable_dyslipidemia}\n                                            checked={under_dyslipidemia}\n                                            name={value}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setState(s => {\n                                                    const { dyslipidemia } = s;\n                                                    return ({ ...s, dyslipidemia: { ...dyslipidemia, [name]: checked } })\n                                                })\n                                            }}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n                    </List>\n                </Paper>\n            </Grid>\n            <Grid item xs={4}>\n                <Paper>\n                    <List subheader={<ListSubheader>{strings.patient.thyroid}</ListSubheader>}>\n                        {parts.map(({ value, label }) => {\n                            const under_thyroid = !!(state.thyroid[value]);\n                            const enable_thyroid = !!(checked.thyroid[value]);\n                            return (\n                                <ListItem key={value}>\n                                    <ListItemIcon>\n                                        <Checkbox\n                                            edge=\"start\"\n                                            checked={enable_thyroid}\n                                            name={value}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setChecked((s) => {\n                                                    const { thyroid } = s;\n                                                    return ({ ...s, thyroid: { ...thyroid, [name]: checked } })\n                                                })\n                                            }}\n                                            tabIndex={-1}\n                                            disableRipple\n                                        />\n                                    </ListItemIcon>\n                                    <ListItemText primary={label} secondary={under_thyroid ? under_55 : over_55} />\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            disabled={!enable_thyroid}\n                                            name={value}\n                                            checked={under_thyroid}\n                                            onChange={({ target }) => {\n                                                const { name, checked } = target;\n                                                setState(s => {\n                                                    const { thyroid } = s;\n                                                    return ({ ...s, thyroid: { ...thyroid, [name]: checked } })\n                                                })\n                                            }}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n                    </List>\n                </Paper>\n            </Grid>\n\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant=\"contained\">\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid >\n    )\n}\n\nFamilyHistory.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nFamilyHistory.defaultProps = {\n    pageName: strings.visit.steps.family_history,\n    visit: \"first\",\n}","import React from \"react\";\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nexport default function RadioButtonsGroup({ name, value, values, onChange }) {\n    const [state, setState] = React.useState({\n        name: name,\n        value: value,\n    })\n\n    React.useEffect(() => {\n        setState((s) => {\n            return ({ ...s, value: value, name: name });\n        })\n    }, [value, name]);\n\n    const handleChange = ({ target }) => {\n        const value = target.value;\n        const name = target.name;\n        onChange(name, value);\n        console.debug(name, value);\n        setState((s) => ({ ...s, value: value, name: name }))\n\n    }\n\n    return (\n        <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Sesso</FormLabel>\n            <RadioGroup\n                aria-label=\"gender\"\n                name={state.name}\n                value={state.value}\n                onChange={handleChange}\n                row\n            >\n                {\n                    values.map(({ value, label, color }) => (\n                        <FormControlLabel\n                            key={value}\n                            value={value}\n                            control={\n                                <Radio\n                                    color={color}\n                                />\n                            }\n                            label={label}\n                        />\n                    ))\n                }\n                {\n                    /*<FormControlLabel\n                        value=\"female\"\n                        control={\n                            <Radio\n                                color='secondary'\n                            />\n                        }\n                        label=\"Female\"\n                    />\n                    <FormControlLabel\n                        value=\"male\"\n                        control={\n                            <Radio\n                                color=\"primary\"\n                            />}\n                        label=\"Male\"\n                    />*/\n                }\n            </RadioGroup>\n        </FormControl>\n    );\n}","import React from \"react\";\nimport { FormControlLabel, Checkbox, FormGroup } from '@material-ui/core'\nexport default function CheckboxComponent({ name, label, checked, onChange }) {\n    const handleChange = (e) => {\n        onChange(e.target.name, e.target.checked)\n    }\n    return (\n        <FormGroup row>\n            <FormControlLabel\n                control={<Checkbox\n                    checked={checked}\n                    name={name}\n                    onChange={handleChange}\n                    color=\"primary\"\n                />}\n                label={label}\n                labelPlacement=\"end\"\n            />\n        </FormGroup>\n    )\n}","import React from \"react\";\nimport {\n    Grid,\n    TextField,\n    Backdrop,\n    CircularProgress,\n    Button,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from '../../Typography/TitleStepper'\nimport { makeStyles } from '@material-ui/core/styles';\nimport RadioButtonsGroup from \"../../RadioGroup\";\nimport CheckboxComponent from \"../../Checkbox\";\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { useAuth } from \"../../../contexts/AuthContext\";\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    paper: {\n        borderRadius: 24,\n        padding: theme.spacing(3),\n    }\n}))\n\nexport function PersonalData(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [state, setState] = React.useState({\n        patientId: patient,\n        patientAge: 0,\n        gender: \"male\",\n        patientOccupation: '',\n        educationalQualification: '',\n        maritalStatus: '',\n        ethnicity: '',\n        consent: false,\n        backdrop: false,\n    })\n\n    const classes = useStyles()\n\n    const {\n        pushPatientVisitData,\n        pullPatientVisitData,\n        currentLanguage,\n    } = useAuth();\n\n    const handleGenderChange = (name, value) => setState(s => ({ ...s, [name]: value }))\n\n    const handleSwitchChange = (name, value) => setState((s) => ({ ...s, [name]: value }))\n\n    const handleTextfieldChange = ({ target }) => setState((s) => ({ ...s, [target.name]: target.value }))\n\n    const isMountedRef = React.useRef(null);\n\n    React.useEffect(() => {\n        const fetchData = async (id) => {\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdrop: true }));\n\n            try {\n                const snapshot = await pullPatientVisitData(visit, id);\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n                    if (isMountedRef.current) {\n                        setState(s => {\n                            // console.debug('gender', result.gender);\n                            return ({\n                                ...s,\n                                backdrop: false,\n                                // patientId: result.patientId,\n                                patientAge: result.patient_age || '',\n                                gender: result.gender || \"male\",\n                                patientOccupation: result.patient_occupation || '',\n                                educationalQualification: result.educational_qualification || '',\n                                maritalStatus: result.marital_status || '',\n                                ethnicity: result.ethnicity || '',\n                                consent: result.consent || false,\n                            })\n                        })\n                    }\n                } else\n                    if (isMountedRef.current)\n                        setState(s => ({ ...s, backdrop: false }))\n\n            } catch (error) {\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, backdrop: false }))\n                }\n                console.error(error)\n            }\n        }\n        isMountedRef.current = true;\n        fetchData(patient);\n        return () => (isMountedRef.current = false)\n    }, [visit, patient, pullPatientVisitData]);\n\n    const handleNextClick = async () => {\n\n        const {\n            // patientId,\n            patientAge,\n            patientOccupation,\n            educationalQualification,\n            maritalStatus,\n            ethnicity,\n            consent,\n            gender,\n        } = state;\n\n        const data = {\n            // patientId: patientId,\n            patient_age: parseInt(patientAge),\n            patient_occupation: patientOccupation,\n            educational_qualification: educationalQualification,\n            marital_status: maritalStatus,\n            ethnicity: ethnicity,\n            consent: consent,\n            gender: gender,\n        }\n\n        try {\n            await pushPatientVisitData(data, visit, patient);\n\n            onClickNext();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const handleBackClick = () => onClickBack()\n\n    const { backdrop } = state;\n\n    if (backdrop) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Grid\n            id=\"visit-step\"\n            container\n            spacing={1}\n            direction=\"row\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n        >\n            <Grid item xs={12} id=\"title-page-name\">\n                <TitleStepper>\n                    {pageName}\n                </TitleStepper>\n            </Grid>\n            <Grid item xs={4}>\n                <TextField\n                    id=\"patient-id\"\n                    name=\"patientId\"\n                    value={state.patientId}\n                    InputProps={{ readOnly: true }}\n                    fullWidth\n                    variant=\"outlined\"\n                    type=\"text\"\n                    label=\"Patient ID\"\n                    margin=\"normal\"\n                    helperText=\"(non modificabile)\"\n                />\n\n                <TextField\n                    id=\"patient-age\"\n                    name=\"patientAge\"\n                    label={strings.measures.age}\n                    value={state.patientAge}\n                    onChange={handleTextfieldChange}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                />\n\n                <TextField\n                    id=\"patient-occupation\"\n                    name=\"patientOccupation\"\n                    label={strings.patient.occupation}\n                    value={state.patientOccupation}\n                    onChange={handleTextfieldChange}\n                    type=\"text\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                />\n\n                <TextField\n                    id=\"educational-qualification\"\n                    name=\"educationalQualification\"\n                    label={strings.patient.educational_qualification}\n                    value={state.educationalQualification}\n                    onChange={handleTextfieldChange}\n                    type=\"text\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                />\n\n                <TextField\n                    id=\"marital-status\"\n                    name=\"maritalStatus\"\n                    label={strings.patient.marital_status}\n                    value={state.maritalStatus}\n                    onChange={handleTextfieldChange}\n                    type=\"text\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                />\n\n                <TextField\n                    id=\"ethnicity\"\n                    name=\"ethnicity\"\n                    label={strings.patient.ethnicity}\n                    value={state.ethnicity}\n                    onChange={handleTextfieldChange}\n                    type=\"text\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <RadioButtonsGroup\n                    name=\"gender\"\n                    value={state.gender}\n                    values={[\n                        { value: \"male\", label: strings.general.male, color: 'primary' },\n                        { value: \"female\", label: strings.general.female, color: 'secondary' }\n                    ]}\n                    onChange={handleGenderChange}\n                />\n\n                <CheckboxComponent\n                    label={strings.general.consent}\n                    name=\"consent\"\n                    checked={state.consent}\n                    onChange={handleSwitchChange}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <ButtonGroup variant=\"contained\">\n                    <Button\n                        disabled\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={<ArrowBackIosIcon />}\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        disabled={!state.consent}\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={<ArrowForwardIosIcon />}\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n\n    )\n}\n\nPersonalData.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nPersonalData.defaultProps = {\n    pageName: strings.visit.steps.data_patient,\n    visit: \"first\",\n}","import React from \"react\"\nimport {\n    Grid,\n    FormControl,\n    FormGroup,\n    FormControlLabel,\n    Checkbox,\n    TextField,\n    Select,\n    MenuItem,\n    InputLabel,\n    Button,\n    Typography,\n    Backdrop,\n    CircularProgress,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from \"../../Typography/TitleStepper\";\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { useAuth } from \"../../../contexts/AuthContext\"\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}));\n\nexport function PhysiologicalAnamnesis(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [state, setState] = React.useState({\n        smoker: false,\n        exSmoker: false,\n        alcoholic: false,\n        useLaxatives: false,\n        incontinence: false,\n        snoring: false,\n        insomnia: false,\n        menopause: false,\n        pregnancies: false,\n        abortions: false,\n        amountCigarettes: 0,\n        alvo: '',\n        menstrualCycles: '',\n        backdrop: false,\n    })\n\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n\n    const handleBackClick = () => {\n        onClickBack();\n    }\n\n    const handleNextClick = async () => {\n        const {\n            smoker,\n            exSmoker,\n            alcoholic,\n            useLaxatives,\n            incontinence,\n            snoring,\n            insomnia,\n            menopause,\n            pregnancies,\n            abortions,\n            amountCigarettes,\n            alvo,\n            menstrualCycles,\n        } = state;\n        const data = {\n            smoker: smoker,\n            ex_smoker: exSmoker,\n            alcoholic: alcoholic,\n            use_laxatives: useLaxatives,\n            incontinence: incontinence,\n            snoring: snoring,\n            insomnia: insomnia,\n            menopause: menopause,\n            pregnancies: pregnancies,\n            abortions: abortions,\n            amount_cigarettes: parseInt(amountCigarettes, 10),\n            alvo: alvo,\n            menstrual_cycles: menstrualCycles,\n        }\n        try {\n            await pushPatientVisitData(data, visit, patient);\n            //console.debug(result);\n            onClickNext();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const handleChange = ({ target }) => setState(state => ({ ...state, [target.name]: target.checked }))\n\n    const handleSelectChange = ({ target }) => setState(s => ({ ...s, [target.name]: target.value }))\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const fetchData = async (patientId) => {\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, backdrop: true }))\n            }\n            try {\n\n                const result = await pullPatientVisitData(visit, patientId);\n                if (result.exists()) {\n                    const data = result.data();\n                    if (isMountedRef.current) {\n                        setState(s => ({\n                            ...s,\n                            backdrop: false,\n                            smoker: data.smoker || false,\n                            exSmoker: data.ex_smoker || false,\n                            alcoholic: data.alcoholic || false,\n                            useLaxatives: data.use_laxatives || false,\n                            incontinence: data.incontinence || false,\n                            snoring: data.snoring || false,\n                            insomnia: data.insomnia || false,\n                            menopause: data.menopause || false,\n                            pregnancies: data.pregnancies || false,\n                            abortions: data.abortions || false,\n                            amountCigarettes: data.amount_cigarettes || 0,\n                            alvo: data.alvo || '',\n                            menstrualCycles: data.menstrual_cycles || '',\n                        }))\n                    }\n                } else {\n                    if (isMountedRef.current) {\n                        setState(s => ({ ...s, backdrop: false }))\n                    }\n                }\n\n            } catch (error) {\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, backdrop: false }))\n                }\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true\n        fetchData(patient);\n        return () => (isMountedRef.current = false)\n    }, [patient])\n\n    const classes = useStyles()\n\n    const {\n        smoker,\n        exSmoker,\n        alcoholic,\n        useLaxatives,\n        incontinence,\n        snoring,\n        insomnia,\n        menopause,\n        pregnancies,\n        abortions,\n        backdrop\n    } = state\n\n    if (backdrop) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Grid\n            id=\"visit-step\"\n            container\n            spacing={1}\n            direction=\"row\"\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\">\n            <Grid item xs={12} id=\"title-page-name\">\n                <TitleStepper>{pageName}</TitleStepper>\n            </Grid>\n            <Grid item xs={12}>\n                <FormControl component=\"fieldset\" fullWidth>\n                    {/* <FormLabel component=\"legend\">Anamnesi Fisiologica</FormLabel> */}\n                    <FormGroup aria-label=\"direction\" row>\n                        <FormControlLabel\n                            control={<Checkbox checked={smoker} onChange={handleChange} name=\"smoker\" color=\"primary\" />}\n                            label={strings.patient.smoker}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={exSmoker} onChange={handleChange} name=\"exSmoker\" color=\"primary\" />}\n                            label={strings.patient.smoker_ex}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={alcoholic} onChange={handleChange} name=\"alcoholic\" color=\"primary\" />}\n                            label={strings.patient.alcoholic}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={useLaxatives} onChange={handleChange} name=\"useLaxatives\" color=\"primary\" />}\n                            label={strings.patient.laxatives_uses}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={incontinence} onChange={handleChange} name=\"incontinence\" color=\"primary\" />}\n                            label={strings.patient.incontinence}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={snoring} onChange={handleChange} name=\"snoring\" color=\"primary\" />}\n                            label={strings.patient.snoring}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={insomnia} onChange={handleChange} name=\"insomnia\" color=\"primary\" />}\n                            label={strings.patient.insomnia}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={menopause} onChange={handleChange} name=\"menopause\" color=\"primary\" />}\n                            label={strings.patient.menopause}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={pregnancies} onChange={handleChange} name=\"pregnancies\" color=\"primary\" />}\n                            label={strings.patient.pregnancies}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={abortions} onChange={handleChange} name=\"abortions\" color=\"primary\" />}\n                            label={strings.patient.abortions}\n                        />\n                    </FormGroup>\n                    {/* <FormHelperText>Be careful</FormHelperText> */}\n                </FormControl>\n            </Grid>\n            <Grid item xs={4}>\n                <TextField\n                    margin=\"normal\"\n                    id=\"amount-cigarettes\"\n                    name=\"amountCigarettes\"\n                    value={state.amountCigarettes}\n                    type=\"number\"\n                    onChange={({ target }) => setState(s => ({ ...s, [target.name]: target.value }))}\n                    disabled={!(state.smoker)}\n                    label={strings.patient.amount_cigarettes}\n                    fullWidth\n                    variant=\"outlined\"\n                />\n                <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n                    <InputLabel id=\"alvo-select-label\">\n                        Alvo\n                    </InputLabel>\n                    <Select\n                        labelId=\"alvo-select-label\"\n                        id=\"alvo-select\"\n                        value={state.alvo}\n                        name=\"alvo\"\n                        label={strings.patient.alvo}\n                        onChange={handleSelectChange}\n                        fullWidth\n                    >\n                        <MenuItem value=\"\">\n                            <em>-</em>\n                        </MenuItem>\n                        <MenuItem key=\"key-menu-item-stiptico\" id=\"item-menu-stiptico\" value={'stiptico'} >\n                            {\"stiptico\"}\n                        </MenuItem>\n                        <MenuItem key=\"key-menu-item-regolare\" id=\"item-menu-regolare\" value={'regolare'} >\n                            {\"regolare\"}\n                        </MenuItem>\n                        <MenuItem key=\"key-menu-item-diarroico\" id=\"item-menu-diarroico\" value={'diarroico'} >\n                            {\"diarroico\"}\n                        </MenuItem>\n                        <MenuItem key=\"key-menu-item-alterno\" id=\"item-menu-alterno\" value={'alterno'} >\n                            {\"alterno\"}\n                        </MenuItem>\n                    </Select>\n                </FormControl>\n                <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n                    <InputLabel id=\"menstrual-cycles-select-label\">\n                        {strings.patient.menstrual_cycles}\n                    </InputLabel>\n                    <Select\n                        labelId=\"menstrual-cycles-select-label\"\n                        id=\"menstrual-cycles-select\"\n                        value={state.menstrualCycles}\n                        name=\"menstrualCycles\"\n                        label={strings.patient.menstrual_cycles}\n                        onChange={handleSelectChange}\n                        fullWidth\n                    >\n                        <MenuItem value=\"\">\n                            <em>-</em>\n                        </MenuItem>\n\n                        <MenuItem key=\"key-menu-item-regolari\" id=\"item-menu-regolari\" value={'regolari'} >\n                            {\"regolari\"}\n                        </MenuItem>\n                        <MenuItem key=\"key-menu-item-irregolari\" id=\"item-menu-irregolari\" value={'irregolari'} >\n                            {\"irregolari\"}\n                        </MenuItem>\n                        <MenuItem key=\"key-menu-item-amenorrea\" id=\"item-menu-amenorrea\" value={'amenorrea'} >\n                            {\"amenorrea\"}\n                        </MenuItem>\n                    </Select>\n\n                </FormControl>\n            </Grid>\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant=\"contained\">\n\n\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n    )\n}\n\nPhysiologicalAnamnesis.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nPhysiologicalAnamnesis.defaultProps = {\n    pageName: strings.visit.steps.family_history,\n    visit: \"first\",\n}","import React from 'react'\nimport { Typography } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles'\n\nexport default withStyles({\n    root: {}\n})(({ children, ...props }) => {\n    return (\n        <Typography {...props} variant=\"h6\" color=\"textSecondary\" gutterBottom>\n            {children}\n        </Typography>\n    )\n})","import React, { useCallback, useState } from \"react\";\nimport {\n    Dialog,\n    DialogTitle,\n    IconButton,\n    DialogContent,\n    DialogActions,\n    DialogContentText,\n    Typography,\n    Button,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    TextField,\n} from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/Close';\nimport PropTypes from 'prop-types';\nimport { useAuth } from \"../../../contexts/AuthContext\";\nimport strings from \"../../Language/\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: 0,\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    }\n}));\n\nexport default function SelectPathologiesDialog(props) {\n    const { onClose, open, data, ...other } = props;\n\n    const [values, setValues] = React.useState([]);\n    const [pathologies, setPathologies] = React.useState([]);\n    const classes = useStyles();\n\n    const [pathologyName, setPathologyName] = useState(\"\");\n\n    const { getPathologies, removePathology, createPathology, newDocRef } = useAuth();\n\n    const deletePathology = async (id) => {\n        try {\n\n            let res = await removePathology(id);\n            console.debug(res);\n            setPathologies(pats => {\n                return pats.filter(p => p.id !== id);\n            })\n\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const addPathology = async () => {\n\n        try {\n            // const value = pathologyName\n            //     .toLowerCase()\n            //     .trim()\n            //     .split(\" \")\n            //     .join(\"-\");\n\n            let docRef = newDocRef(\"pathologies\");\n\n            await createPathology(docRef, {\n                name: pathologyName,\n                description: \"\",\n            });\n\n            setPathologies((pats) => {\n                return [...pats, {\n                    name: pathologyName,\n                    description: \"\",\n                    id: docRef.id,\n                }];\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const fetchPathologies = useCallback(() => getPathologies(), []);\n\n    const isMountedRef = React.useRef(null);\n\n    React.useEffect(() => {\n        if (!open) {\n            setValues(() => data.map(({ id }) => id))\n        }\n\n        const fetchData = async () => {\n            try {\n\n                let result = await fetchPathologies();\n                const pathologies = result.docs.map(doc => ({ ...doc.data(), id: doc.id }))\n                if (isMountedRef.current) {\n                    setPathologies(() => pathologies);\n                }\n\n            } catch (error) {\n                console.error(error)\n            }\n        }\n\n        isMountedRef.current = true;\n        fetchData();\n        return () => (isMountedRef.current = false)\n    }, [open, data, fetchPathologies])\n\n    const handleToggle = (id) => {\n        const currIndex = values.indexOf(id);\n        const newChecked = [...values]\n        if (currIndex === -1) {\n            // add element if not present\n            newChecked.push(id);\n        } else {\n            // remove element\n            newChecked.splice(currIndex, 1);\n        }\n        setValues(() => newChecked)\n    }\n\n    const handleCancel = () => onClose()\n\n    const handleSelect = () => {\n        const result = []\n        values.forEach(k => {\n            const item = pathologies.find(({ id }) => id === k)\n            if (item !== undefined) {\n                result.push(item)\n            }\n        })\n        onClose(result)\n    }\n\n    const handleNewPathologyNameChange = ({ target }) => setPathologyName(() => target.value)\n\n    return (\n        <Dialog\n            maxWidth=\"xs\"\n            fullWidth\n            {...other}\n            open={open}\n            scroll=\"paper\"\n        >\n            <DialogTitle className={classes.root}>\n                <Typography variant=\"button\" color=\"textPrimary\">{strings.visit.pathologies}</Typography>\n                <IconButton className={classes.closeButton} onClick={handleCancel}>\n                    <CloseIcon />\n                </IconButton>\n            </DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText>{strings.visit.select_pathologies}</DialogContentText>\n                <TextField\n                    id=\"pathology-name\"\n                    name=\"pathologyName\"\n                    type=\"text\"\n                    variant=\"outlined\"\n                    // size=\"small\"\n                    margin=\"normal\"\n                    fullWidth\n                    label=\"Nome Nuova Patologia\"\n                    helperText=\"Aggiungi nuova patologia se non in elenco\"\n                    onChange={handleNewPathologyNameChange}\n                    value={pathologyName}\n                />\n                <Button\n                    variant=\"text\"\n                    fullWidth\n                    color=\"default\"\n                    onClick={() => addPathology()}\n                    disabled={!pathologyName.trim().length}\n                >\n                    Conferma\n                </Button>\n                <List dense>\n                    {pathologies.map(({ id, name }) => (\n                        <ListItem\n                            key={id}\n                            //name={value}\n                            button\n                            onClick={() => handleToggle(id)}\n                        >\n                            <ListItemIcon>\n                                <Checkbox\n                                    edge=\"start\"\n                                    checked={values.indexOf(id) !== -1}\n                                    disableRipple\n                                    tabIndex={-1}\n                                />\n                            </ListItemIcon>\n                            <ListItemText primary={name} secondary={id} />\n                            {/* <ListItemSecondaryAction>\n                                <IconButton edge=\"end\" aria-label=\"delete\" onClick={(e) => deletePathology(id)}>\n                                    <CloseIcon />\n                                </IconButton>\n                            </ListItemSecondaryAction> */}\n                        </ListItem>\n                    ))}\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"text\" color=\"secondary\" onClick={() => handleCancel()}>\n                    {strings.general.cancel}\n                </Button>\n                <Button color=\"primary\" variant=\"contained\" onClick={() => handleSelect()}>\n                    {strings.general.choose}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nSelectPathologiesDialog.propTypes = {\n    data: PropTypes.array.isRequired\n}\n\nSelectPathologiesDialog.defaultProps = {\n    data: []\n}","import React from \"react\";\nimport {\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    Button,\n    Typography,\n    CircularProgress,\n    Backdrop,\n    FormGroup,\n    FormControlLabel,\n    Checkbox,\n    Divider,\n    FormControl,\n    ButtonGroup,\n} from '@material-ui/core';\nimport SubTittleStepper from \"../../Typography/SubTittleStepper\";\nimport { makeStyles } from '@material-ui/core/styles'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport SelectPathologiesDialog from \"../../Dialog/Pathologies\"\n//import SwitchLabels from \"../../Switch\";\nimport TitleStepper from \"../../Typography/TitleStepper\";\nimport { useAuth } from \"../../../contexts/AuthContext\";\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        maxHeight: 435,\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    root: {\n        '& hr': {\n            margin: theme.spacing(0, 0.5),\n        },\n    }\n}))\n\nexport function PathologicalHistory(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [state, setState] = React.useState({\n        open: false,\n        previous_pathologies: [],\n        previous_dialog_open: false,\n        inprogress_pathologies: [],\n        inprogess_dialog_open: false,\n        // selectedItems: [{ id: '1', value: \"title\", description: 'description 1', name: \"nome1\" }],\n        backdrop: false,\n        pathologies: []\n    })\n\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n\n    const fetchData = React.useCallback((visitId, patientId) => pullPatientVisitData(visitId, patientId), [pullPatientVisitData]);\n\n    const [checked, setChecked] = React.useState({\n        eating: false,\n        mood: false,\n        anxiety: true,\n        psychosis: true,\n        personality: false,\n    })\n\n    const handleBackClick = () => onClickBack()\n\n    const handleNextClick = async () => {\n\n        const {\n            eating,\n            mood,\n            anxiety,\n            psychosis,\n            personality,\n        } = checked\n\n        const {\n\n            previous_pathologies,\n            inprogress_pathologies\n\n        } = state\n\n        const data = {\n            eating: eating,\n            mood: mood,\n            anxiety: anxiety,\n            psychosis: psychosis,\n            personality: personality,\n            inprogress_pathologies: inprogress_pathologies,\n            previous_pathologies: previous_pathologies\n        }\n\n        try {\n            await pushPatientVisitData(data, visit, patient);\n\n            onClickNext();\n        } catch (error) {\n            console.error(error);\n        }\n\n    }\n\n    // const handleSwitchChange = (name, value) => setChecked(s => ({ ...s, [name]: value }))\n    const handleChange = ({ target }) => setChecked(state => ({ ...state, [target.name]: target.checked }))\n\n    const handleClosePrevious = (value) => {\n        if (value) {\n            setState(s => ({ ...s, previous_dialog_open: false, previous_pathologies: value }))\n        } else {\n            setState((s) => ({ ...s, previous_dialog_open: false }))\n        }\n    }\n\n    const handleCloseInprogress = (value) => {\n        if (value) {\n            setState(s => ({ ...s, inprogess_dialog_open: false, inprogress_pathologies: value }))\n        } else {\n            setState(s => ({ ...s, inprogess_dialog_open: false }))\n        }\n    }\n\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const _fetchData = async (visitId, patientId) => {\n            if (isMountedRef.current) {\n                setState((s) => ({ ...s, backdrop: true }))\n            }\n            try {\n                // const [snapshot1, snapshot2] = await Promise.all([pullPatientVisitData(patient), getPathologies()])\n                // const pathologies = snapshot2.docs.map(doc => ({ ...doc.data(), id: doc.id }))\n                const result = await fetchData(visitId, patientId);\n                if (result.exists()) {\n                    const data = result.data();\n                    if (isMountedRef.current) {\n\n                        setChecked(c => ({\n                            ...c,\n                            eating: data.eating || false,\n                            mood: data.mood || false,\n                            anxiety: data.anxiety || false,\n                            psychosis: data.psychosis || false,\n                            personality: data.personality || false,\n                        }))\n                        setState(s => ({\n                            ...s,\n                            backdrop: false,\n                            previous_pathologies: data.previous_pathologies || [],\n                            inprogress_pathologies: data.inprogress_pathologies || [],\n                            // pathologies: pathologies\n                        }))\n                    }\n                } else {\n                    if (isMountedRef.current) {\n                        setState(s => ({ ...s, backdrop: false }))\n                    }\n                }\n            } catch (error) {\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, backdrop: false }))\n                }\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        if (visit !== undefined && patient !== undefined)\n            _fetchData(visit, patient);\n        return () => (isMountedRef.current = false)\n    }, [visit, patient, fetchData]);\n\n    const handleClickPrevious = () => setState(s => ({ ...s, previous_dialog_open: true }))\n    const handleClickInProgress = () => setState(s => ({ ...s, inprogess_dialog_open: true }))\n\n    const classes = useStyles()\n\n    const { backdrop } = state;\n    if (backdrop) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    const {\n        eating,\n        mood,\n        anxiety,\n        psychosis,\n        personality,\n    } = checked;\n\n    return (\n        <>\n            <SelectPathologiesDialog\n                key={\"inprogess_pathologies_dialog\"}\n                data={state.inprogress_pathologies}\n                open={state.inprogess_dialog_open}\n                onClose={handleCloseInprogress}\n                classes={{\n                    paper: classes.paper,\n                }}\n            />\n            <SelectPathologiesDialog\n                key=\"previous_pathologies_dialog\"\n                data={state.previous_pathologies}\n                open={state.previous_dialog_open}\n                onClose={handleClosePrevious}\n                classes={{\n                    paper: classes.paper,\n                }}\n            />\n            {/* <AddMoreOptions /> */}\n            <Grid id=\"visit-stop\" container direction=\"row\" spacing={1} className={classes.root} justifyContent=\"flex-start\" alignItems=\"flex-start\">\n                <Grid item xs={12} id=\"title-page-name\">\n                    <TitleStepper>{pageName}</TitleStepper>\n                </Grid>\n                <Grid item xs={12}>\n                    <FormControl component=\"fieldset\" fullWidth>\n                        <FormGroup aria-label=\"direction\" row>\n                            <FormControlLabel\n                                control={<Checkbox checked={eating} onChange={handleChange} name=\"eating\" color=\"primary\" />}\n                                label={strings.visit.eating_disorder}\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={mood} onChange={handleChange} name=\"mood\" color=\"primary\" />}\n                                label={strings.visit.mood_disturbance}\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={anxiety} onChange={handleChange} name=\"anxiety\" color=\"primary\" />}\n                                label={strings.visit.anxiety_disorder}\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={psychosis} onChange={handleChange} name=\"psychosis\" color=\"primary\" />}\n                                label={strings.visit.psychosis}\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={personality} onChange={handleChange} name=\"personality\" color=\"primary\" />}\n                                label={strings.visit.personality_disorder}\n                            />\n                        </FormGroup>\n                    </FormControl>\n                    {/* <SwitchLabels\n                        name=\"eating\"\n                        checked={checked.eating}\n                        onChange={handleSwitchChange}\n                        label=\"Disturbo alimentare\"\n                    />\n                    <SwitchLabels\n                        name=\"mood\"\n                        checked={checked.mood}\n                        onChange={handleSwitchChange}\n                        label=\"Disturbo dell'umore\"\n                    />\n                    <SwitchLabels\n                        name=\"anxiety\"\n                        checked={checked.anxiety}\n                        onChange={handleSwitchChange}\n                        label=\"Disturbo di ansia\"\n                    />\n                    <SwitchLabels\n                        name=\"psychosis\"\n                        checked={checked.psychosis}\n                        onChange={handleSwitchChange}\n                        label=\"Psicosi\"\n                    />\n                    <SwitchLabels\n                        name=\"personality\"\n                        checked={checked.personality}\n                        onChange={handleSwitchChange}\n                        label=\"Disturbo di personalita'\"\n                    /> */}\n                </Grid>\n                {/* <Divider flexItem orientation=\"vertical\" /> */}\n                <Grid item xs={12}>\n                    <SubTittleStepper>\n                        {strings.visit.pathologies}\n                    </SubTittleStepper>\n                </Grid>\n                <Grid item xs={2}>\n                    <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n                        {strings.visit.pathologies_inprogress}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleClickInProgress}\n                    >\n                        {strings.general.choose}\n                    </Button>\n                    <List dense>\n                        {state.inprogress_pathologies.length ? state.inprogress_pathologies.map((item, i) => (\n                            <ListItem\n                                //divider={i < state.inprogress_pathologies.length - 1}\n                                divider\n                                key={item.id}\n                                name={item.value}\n                            // style={{ backgroundColor: \"#f1f1f1\", margin: \"8px\" }}\n                            // onClick={(e) => console.debug(e.target.name)}\n                            >\n                                <ListItemText primary={item.name} />\n                            </ListItem>\n                        )) : (\n                            <ListItem>\n                                <ListItemText primary={strings.general.empty_list} />\n                            </ListItem>\n                        )}\n                    </List>\n\n                </Grid>\n                {/* <Divider flexItem orientation=\"vertical\" /> */}\n                <Grid item xs={2}>\n                    <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n                        {strings.visit.pathologies_previous}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleClickPrevious}\n                    >\n                        {strings.general.choose}\n                    </Button>\n                    <List dense>\n                        {state.previous_pathologies.length ? state.previous_pathologies.map((item) => (\n                            <ListItem\n                                //divider={i < state.previous_pathologies.length - 1}\n                                divider\n                                key={item.id}\n                                name={item.value}\n                            // style={{ backgroundColor: \"#f1f1f1\", margin: \"8px\" }}\n                            // onClick={(e) => console.debug(e.target.name)}\n                            >\n                                <ListItemText primary={item.name} />\n                            </ListItem>\n                        )) : (\n                            <ListItem>\n                                <ListItemText primary={strings.general.empty_list} />\n                            </ListItem>\n                        )}\n                    </List>\n                </Grid>\n\n                <Grid\n                    item\n                    xs={12}\n                //style={{ display: 'flex', justifyContent: 'flex-end', }}\n                >\n                    <ButtonGroup variant=\"contained\">\n                        <Button\n                            //variant=\"outlined\"\n                            //color=\"default\"\n                            //size=\"small\"\n                            onClick={handleBackClick}\n                            startIcon={\n                                <ArrowBackIosIcon />\n                            }\n                        //style={{ margin: 8 }}\n                        >\n                            {strings.general.back}\n                        </Button>\n                        <Button\n                            //variant=\"contained\"\n                            //color=\"primary\"\n                            //size=\"small\"\n                            onClick={handleNextClick}\n                            endIcon={\n                                <ArrowForwardIosIcon />\n                            }\n                        //style={{ margin: 8 }}\n                        >\n                            {strings.general.next}\n                        </Button>\n                    </ButtonGroup>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n\nPathologicalHistory.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nPathologicalHistory.defaultProps = {\n    pageName: strings.visit.steps.pathological_anamnesis,\n    visit: \"first\",\n}\n","import React from 'react'\nimport {\n    Grid,\n    TextField,\n    FormControl,\n    FormGroup,\n    FormControlLabel,\n    Checkbox,\n    Button,\n    Backdrop,\n    CircularProgress,\n    Typography,\n    ButtonGroup,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { useAuth } from '../../../contexts/AuthContext'\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\n\nexport function PhysicalExamination(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [state, setState] = React.useState({\n        weight: 0,\n        height: 0,\n        bmi: '',\n        neck_circumference: 0,\n        waist_circumference: 0,\n        heart_tones: false,\n        heart_murmur: false,\n        heart_rate: 0,\n        mv_chest: true,\n        pathological_noises: true,\n        murphy_blumberg: false,\n        palpable_liver: true,\n        palpable_thyroid: true,\n        declining_edema: false,\n        carotid_murmurs: false,\n        min_blood_pressure: 0,\n        max_blood_pressure: 0,\n        backdrop: false,\n        abdomen: \"\",\n        waist_circumference_narrowest_point: 0,\n        waist_circumference_iliac_spine_height: 0,\n    })\n\n    const classes = useStyles()\n\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth()\n\n    const handleBackClick = () => onClickBack()\n\n    const handleNextClick = async () => {\n        try {\n            await pushPatientVisitData({\n                weight: state.weight,\n                height: state.height,\n                bmi: state.bmi,\n                neck_circumference: state.neck_circumference,\n                waist_circumference: state.waist_circumference,\n                heart_tones: state.heart_tones,\n                heart_murmur: state.heart_murmur,\n                heart_rate: state.heart_rate,\n                mv_chest: state.mv_chest,\n                pathological_noises: state.pathological_noises,\n                murphy_blumberg: state.murphy_blumberg,\n                palpable_liver: state.palpable_liver,\n                palpable_thyroid: state.palpable_thyroid,\n                declining_edema: state.declining_edema,\n                carotid_murmurs: state.carotid_murmurs,\n                min_blood_pressure: state.min_blood_pressure,\n                max_blood_pressure: state.max_blood_pressure,\n                abdomen: state.abdomen,\n                waist_circumference_narrowest_point: state.waist_circumference_narrowest_point,\n                waist_circumference_iliac_spine_height: state.waist_circumference_iliac_spine_height,\n\n            }, visit, patient);\n            onClickNext();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const handleTextfieldChange = ({ target }) => {\n        setState((s) => ({ ...s, [target.name]: target.value }))\n    }\n    // const handleSelectChange = (e) => setState(s => ({ ...s, [e.target.name]: e.target.value }))\n\n    const handleChange = (event) => {\n        setState(state => ({ ...state, [event.target.name]: event.target.checked }))\n    }\n\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const fetchData = async () => {\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, backdrop: true }))\n            }\n            try {\n                // console.debug('patient id', patient);\n\n                const result = await pullPatientVisitData(visit, patient)\n                if (result.exists()) {\n                    const data = result.data();\n                    if (isMountedRef.current) {\n                        setState(s => ({\n                            ...s,\n                            weight: data.weight || 0,\n                            height: data.height || 0,\n                            bmi: data.bmi || '',\n                            neck_circumference: data.neck_circumference || 0,\n                            waist_circumference: data.waist_circumference || 0,\n                            heart_tones: data.heart_tones || false,\n                            heart_murmur: data.heart_murmur || false,\n                            heart_rate: data.heart_rate || 0,\n                            mv_chest: data.mv_chest || false,\n                            pathological_noises: data.pathological_noises || false,\n                            murphy_blumberg: data.murphy_blumberg || false,\n                            palpable_liver: data.palpable_liver || false,\n                            palpable_thyroid: data.palpable_thyroid || false,\n                            declining_edema: data.declining_edema || false,\n                            carotid_murmurs: data.carotid_murmurs || false,\n                            min_blood_pressure: data.min_blood_pressure || 0,\n                            max_blood_pressure: data.max_blood_pressure || 0,\n                            backdrop: false,\n                            abdomen: data.abdomen || \"\",\n                            waist_circumference_iliac_spine_height: data.waist_circumference_iliac_spine_height || 0,\n                            waist_circumference_narrowest_point: data.waist_circumference_narrowest_point || 0,\n                        }))\n                    }\n                } else {\n                    if (isMountedRef.current) {\n                        setState(s => ({ ...s, backdrop: false }))\n                    }\n                }\n\n            } catch (error) {\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, backdrop: false }))\n                }\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        fetchData();\n        return () => (isMountedRef.current = false)\n    }, [patient, visit])\n\n    const {\n        heart_tones,\n        heart_murmur,\n        mv_chest,\n        pathological_noises,\n        murphy_blumberg,\n        palpable_liver,\n        palpable_thyroid,\n        declining_edema,\n        carotid_murmurs,\n        backdrop,\n    } = state;\n\n    if (backdrop) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Grid\n            id=\"visit-step\"\n            container\n            direction=\"row\"\n            spacing={1}\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\"\n        >\n\n            <Grid item xs={12}>\n                <Typography variant=\"h5\" color=\"textPrimary\" gutterBottom>\n                    {pageName}\n                </Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <TextField\n                    id=\"weight\"\n                    name=\"weight\"\n                    label={strings.measures.weight}\n                    helperText=\"kg\"\n                    onChange={handleTextfieldChange}\n                    value={state.weight}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"height\"\n                    name=\"height\"\n                    label={strings.measures.height}\n                    helperText=\"cm\"\n                    onChange={handleTextfieldChange}\n                    value={state.height}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"bmi\"\n                    name=\"bmi\"\n                    label=\"BMI\"\n                    // helperText=\"cm\"\n                    onChange={handleTextfieldChange}\n                    value={state.bmi}\n                    type=\"text\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"neck_circumference\"\n                    name=\"neck_circumference\"\n                    label={strings.visit.neck_circumference}\n                    helperText=\"cm\"\n                    onChange={handleTextfieldChange}\n                    value={state.neck_circumference}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"waist_circumference\"\n                    name=\"waist_circumference\"\n                    label={strings.visit.waist_circumference}\n                    //helperText=\"cm\"\n                    onChange={handleTextfieldChange}\n                    value={state.waist_circumference}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n\n                <TextField\n                    id=\"waist-circumference-narrowest-point\"\n                    name=\"waist_circumference_narrowest_point\"\n                    label={strings.visit.waist_circumference}\n                    helperText={strings.visit.narrowest_point}\n                    onChange={handleTextfieldChange}\n                    value={state.waist_circumference_narrowest_point}\n                    type=\"number\"\n                    fullWidth\n                    variant='outlined'\n                    margin='normal'\n                />\n\n                <TextField\n                    id=\"waist-circumference-narrowest-point\"\n                    name=\"waist_circumference_iliac_spine_height\"\n                    label={strings.visit.waist_circumference}\n                    helperText={strings.visit.iliac_spine_height}\n                    onChange={handleTextfieldChange}\n                    value={state.waist_circumference_iliac_spine_height}\n                    type=\"number\"\n                    fullWidth\n                    variant='outlined'\n                    margin='normal'\n                />\n\n                <TextField\n                    id=\"abdomen\"\n                    name=\"abdomen\"\n                    label=\"Addome\"\n                    onChange={handleTextfieldChange}\n                    value={state.abdomen}\n                    type=\"text\"\n                    fullWidth\n                    variant='outlined'\n                    //size=\"small\"\n                    margin='normal'\n                />\n                <TextField\n                    id=\"min_blood_pressure\"\n                    name=\"min_blood_pressure\"\n                    label=\"Pressione arteriosa MIN\"\n                    helperText=\"mm Hg\"\n                    onChange={handleTextfieldChange}\n                    value={state.min_blood_pressure}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n\n                {/* </Grid>\n            <Grid item xs={4}> */}\n                <TextField\n                    id=\"max_blood_pressure\"\n                    name=\"max_blood_pressure\"\n                    label=\"Pressione arteriosa MAX\"\n                    helperText=\"mm Hg\"\n                    onChange={handleTextfieldChange}\n                    value={state.max_blood_pressure}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                {/* </Grid>\n            <Grid item xs={4}> */}\n                <TextField\n                    id=\"heart_rate\"\n                    name=\"heart_rate\"\n                    label=\"Frequenza cardiaca\"\n                    helperText=\"nr. battiti/min\"\n                    onChange={handleTextfieldChange}\n                    value={state.heart_rate}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n            </Grid>\n            <Grid item>\n                <FormControl component=\"fieldset\" fullWidth>\n                    {/* <FormLabel component=\"legend\">Titolo selezione</FormLabel> */}\n                    <FormGroup aria-label='direction'>\n                        <FormControlLabel\n                            control={<Checkbox checked={heart_tones} onChange={handleChange} name=\"heart_tones\" color=\"primary\" />}\n                            label=\"Toni cardiaci validi e ritmici\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={heart_murmur} onChange={handleChange} name=\"heart_murmur\" color=\"primary\" />}\n                            label=\"Soffio cardiaco\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={mv_chest} onChange={handleChange} name=\"mv_chest\" color=\"primary\" />}\n                            label=\"MV al torace\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={pathological_noises} onChange={handleChange} name=\"pathological_noises\" color=\"primary\" />}\n                            label=\"Rumori patologici\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={murphy_blumberg} onChange={handleChange} name=\"murphy_blumberg\" color=\"primary\" />}\n                            label=\"Segni di Murphy e Blumberg\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={palpable_liver} onChange={handleChange} name=\"palpable_liver\" color=\"primary\" />}\n                            label=\"Fegato palpabile\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={palpable_thyroid} onChange={handleChange} name=\"palpable_thyroid\" color=\"primary\" />}\n                            label=\"Tiroide palpabile\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={declining_edema} onChange={handleChange} name=\"declining_edema\" color=\"primary\" />}\n                            label=\"Edemi declivi\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={carotid_murmurs} onChange={handleChange} name=\"carotid_murmurs\" color=\"primary\" />}\n                            label=\"Soffi carotidei\"\n                        />\n                    </FormGroup>\n                    {/* <FormHelperText>Si/no</FormHelperText> */}\n                </FormControl>\n            </Grid>\n            <Grid item xs={4}>\n\n            </Grid>\n\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant=\"contained\" size=\"large\">\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n    )\n}\n\nPhysicalExamination.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nPhysicalExamination.defaultProps = {\n    pageName: strings.visit.steps.physical_examination,\n    visit: \"first\"\n}","import React from 'react'\nimport {\n    Grid,\n    TextField,\n    Button,\n    CircularProgress,\n    Backdrop,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from '../../Typography/TitleStepper';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useAuth } from '../../../contexts/AuthContext'\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n// import { Timestamp } from '@firebase/firestore'\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\nexport function BloodChemistryTest(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [state, setState] = React.useState({\n        date: '2020-01-01',\n        hb: '',\n        cholesterol: 0,\n        hdl: 0,\n        ldl: 0,\n        triglycerides: 0,\n        glycemia: 0,\n        glycated_hb: 0,\n        uric_acid: 0,\n        creatininemia: 0,\n        alt: '',\n        ggt: '',\n        tsh: '',\n        backdrop: false,\n    })\n\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n\n    const fetchData = React.useCallback((visitId, patientId) => pullPatientVisitData(visitId, patientId), [pullPatientVisitData]);\n\n    const classes = useStyles()\n\n    const handleBackClick = () => onClickBack()\n\n    const handleNextClick = async () => {\n        const {\n            hb,\n            cholesterol,\n            hdl,\n            ldl,\n            triglycerides,\n            glycemia,\n            glycated_hb,\n            uric_acid,\n            creatininemia,\n            alt,\n            ggt,\n            tsh,\n            date,\n        } = state;\n\n        const data = {\n            hb: hb,\n            cholesterol: parseInt(cholesterol, 10),\n            hdl: parseInt(hdl, 10),\n            ldl: parseInt(ldl, 10),\n            triglycerides: parseInt(triglycerides, 10),\n            glycemia: parseInt(glycemia, 10),\n            glycated_hb: parseInt(glycated_hb, 10),\n            uric_acid: parseInt(uric_acid, 10),\n            creatininemia: parseInt(creatininemia, 10),\n            alt: alt,\n            ggt: ggt,\n            tsh: tsh,\n            exam_date: date,\n        }\n\n        try {\n            await pushPatientVisitData(data, visit, patient);\n            onClickNext();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const _fetchData = async (visit, patient) => {\n\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdrop: true }))\n\n            try {\n                const snapshot = await fetchData(visit, patient);\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n                    if (isMountedRef.current) {\n                        setState(s => {\n                            return ({\n                                ...s,\n                                backdrop: false,\n                                hb: result.hb || '',\n                                cholesterol: result.cholesterol || 0,\n                                hdl: result.hdl || 0,\n                                ldl: result.ldl || 0,\n                                triglycerides: result.triglycerides || 0,\n                                glycemia: result.glycemia || 0,\n                                glycated_hb: result.glycated_hb || 0,\n                                uric_acid: result.uric_acid || 0,\n                                creatininemia: result.creatininemia || 0,\n                                alt: result.alt || '',\n                                ggt: result.ggt || '',\n                                tsh: result.tsh || '',\n                                date: result.exam_date || '2020-01-01',\n                            })\n                        })\n                    }\n                } else\n                    if (isMountedRef.current)\n                        setState(s => ({ ...s, backdrop: false }))\n\n            } catch (error) {\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdrop: false }))\n                console.error(error);\n            }\n\n        }\n        isMountedRef.current = true;\n        if (patient !== undefined && visit !== undefined)\n            _fetchData(visit, patient);\n        return () => (isMountedRef.current = false)\n    }, [visit, patient, fetchData])\n\n    const handleTextfieldChange = ({ target }) => setState((s) => ({ ...s, [target.name]: target.value }))\n\n    const { backdrop } = state\n    if (backdrop) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n    return (\n        <Grid\n            id=\"visit-step\"\n            container\n            direction=\"row\"\n            spacing={1}\n            justifyContent=\"flex-start\"\n            alignItems=\"flex-start\">\n            <Grid item xs={12}>\n                <TitleStepper>\n                    {pageName}\n                </TitleStepper>\n            </Grid>\n            <Grid item xs={3}>\n                <TextField\n                    id=\"date\"\n                    name=\"date\"\n                    // label=\"Data\"\n                    helperText=\"Data\"\n                    onChange={handleTextfieldChange}\n                    value={state.date}\n                    type=\"date\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"hb\"\n                    name=\"hb\"\n                    label=\"Hb\"\n                    helperText=\"g/dl\"\n                    onChange={handleTextfieldChange}\n                    value={state.hb}\n                    type=\"text\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"cholesterol\"\n                    name=\"cholesterol\"\n                    label=\"Colosterolo totale\"\n                    helperText=\"mg/dl\"\n                    onChange={handleTextfieldChange}\n                    value={state.cholesterol}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"hdl\"\n                    name=\"hdl\"\n                    label=\"HDL\"\n                    helperText=\"mg/dl\"\n                    onChange={handleTextfieldChange}\n                    value={state.hdl}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"uric_acid\"\n                    name=\"uric_acid\"\n                    label=\"Acido urico\"\n                    helperText=\"mg/dl\"\n                    onChange={handleTextfieldChange}\n                    value={state.uric_acid}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n            </Grid>\n            <Grid item xs={3}>\n                <TextField\n                    id=\"ldl\"\n                    name=\"ldl\"\n                    label=\"LDL\"\n                    helperText=\"mg/dl\"\n                    onChange={handleTextfieldChange}\n                    value={state.ldl}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"triglycerides\"\n                    name=\"triglycerides\"\n                    label=\"Trigliceridi\"\n                    helperText=\"mg/dl\"\n                    onChange={handleTextfieldChange}\n                    value={state.triglycerides}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"glycemia\"\n                    name=\"glycemia\"\n                    label=\"Glicemia\"\n                    helperText=\"mg/dl\"\n                    onChange={handleTextfieldChange}\n                    value={state.glycemia}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"glycated_hb\"\n                    name=\"glycated_hb\"\n                    label=\"Hb glicata\"\n                    helperText=\"mmol/mol Hb\"\n                    onChange={handleTextfieldChange}\n                    value={state.glycated_hb}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n            </Grid>\n            <Grid item xs={3}>\n                <TextField\n                    id=\"creatininemia\"\n                    name=\"creatininemia\"\n                    label=\"Creatininemia\"\n                    helperText=\"mg/dl\"\n                    onChange={handleTextfieldChange}\n                    value={state.creatininemia}\n                    type=\"number\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"alt\"\n                    name=\"alt\"\n                    label=\"Alt\"\n                    helperText=\"U/I\"\n                    onChange={handleTextfieldChange}\n                    value={state.alt}\n                    type=\"text\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"ggt\"\n                    name=\"ggt\"\n                    label=\"GGT\"\n                    helperText=\"U/I\"\n                    onChange={handleTextfieldChange}\n                    value={state.ggt}\n                    type=\"text\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"tsh\"\n                    name=\"tsh\"\n                    label=\"TSH\"\n                    helperText=\"U/I\"\n                    onChange={handleTextfieldChange}\n                    value={state.tsh}\n                    type=\"text\"\n                    fullWidth\n                    variant=\"outlined\"\n                    //size=\"small\"\n                    margin=\"normal\"\n                />\n            </Grid>\n            <Grid\n                item\n                xs={12}\n            //style={{   display: 'flex',  justifyContent: 'flex-end',  }}\n            >\n                <ButtonGroup variant='contained'>\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n    )\n}\n\nBloodChemistryTest.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nBloodChemistryTest.defaultProps = {\n    pageName: strings.visit.steps.blood_chemistry,\n    visit: \"first\",\n}","import React from 'react'\nimport {\n    Grid,\n    TextField,\n    Button,\n    CircularProgress,\n    Backdrop,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from '../../Typography/TitleStepper'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useAuth } from '../../../contexts/AuthContext';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\nexport function MetabolismCalculation(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [state, setState] = React.useState({\n        daily: '',\n        tot: '',\n        backdrop: false,\n    })\n\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n    const handleBackClick = () => onClickBack()\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const fetchData = async () => {\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdrop: true }))\n            try {\n\n                const snapshot = await pullPatientVisitData(visit, patient);\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n                    if (isMountedRef.current) {\n                        setState(s => {\n                            return ({\n                                ...s,\n                                backdrop: false,\n                                daily: result.daily_energy_expenditure || \"\",\n                                tot: result.tot_energy_expenditure || \"\",\n                            })\n                        })\n                    }\n\n                } else\n                    if (isMountedRef.current)\n                        setState(s => ({ ...s, backdrop: false }))\n\n\n            } catch (error) {\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdrop: false }))\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        fetchData();\n        return () => (isMountedRef.current = false)\n    }, [])\n\n    const handleNextClick = async () => {\n        try {\n            const {\n                daily,\n                tot\n            } = state;\n\n            const data = {\n                daily_energy_expenditure: daily,\n                tot_energy_expenditure: tot\n            }\n\n            await pushPatientVisitData(data, visit, patient)\n            onClickNext();\n\n        } catch (error) {\n            console.error(error)\n        }\n\n    }\n    const classes = useStyles()\n    const handleTextfieldChange = ({ target }) => setState(s => ({ ...s, [target.name]: target.value }))\n    const {\n        backdrop\n    } = state;\n\n    if (backdrop)\n        return (\n            <Backdrop className={classes.backdrop} open={backdrop} timeout={1000}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    return (\n        <Grid container direction=\"row\" justifyContent=\"flex-start\" alignItems=\"flex-start\" spacing={1}>\n            <Grid item xs={12}>\n                <TitleStepper>\n                    Calcolo metabolismo basale tramite formula di Harris and Benedict\n                </TitleStepper>\n            </Grid>\n            <Grid item xs={4}>\n                <TextField\n                    id=\"daily-energy-expenditure\"\n                    name=\"daily\"\n                    type=\"text\"\n                    label=\"Dispendio energetico\"\n                    helperText=\"giornaliero a riposo (kcal/die)\"\n                    value={state.daily}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"tot-energy-expenditure\"\n                    name=\"tot\"\n                    type=\"text\"\n                    label=\"Dispendio energetico\"\n                    helperText=\"totale (kcal/die)\"\n                    value={state.tot}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n            </Grid>\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant='contained'>\n\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n\n            </Grid>\n        </Grid>\n    )\n}\n\nMetabolismCalculation.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string\n}\n\nMetabolismCalculation.defaultProps = {\n    pageName: strings.visit.steps.calculation_metabolism,\n    visit: \"first\"\n}","import React from 'react'\nimport {\n    Grid,\n    TextField,\n    Button,\n    CircularProgress,\n    Backdrop,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from '../../Typography/TitleStepper';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useAuth } from '../../../contexts/AuthContext';\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\n\nexport function BioimpedanceAnalysis(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [state, setState] = React.useState({\n        bodyFat: 0,\n        bodyWater: 0,\n        leanMass: 0,\n        backdrop: false,\n    })\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n    const fetchData = React.useCallback((visit, patient) => pullPatientVisitData(visit, patient), [pullPatientVisitData])\n    const handleBackClick = () => onClickBack()\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const _fetchData = async (visit, patient) => {\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdrop: true }))\n            try {\n                const snapshot = await fetchData(visit, patient)\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n                    if (isMountedRef.current) {\n                        setState(s => {\n                            return ({\n                                ...s,\n                                backdrop: false,\n                                bodyFat: result.body_fat || \"\",\n                                bodyWater: result.body_water || \"\",\n                                leanMass: result.lean_mass || \"\",\n                            })\n                        })\n                    }\n                }\n                else\n                    if (isMountedRef.current)\n                        setState(s => ({ ...s, backdrop: false }))\n\n            } catch (error) {\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdrop: false }))\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        _fetchData(visit, patient);\n        return () => (isMountedRef.current = false)\n\n    }, [visit, patient, fetchData])\n    const handleNextClick = async () => {\n        try {\n            const {\n                bodyFat,\n                bodyWater,\n                leanMass,\n            } = state;\n            const data = {\n                body_fat: bodyFat,\n                lean_mass: leanMass,\n                body_water: bodyWater,\n            }\n            await pushPatientVisitData(data, visit, patient)\n            onClickNext();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    const classes = useStyles()\n    const handleTextfieldChange = ({ target }) => setState(s => ({ ...s, [target.name]: target.value }))\n    const { backdrop } = state;\n    if (backdrop)\n        return (\n            <Backdrop className={classes.backdrop} open={backdrop} timeout={1000}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n\n    return (\n        <Grid container direction=\"row\" spacing={1}>\n            <Grid item xs={12}>\n                <TitleStepper>{pageName}</TitleStepper>\n            </Grid>\n            <Grid item xs={4}>\n                <TextField\n                    id=\"body-fat\"\n                    name=\"bodyFat\"\n                    type=\"number\"\n                    label=\"Grasso corporeo\"\n                    helperText=\"%\"\n                    value={state.bodyFat}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"body-water\"\n                    name=\"bodyWater\"\n                    type=\"number\"\n                    label=\"Acqua corporeo\"\n                    helperText=\"%\"\n                    value={state.bodyWater}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"lean-mass\"\n                    name=\"leanMass\"\n                    type=\"number\"\n                    label=\"Massa magra\"\n                    helperText=\"%\"\n                    value={state.leanMass}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n            </Grid>\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant='contained'>\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n    )\n}\n\nBioimpedanceAnalysis.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nBioimpedanceAnalysis.defaultProps = {\n    pageName: strings.visit.steps.bioimpedance,\n    visit: \"first\"\n}","import React from 'react';\nimport PropTypes from 'prop-types'\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nexport default function SwitchLabels(props) {\n    const { name, checked, label, onChange } = props;\n\n    const handleChange = (event) => {\n        const checked = event.target.checked;\n        const name = event.target.name;\n        // setChecked(() => checked);\n        onChange(name, checked)\n    };\n\n    return (\n        <FormGroup row>\n            <FormControlLabel\n                control={<Switch\n                    checked={checked}\n                    onChange={handleChange}\n                    name={name}\n                    color=\"primary\"\n                />}\n                label={label}\n                labelPlacement=\"start\"\n            />\n        </FormGroup>\n    );\n}\n\nSwitchLabels.propTypes = {\n    name: PropTypes.string.isRequired,\n    checked: PropTypes.bool.isRequired,\n    onChange: PropTypes.func.isRequired,\n    label: PropTypes.string,\n}\n\nSwitchLabels.defaultProps = {\n    name: '',\n    checked: false,\n    label: '',\n}","import React from \"react\";\nimport {\n    Grid,\n    TextField,\n    Button,\n    CircularProgress,\n    Backdrop,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from \"../../Typography/TitleStepper\";\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useAuth } from \"../../../contexts/AuthContext\";\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport SwitchLabels from \"../../Switch\";\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\n\nexport function WeightHistory(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [checked, setChecked] = React.useState({\n        yourselfDiets: false,\n        proDiets: false,\n        weightLoss: false,\n        weightGain: false,\n    })\n\n    const handleSwitchChange = (name, value) => {\n        setChecked(s => ({ ...s, [name]: value }))\n    }\n\n    const classes = useStyles();\n\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n\n    const fetchData = React.useCallback((visit, patient) => pullPatientVisitData(visit, patient), [pullPatientVisitData]);\n\n    const [state, setState] = React.useState({\n        heavyweight: '',\n        weightMaintained: '',\n        maximumWeightLoss: '',\n        yearGetFat: '',\n        monthsGetFat: '',\n        diets: '',\n        backdrop: false,\n    });\n\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const _fetchData = async (visit, patient) => {\n\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, backdrop: true }))\n            }\n\n            try {\n\n                const snapshot = await fetchData(visit, patient)\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n                    if (isMountedRef.current) {\n                        setState(s => {\n                            return ({\n                                ...s,\n                                backdrop: false,\n                                heavyweight: result.heavyweight || '',\n                                weightMaintained: result.weightMaintained || '',\n                                maximumWeightLoss: result.maximumWeightLoss || '',\n                                yearGetFat: result.yearGetFat || '',\n                                diets: result.diets || '',\n                                monthsGetFat: result.monthsGetFat || '',\n                            })\n                        })\n                        setChecked(c => ({\n                            ...c,\n                            yourselfDiets: result.yourselfDiets || false,\n                            proDiets: result.proDiets || false,\n                            weightLoss: result.weightLoss || false,\n                            weightGain: result.weightGain || false,\n                        }))\n                    }\n                } else {\n                    if (isMountedRef.current) {\n                        setState(s => ({ ...s, backdrop: false }))\n                    }\n                }\n\n            } catch (error) {\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, backdrop: false }))\n                }\n                console.error(error);\n            }\n\n        }\n        isMountedRef.current = true;\n        _fetchData(visit, patient);\n        return () => (isMountedRef.current = false)\n    }, [visit, patient, fetchData])\n\n    const handleBackClick = () => {\n        onClickBack();\n    }\n\n    const handleNextClick = async () => {\n        try {\n            await pushPatientVisitData({\n                yourselfDiets: checked.yourselfDiets,\n                proDiets: checked.proDiets,\n                weightLoss: checked.weightLoss,\n                weightGain: checked.weightGain,\n                heavyweight: state.heavyweight,\n                weightMaintained: state.weightMaintained,\n                maximumWeightLoss: state.maximumWeightLoss,\n                yearGetFat: state.yearGetFat,\n                diets: state.diets,\n                monthsGetFat: state.monthsGetFat,\n            }, visit, patient);\n\n            onClickNext();\n\n        } catch (error) {\n            console.error();\n        }\n    }\n\n    const handleTextfieldChange = ({ target }) => setState(s => ({ ...s, [target.name]: target.value }))\n    if (state.backdrop) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={state.backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            <Grid item xs={12} id=\"title-page-name\">\n                <TitleStepper>{pageName}</TitleStepper>\n            </Grid>\n            <Grid item xs={4}>\n                <TextField\n                    id=\"heavyweight\"\n                    name=\"heavyweight\"\n                    type=\"number\"\n                    label=\"Peso massimo\"\n                    helperText=\"Peso massimo dal completamento lo sviluppo\"\n                    placeholder=\"Kg\"\n                    value={state.heavyweight}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"weight-maintained\"\n                    name=\"weightMaintained\"\n                    type=\"number\"\n                    label=\"Peso mantenuto\"\n                    helperText=\"Peso mantenuto piu' a lungo nella vita adulta\"\n                    placeholder=\"Kg\"\n                    value={state.weightMaintained}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"maximum-weight-loss\"\n                    name=\"maximumWeightLoss\"\n                    type=\"number\"\n                    label=\"Massima perdita\"\n                    helperText=\"Massima perdita di peso\"\n                    placeholder=\"Kg\"\n                    value={state.maximumWeightLoss}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"months-get-fat\"\n                    name=\"monthsGetFat\"\n                    type=\"number\"\n                    label=\"Mesi\"\n                    helperText=\"In quanto tempo\"\n                    placeholder=\"2\"\n                    value={state.monthsGetFat}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"year-get-fat\"\n                    name=\"yearGetFat\"\n                    type=\"number\"\n                    label=\"Anno\"\n                    helperText=\"Anno inizio aumento peso\"\n                    placeholder=\"2011\"\n                    value={state.yearGetFat}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"diets-done\"\n                    name=\"diets\"\n                    type=\"number\"\n                    label=\"Diete\"\n                    helperText=\"Diete fatte durante la vita\"\n                    placeholder=\"#\"\n                    value={state.diets}\n                    onChange={handleTextfieldChange}\n                    fullWidth\n                    margin=\"normal\"\n                    //size=\"medium\"\n                    variant=\"outlined\"\n                />\n            </Grid>\n            <Grid item xs>\n                <SwitchLabels\n                    name=\"weightGain\"\n                    checked={checked.weightGain}\n                    onChange={handleSwitchChange}\n                    label=\"Aumento graduale del peso\"\n                />\n                <SwitchLabels\n                    name=\"weightLoss\"\n                    checked={checked.weightLoss}\n                    onChange={handleSwitchChange}\n                    label=\"Cali di peso\"\n                />\n                <SwitchLabels\n                    name=\"proDiets\"\n                    checked={checked.proDiets}\n                    onChange={handleSwitchChange}\n                    label=\"Diete con l'aiuto di un professionista\"\n                />\n                <SwitchLabels\n                    name=\"yourselfDiets\"\n                    checked={checked.yourselfDiets}\n                    onChange={handleSwitchChange}\n                    label=\"Diete fai da te\"\n                />\n            </Grid>\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant=\"contained\">\n\n\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n    )\n}\n\nWeightHistory.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nWeightHistory.defaultProps = {\n    pageName: strings.visit.steps.weight_history,\n    visit: \"first\"\n}","import React from \"react\"\nimport {\n    Grid,\n    TextField,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    //DialogContentText,\n    Button,\n    Backdrop,\n    CircularProgress,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from \"../../Typography/TitleStepper\";\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { useAuth } from \"../../../contexts/AuthContext\"\nimport { makeStyles } from '@material-ui/core/styles'\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\n\nexport function FoodAnamnesis(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [state, setState] = React.useState({\n        averageCalories: '',\n        nutrients: '',\n        alcoholCalories: 0,\n        open: false,\n        proteins: 0,\n        carbohydrates: 0,\n        lipids: 0,\n        label: '',\n        value: 0,\n        backdrop: false,\n        grams_carbs: \"\",\n        grams_lipidi: \"\",\n        grams_prots: \"\",\n    })\n\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n\n    const fetchData = React.useCallback((visit, patient) => pullPatientVisitData(visit, patient), [pullPatientVisitData])\n\n    const classes = useStyles()\n\n    const handleBackClick = () => onClickBack()\n\n    const handleNextClick = async () => {\n\n        try {\n\n            const {\n                averageCalories,\n                nutrients,\n                alcoholCalories,\n                //proteins,\n                //carbohydrates,\n                //lipids,\n                grams_carbs,\n                grams_prots,\n                grams_lipidi,\n            } = state\n\n            const data = {\n                averageCalories: averageCalories,\n                nutrients: nutrients,\n                alcoholCalories: parseInt(alcoholCalories, 10),\n                grams_carbs: grams_carbs,\n                grams_lipidi: grams_lipidi,\n                grams_prots: grams_prots,\n                /*proteins: parseInt(proteins, 10),\n                carbohydrates: parseInt(carbohydrates, 10),\n                lipids: parseInt(lipids, 10),*/\n            }\n\n            await pushPatientVisitData(data, visit, patient);\n\n            onClickNext();\n\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const handleFieldChange = ({ target }) => setState(s => ({ ...s, [target.name]: target.value, value: target.value }))\n\n    const handleClose = () => setState((s) => ({ ...s, open: false }))\n\n    const handleTextfieldChange = ({ target }) => setState(s => ({ ...s, [target.name]: target.value }))\n\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const _fetchData = async (visit, patient) => {\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, backdrop: true }))\n            }\n            try {\n                const snapshot = await fetchData(visit, patient);\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n                    if (isMountedRef.current) {\n                        setState(s => {\n                            // console.debug('gender', result.gender);\n                            return ({\n                                ...s,\n                                backdrop: false,\n                                averageCalories: result.averageCalories || '',\n                                nutrients: result.nutrients || '',\n                                alcoholCalories: result.alcoholCalories || 0,\n                                /*proteins: result.proteins || 0,\n                                carbohydrates: result.carbohydrates || 0,\n                                lipids: result.lipids || 0,*/\n                                grams_carbs: result.grams_carbs === undefined ? \"\" : result.grams_carbs,\n                                grams_lipidi: result.grams_lipidi === undefined ? \"\" : result.grams_lipidi,\n                                grams_prots: result.grams_prots === undefined ? \"\" : result.grams_prots,\n                            })\n                        })\n                    }\n                } else {\n                    if (isMountedRef.current) {\n                        setState(s => ({ ...s, backdrop: false }))\n                    }\n                }\n            } catch (error) {\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdrop: false }))\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        _fetchData(visit, patient);\n        return () => (isMountedRef.current = false)\n    }, [visit, patient, fetchData])\n\n    const { backdrop } = state\n    if (backdrop) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n    return (\n        <>\n            <Grid container spacing={1}>\n                <Grid item xs={12} id=\"title-page-name\">\n\n                    <TitleStepper>{pageName}</TitleStepper>\n                </Grid>\n                <Grid item xs={4}>\n\n                    <TextField\n                        id=\"grams-carbs\"\n                        name=\"grams_carbs\"\n                        value={state.grams_carbs}\n                        helperText=\"grammi nutrienti (carboidrati)\"\n                        onChange={handleTextfieldChange}\n                        fullWidth\n                        variant=\"outlined\"\n                        label={strings.nutrients.carbs}\n                        margin=\"normal\"\n                    />\n                    <TextField\n                        id=\"grams-prots\"\n                        name=\"grams_prots\"\n                        value={state.grams_prots}\n                        helperText=\"grammi nutrienti (proteine)\"\n                        onChange={handleTextfieldChange}\n                        fullWidth\n                        variant=\"outlined\"\n                        label={strings.nutrients.prots}\n                        margin=\"normal\"\n                    />\n                    <TextField\n                        id=\"grams-lipidi\"\n                        name=\"grams_lipidi\"\n                        value={state.grams_lipidi}\n                        helperText=\"grammi nutrienti (lipidi)\"\n                        onChange={handleTextfieldChange}\n                        fullWidth\n                        variant=\"outlined\"\n                        label=\"Lipidi\"\n                        margin=\"normal\"\n                    />\n                    {/*</Grid>\n                <Grid item xs={7}>*/}\n                    <TextField\n                        id=\"average-calories\"\n                        name=\"averageCalories\"\n                        type=\"text\"\n                        label=\"Calorie assunte\"\n                        // placeholder=\"Totale calorie\"\n                        helperText=\"Totale calorie assunte in media\"\n                        value={state.averageCalories}\n                        onChange={handleTextfieldChange}\n                        fullWidth\n                        margin=\"normal\"\n                        //size=\"medium\"\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        id=\"nutrients\"\n                        name=\"nutrients\"\n                        type=\"text\"\n                        label=\"Nutrienti\"\n                        placeholder=\"%\"\n                        // helperText=\"Totale calorie assunte in media\"\n                        value={state.nutrients}\n                        onChange={handleTextfieldChange}\n                        fullWidth\n                        margin=\"normal\"\n                        //size=\"medium\"\n                        variant=\"outlined\"\n                    />\n                    <TextField\n                        id=\"alcoholCalories\"\n                        name=\"alcoholCalories\"\n                        type=\"number\"\n                        label=\"Calorie da alcool\"\n                        // placeholder=\"%\"\n                        // helperText=\"Totale calorie assunte in media\"\n                        value={state.alcoholCalories}\n                        onChange={handleTextfieldChange}\n                        fullWidth\n                        margin=\"normal\"\n                        //size=\"medium\"\n                        variant=\"outlined\"\n                    />\n                </Grid>\n                <Grid\n                    item\n                    xs={12}\n                //style={{ display: 'flex', justifyContent: 'flex-end', }}\n                >\n                    <ButtonGroup variant=\"contained\">\n                        <Button\n                            //variant=\"outlined\"\n                            //color=\"default\"\n                            //size=\"small\"\n                            onClick={handleBackClick}\n                            startIcon={\n                                <ArrowBackIosIcon />\n                            }\n                        //style={{ margin: 8 }}\n                        >\n                            {strings.general.back}\n                        </Button>\n                        <Button\n                            //variant=\"contained\"\n                            //color=\"primary\"\n                            //size=\"small\"\n                            onClick={handleNextClick}\n                            endIcon={\n                                <ArrowForwardIosIcon />\n                            }\n                        //style={{ margin: 8 }}\n                        >\n                            {strings.general.next}\n                        </Button>\n                    </ButtonGroup>\n                </Grid>\n            </Grid>\n            <Dialog maxWidth=\"xs\" open={state.open} onClose={handleClose} fullWidth>\n                <DialogTitle>\n                    Modifica nutrienti\n                </DialogTitle>\n                <DialogContent dividers>\n                    {/*<DialogContentText>\n                        Description\n                    </DialogContentText>*/}\n                    <TextField\n                        id={state.label}\n                        name={state.label}\n                        variant=\"outlined\"\n                        label={state.label}\n                        // placeholder=\"placeholder\"\n                        helperText=\"grams\"\n                        key=\"key-text-field\"\n                        margin=\"normal\"\n                        size=\"medium\"\n                        fullWidth\n                        value={state.value}\n                        onChange={handleFieldChange}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"text\" color=\"secondary\" size=\"medium\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"text\" color=\"primary\" size=\"medium\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nFoodAnamnesis.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nFoodAnamnesis.defaultProps = {\n    pageName: strings.visit.steps.food_anamnesis,\n    visit: \"first\",\n}","import React from 'react'\nimport {\n    Grid,\n    Button,\n    CircularProgress,\n    Backdrop,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from '../../Typography/TitleStepper';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwitchLabels from '../../Switch'\nimport { useAuth } from '../../../contexts/AuthContext';\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\n\nexport function EatingBehavior(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [checked, setChecked] = React.useState({\n        prandial_hyperphagia: false,\n        compulsive_binge: false,\n        plucking: false,\n        emotional_eating: false,\n        night_eating: false,\n        selective_craving: false,\n    })\n\n    const [state, setState] = React.useState({\n        backdrop: false,\n    })\n\n    const classes = useStyles()\n\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n\n    const fetchData = React.useCallback((visit, patient) => pullPatientVisitData(visit, patient), [pullPatientVisitData]);\n\n    const handleBackClick = () => onClickBack()\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const _fetchData = async (visit, patient) => {\n\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdrop: true }))\n\n            try {\n\n                const snapshot = await fetchData(visit, patient);\n\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n                    if (isMountedRef.current) {\n                        setChecked(s => {\n                            return ({\n                                ...s,\n                                // backdrop: false,\n                                // patientId: result.patientId,\n                                prandial_hyperphagia: result.prandial_hyperphagia || false,\n                                compulsive_binge: result.compulsive_binge || false,\n                                plucking: result.plucking || false,\n                                emotional_eating: result.emotional_eating || false,\n                                night_eating: result.night_eating || false,\n                                selective_craving: result.selective_craving || false,\n                            })\n                        })\n                        setState(s => ({ ...s, backdrop: false }))\n                    }\n                } else {\n                    if (isMountedRef.current) {\n                        setState(s => ({ ...s, backdrop: false }))\n                    }\n                }\n\n            } catch (error) {\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, backdrop: false }))\n                }\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        _fetchData(visit, patient);\n        return () => (isMountedRef.current = false)\n    }, [visit, patient, fetchData])\n\n    const handleNextClick = async () => {\n        try {\n\n            const {\n                prandial_hyperphagia,\n                compulsive_binge,\n                plucking,\n                emotional_eating,\n                night_eating,\n                selective_craving,\n            } = checked;\n\n\n            const data = {\n                prandial_hyperphagia: prandial_hyperphagia,\n                compulsive_binge: compulsive_binge,\n                plucking: plucking,\n                emotional_eating: emotional_eating,\n                night_eating: night_eating,\n                selective_craving: selective_craving,\n            }\n\n            await pushPatientVisitData(data, visit, patient);\n\n            onClickNext();\n\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const handleSwitchChange = (name, value) => setChecked(s => ({ ...s, [name]: value }))\n\n    const { backdrop } = state\n    if (backdrop) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Grid container justifyContent=\"flex-start\" spacing={1}>\n            <Grid item xs={12} id=\"title-page-name\">\n                <TitleStepper>{pageName}</TitleStepper>\n            </Grid>\n            <Grid item xs>\n                <SwitchLabels\n                    name=\"prandial_hyperphagia\"\n                    checked={checked.prandial_hyperphagia}\n                    onChange={handleSwitchChange}\n                    label=\"Iperfagia prandiale\"\n                />\n                <SwitchLabels\n                    name=\"compulsive_binge\"\n                    checked={checked.compulsive_binge}\n                    onChange={handleSwitchChange}\n                    label=\"Abbuffata compulsiva\"\n                />\n                <SwitchLabels\n                    name=\"plucking\"\n                    checked={checked.plucking}\n                    onChange={handleSwitchChange}\n                    label=\"Piluccamento\"\n                />\n                <SwitchLabels\n                    name=\"emotional_eating\"\n                    checked={checked.emotional_eating}\n                    onChange={handleSwitchChange}\n                    label=\"Emotional eating\"\n                />\n                <SwitchLabels\n                    name=\"night_eating\"\n                    checked={checked.night_eating}\n                    onChange={handleSwitchChange}\n                    label=\"Night eating\"\n                />\n                <SwitchLabels\n                    name=\"selective_craving\"\n                    checked={checked.selective_craving}\n                    onChange={handleSwitchChange}\n                    label=\"Selective craving\"\n                />\n            </Grid>\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant='contained'>\n\n\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n    )\n}\n\nEatingBehavior.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nEatingBehavior.defaultProps = {\n    pageName: strings.visit.steps.eating_behavior,\n    visit: \"first\",\n}","import React from 'react';\nimport {\n    Grid,\n    Backdrop,\n    CircularProgress,\n    Button,\n    TextField,\n    Typography,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from '../../Typography/TitleStepper';\nimport { makeStyles } from '@material-ui/core/styles'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport strings from '../../Language/';\n\nconst useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\n\n/**\n * @description\n * @version 1.0.1\n * @name NutritionalPlan\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @param {*} props \n * @returns \n */\nexport function NutritionalPlan(props) {\n\n    const { onClickBack, onClickNext, patient, visit } = props;\n\n    const classes = useStyles();\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n    const [state, setState] = React.useState({\n        backdrop: false,\n        kcal_therapeutic_target: \"\",\n        kcal_carb_target: \"\",\n        kcal_prot_target: \"\",\n        kcal_lipids_target: \"\",\n        exercise_target: \"\"\n    })\n\n    const handleTextFieldChange = ({ target }) => setState((s) => ({ ...s, [target.name]: target.value }))\n\n    const handleNextClick = async () => {\n        try {\n\n            const {\n                kcal_therapeutic_target,\n                kcal_carb_target,\n                kcal_lipids_target,\n                kcal_prot_target,\n                exercise_target\n            } = state;\n            const data = {\n                kcal_therapeutic_target: kcal_therapeutic_target,\n                kcal_carb_target: kcal_carb_target,\n                kcal_lipids_target: kcal_lipids_target,\n                kcal_prot_target: kcal_prot_target,\n                exercise_target: exercise_target,\n            }\n\n            await pushPatientVisitData(data, visit, patient)\n\n            onClickNext()\n\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const handleBackClick = () => onClickBack()\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n\n        const fetchData = async (patient) => {\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdrop: true }))\n\n            try {\n                const snapshot = await pullPatientVisitData(visit, patient)\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n                    if (isMountedRef.current) {\n                        setState(s => {\n                            return ({\n                                ...s,\n                                backdrop: false,\n                                kcal_therapeutic_target: result.kcal_therapeutic_target || \"\",\n                                kcal_carb_target: result.kcal_carb_target || \"\",\n                                kcal_lipids_target: result.kcal_lipids_target || \"\",\n                                kcal_prot_target: result.kcal_prot_target || \"\",\n                                exercise_target: result.exercise_target || \"\",\n                            })\n                        })\n                    }\n\n                }\n                else\n                    if (isMountedRef.current)\n                        setState(s => ({ ...s, backdrop: false }))\n\n            } catch (error) {\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdrop: false }))\n                console.error(error);\n            }\n\n        }\n        isMountedRef.current = true;\n        patient !== undefined && fetchData(patient);\n        return () => (isMountedRef.current = false)\n    }, [patient])\n\n    const {\n        backdrop\n    } = state;\n\n    if (backdrop)\n        return (\n            <Backdrop className={classes.backdrop} open={backdrop} timeout={1000}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n\n    return (\n        <Grid container direction=\"column\" justifyContent=\"flex-start\" alignItems=\"flex-start\" spacing={1}>\n            <Grid item xs={12}>\n                <TitleStepper>{\"Piano nutrizionale\"}</TitleStepper>\n            </Grid>\n            <Grid item xs={4}>\n                <TextField\n                    variant=\"outlined\"\n                    id=\"kcal_therapeutic_target\"\n                    name=\"kcal_therapeutic_target\"\n                    key=\"kcal_therapeutic_target\"\n                    label=\"Target terapeutico\"\n                    placeholder=\"kcal\"\n                    // helperText=\"kcal\"\n                    //size=\"medium\"\n                    fullWidth\n                    type=\"number\"\n                    margin=\"normal\"\n                    value={state.kcal_therapeutic_target}\n                    onChange={handleTextFieldChange}\n                />\n                <TextField\n                    variant=\"outlined\"\n                    //size=\"medium\"\n                    margin=\"normal\"\n                    key=\"exercise_target\"\n                    placeholder=\"kcal\"\n                    type=\"number\"\n                    label=\"Target esericizio fisico\"\n                    fullWidth\n                    helperText=\"Dispendio attivita' motorie consiglaita\"\n                    id=\"exercise_target\"\n                    name=\"exercise_target\"\n                    value={state.exercise_target}\n                    onChange={handleTextFieldChange}\n                />\n\n            </Grid>\n            <Grid item xs={12}>\n                <Typography color=\"textSecondary\" variant=\"h6\">\n                    Target nutrienti\n                </Typography>\n            </Grid>\n            <Grid item xs={4}>\n                <TextField\n                    //size=\"medium\"\n                    margin=\"normal\"\n                    fullWidth\n                    id=\"kcal_carb_target\"\n                    key=\"kcal_carb_target\"\n                    variant=\"outlined\"\n                    label=\"Carboidrati\"\n                    helperText=\"Target % carboidrati\"\n                    placeholder=\"kcal\"\n                    name=\"kcal_carb_target\"\n                    value={state.kcal_carb_target}\n                    onChange={handleTextFieldChange}\n                    type=\"number\"\n                />\n                <TextField\n                    id=\"kcal_prot_target\"\n                    key=\"kcal_prot_target\"\n                    margin=\"normal\"\n                    size=\"medium\"\n                    fullWidth\n                    variant=\"outlined\"\n                    label=\"Proteine\"\n                    helperText=\"Target % proteine\"\n                    placeholder=\"kcal\"\n                    name=\"kcal_prot_target\"\n                    value={state.kcal_prot_target}\n                    onChange={handleTextFieldChange}\n                    type=\"number\"\n                />\n                <TextField\n                    id=\"kcal_lipids_target\"\n                    key=\"kcal_lipids_target\"\n                    variant=\"outlined\"\n                    size=\"medium\"\n                    fullWidth\n                    margin=\"normal\"\n                    label=\"Lipidi\"\n                    helperText=\"Target % lipidi\"\n                    placeholder=\"kcal\"\n                    name=\"kcal_lipids_target\"\n                    value={state.kcal_lipids_target}\n                    onChange={handleTextFieldChange}\n                    type=\"number\"\n                />\n            </Grid>\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant='contained'>\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n    )\n}","import React from \"react\";\nimport {\n    Grid,\n    Button,\n    TextField,\n    Backdrop,\n    CircularProgress,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from \"../../Typography/TitleStepper\";\nimport SubTittleStepper from \"../../Typography/SubTittleStepper\";\nimport CheckboxComponent from \"../../Checkbox\";\nimport { useAuth } from \"../../../contexts/AuthContext\";\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { makeStyles } from '@material-ui/core/styles'\nimport strings from \"../../Language/\";\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\n\nexport function Allergies(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n    const [state, setState] = React.useState({\n        medications: false,\n        medications_text: \"\",\n        foods: false,\n        foods_text: \"\",\n        backdrop: false,\n    })\n    const classes = useStyles();\n    const { pushPatientVisitData, pullPatientVisitData } = useAuth();\n    const handleBackClick = () => onClickBack()\n    const handleChange = (name, value) => setState(s => ({ ...s, [name]: value }))\n    const handleNextClick = async () => {\n        try {\n            const {\n                medications,\n                medications_text,\n                foods,\n                foods_text,\n            } = state;\n            const data = {\n                foods: foods,\n                foods_text: foods_text,\n                medications: medications,\n                medications_text: medications_text,\n            }\n            await pushPatientVisitData(data, visit, patient)\n            onClickNext();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    const isMountedRef = React.useRef(null)\n    React.useState(() => {\n        const fetchData = async (patient) => {\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, backdrop: true }))\n            }\n            try {\n\n                const snapshot = await pullPatientVisitData(visit, patient)\n                if (snapshot.exists()) {\n                    const result = snapshot.data();\n                    if (isMountedRef.current) {\n                        setState(s => {\n                            return ({\n                                ...s,\n                                backdrop: false,\n                                medications: result.medications || false,\n                                foods: result.foods || false,\n                                medications_text: result.medications_text || \"\",\n                                foods_text: result.foods_text || \"\",\n                            })\n                        })\n                    }\n                }\n                else\n                    if (isMountedRef.current)\n                        setState(s => ({ ...s, backdrop: false }))\n\n            } catch (error) {\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, backdrop: false }))\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        fetchData(patient);\n        return () => isMountedRef.current = false\n    }, [patient])\n    const { backdrop } = state\n    if (backdrop)\n        return (\n            <Backdrop className={classes.backdrop} open={backdrop} timeout={1000}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    return (\n        <Grid container direction=\"row\" justifyContent=\"flex-start\" spacing={1} alignItems=\"flex-start\">\n            <Grid item xs={12} id=\"title-page-name\">\n                <TitleStepper>{pageName}</TitleStepper>\n            </Grid>\n            <Grid item xs={4}>\n                <SubTittleStepper>\n                    Farmaci\n                </SubTittleStepper>\n                <CheckboxComponent\n                    label=\"Farmaci\"\n                    name=\"medications\"\n                    checked={state.medications}\n                    onChange={handleChange}\n                />\n                <TextField\n                    disabled={!state.medications}\n                    fullWidth\n                    id=\"medications_textfield\"\n                    name=\"medications_text\"\n                    value={state.medications_text}\n                    variant=\"outlined\"\n                    multiline\n                    minRows={2}\n                    maxRows={6}\n                    label=\"Farmaci\"\n                    helperText=\"Descrizione\"\n                    // placeholder=\"...\"\n                    onChange={({ target }) => setState(s => ({ ...s, [target.name]: target.value }))}\n                />\n            </Grid>\n            <Grid item xs={4}>\n                <SubTittleStepper>\n                    Alimenti\n                </SubTittleStepper>\n                <CheckboxComponent\n                    label=\"Alimenti\"\n                    name=\"foods\"\n                    checked={state.foods}\n                    onChange={handleChange}\n                />\n                <TextField\n                    disabled={!state.foods}\n                    fullWidth\n                    id=\"foods_textfield\"\n                    name=\"foods_text\"\n                    value={state.foods_text}\n                    variant=\"outlined\"\n                    multiline\n                    minRows={2}\n                    maxRows={6}\n                    label=\"Alimenti\"\n                    helperText=\"Descrizione\"\n                    // placeholder=\"...\"\n                    onChange={({ target }) => setState(s => ({ ...s, [target.name]: target.value }))}\n                />\n            </Grid>\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant=\"contained\">\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={\n                            <ArrowBackIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={\n                            <ArrowForwardIosIcon />\n                        }\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n    )\n}\n\nAllergies.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nAllergies.defaultProps = {\n    pageName: strings.visit.steps.allergies,\n    visit: \"first\",\n}","import React from 'react';\nimport {\n    Grid,\n    TextField,\n    Button,\n    ButtonGroup,\n} from '@material-ui/core';\nimport TitleStepper from '../../Typography/TitleStepper';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport strings from '../../Language';\nimport PropTypes from 'prop-types';\nimport { useAuth } from '../../../contexts/AuthContext';\n\nexport function TestPerformance(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n\n    const [state, setState] = React.useState({\n        liftedFromChair: \"\",\n        gateSpeed: 0,\n        walkingTestMeters: 0,\n        walkingTestTime: 0,\n        /*wt_sat_o2_pre: \"\",\n        wt_sat_o2_post: \"\",\n        wt_fc_pre: \"\",\n        wt_fc_post: \"\",*/\n        handgripMano: \"\",\n    });\n\n    const { pushPatientVisitData, pullPatientVisitData, } = useAuth();\n\n    const fetchData = React.useCallback((visit, patient) => pullPatientVisitData(visit, patient), [pullPatientVisitData]);\n\n    const handleBackClick = () => onClickBack()\n\n    const handleNextClick = async () => {\n        const {\n            liftedFromChair,\n            gateSpeed,\n            walkingTestMeters,\n            walkingTestTime,\n            /*wt_sat_o2_pre,\n            wt_sat_o2_post,\n            wt_fc_pre,\n            wt_fc_post,*/\n            handgripMano,\n\n        } = state;\n        const body = {\n            lifted_from_chair: liftedFromChair,\n            gate_speed: gateSpeed,\n            walking_test_meters: walkingTestMeters,\n            walking_test_time: walkingTestTime,\n            /*wt_sat_o2_pre: wt_sat_o2_pre,\n            wt_sat_o2_post: wt_sat_o2_post,\n            wt_fc_pre: wt_fc_pre,\n            wt_fc_post: wt_fc_post,*/\n            handgripMano: handgripMano,\n        }\n        try {\n            await pushPatientVisitData(body, visit, patient);\n            onClickNext();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const isMountedRef = React.useRef(null)\n\n    React.useEffect(() => {\n\n        const _fetchData = async (visit, patient) => {\n            try {\n\n                const snapshot = await fetchData(visit, patient);\n                if (!snapshot.exists()) {\n                    console.debug(\"empty\");\n                    return\n                }\n                const data = snapshot.data();\n                const body = {\n                    liftedFromChair: data.lifted_from_chair,\n                    gateSpeed: data.gate_speed,\n                    walkingTestMeters: data.walking_test_meters,\n                    walkingTestTime: data.walking_test_time,\n                    /*wt_sat_o2_pre: data.wt_sat_o2_pre,\n                    wt_sat_o2_post: data.wt_sat_o2_post,\n                    wt_fc_pre: data.wt_fc_pre,\n                    wt_fc_post: data.wt_fc_post,*/\n                    handgripMano: data.handgripMano,\n                }\n\n                // no undefined needed\n                const clean_body = {}\n                Object.keys(body).forEach(k => {\n                    if (body[k] === undefined) {\n                        // if undefined then empty string\n                        clean_body[k] = 0;\n                    } else {\n                        // if defined then copy\n                        clean_body[k] = body[k];\n                    }\n                })\n                if (isMountedRef.current)\n                    setState((state) => ({ ...state, ...clean_body }))\n\n            } catch (err) {\n                console.error(err);\n            }\n        }\n\n        isMountedRef.current = true;\n\n        _fetchData(visit, patient);\n\n        return () => isMountedRef.current = false\n\n    }, [visit, patient, fetchData]);\n\n    const setVelocity = ({ target }) => {\n\n        setState((s) => {\n            const state = { ...s, [target.name]: target.value }\n            const { walkingTestMeters, walkingTestTime } = state;\n\n            return ({ ...state, gateSpeed: parseFloat(walkingTestMeters / walkingTestTime).toFixed(2) });\n        });\n    }\n\n    const {\n        liftedFromChair,\n        gateSpeed,\n        walkingTestMeters,\n        walkingTestTime,\n        /*wt_sat_o2_pre,\n        wt_sat_o2_post,\n        wt_fc_pre,\n        wt_fc_post,*/\n        handgripMano,\n    } = state;\n\n    return (\n        <Grid container direction='row' spacing={1} justifyContent='flex-start' alignItems='flex-start'>\n            <Grid item xs={12}>\n                <TitleStepper>{pageName}</TitleStepper>\n            </Grid>\n            <Grid item xs={4}>\n                <TextField\n                    id='lifted-from-chair'\n                    name='liftedFromChair'\n                    label='lifted from chair'\n                    helperText='lifted from the chair'\n                    type='text'\n                    variant='outlined'\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                    value={liftedFromChair}\n                    onChange={({ target }) => setState((s) => ({ ...s, [target.name]: target.value }))}\n                />\n                <TextField\n                    id='walking-test-meters'\n                    name='walkingTestMeters'\n                    label='walking test'\n                    helperText='metri'\n                    type=\"number\"\n                    variant='outlined'\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                    value={walkingTestMeters}\n                    onChange={setVelocity}\n                />\n                <TextField\n                    id='walking-test-time'\n                    name='walkingTestTime'\n                    label='walking test'\n                    helperText='tempo'\n                    type=\"number\"\n                    variant='outlined'\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                    value={walkingTestTime}\n                    onChange={setVelocity}\n                />\n                <TextField\n                    id='gate-speed'\n                    name='gateSpeed'\n                    label='camminata veloce'\n                    helperText='gate speed'\n                    type=\"number\"\n                    variant=\"filled\"\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                    value={gateSpeed}\n                    InputProps={{ readOnly: true }}\n                    inputProps={{ step: \"0.01\" }}\n                //onChange={({ target }) => setState((s) => ({ ...s, [target.name]: target.value }))}\n                />\n                <TextField\n                    id='handgrip-mano'\n                    name='handgripMano'\n                    label='handgrip-mano'\n                    helperText='handgrip-mano'\n                    type='text'\n                    fullWidth\n                    variant='outlined'\n                    //size='small'\n                    margin='normal'\n                    value={handgripMano}\n                    onChange={({ target }) => setState((s) => ({ ...s, [target.name]: target.value }))}\n                />\n            </Grid>\n\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant='contained'>\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={<ArrowBackIosIcon />}\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={<ArrowForwardIosIcon />}\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid >\n\n    )\n}\n\nTestPerformance.propTypes = {\n    pageName: PropTypes.string,\n    visit: PropTypes.string,\n}\n\nTestPerformance.defaultProps = {\n    pageName: \"Test di performance e di autonomia funzionale\",\n    visit: \"first\",\n}\n","import React, { useCallback, useState } from 'react';\nimport {\n    Grid,\n    TextField,\n    Typography,\n    Button,\n    ButtonGroup,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Backdrop,\n    CircularProgress,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles'\nimport TitleStepper from '../../Typography/TitleStepper';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport strings from '../../Language';\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: \"#fff\",\n    }\n}))\n\nexport function PsychometricTest(props) {\n    const { onClickBack, onClickNext, patient, pageName, visit } = props;\n\n    const classes = useStyles();\n\n    const [state, setState] = useState({\n        som: 0,\n        obs_comp: 0,\n        interp_sens: 0,\n        dep: 0,\n        anx: 0,\n        anger_host: 0,\n        phob: 0,\n        paran: 0,\n        psych: 0,\n        sleep: 0,\n        tot_tefq51: 0,\n        tot_orwell: 0,\n        restriz: 0,\n        disinibiz: 0,\n        fame: 0,\n        sint_fis: 0,\n        impatto_psisoc: 0,\n        scl90_score: \"\",\n        bes_score: \"\",\n        free_desc_psycho_test: \"\",\n        scoreIpaq: \"\",\n        active: \"\",\n        openBackdrop: false,\n    });\n\n    const { pushPatientVisitData, pullPatientVisitData, } = useAuth();\n\n    const fetchPatientVisitData = useCallback((patientId, visitId) => pullPatientVisitData(patientId, visitId), [pullPatientVisitData])\n\n    const handleSelectionChanges = ({ target }) => setState(state => ({ ...state, [target.name]: target.value, }))\n\n    const handleBackClick = () => onClickBack()\n\n    const handleNextClick = async () => {\n        const {\n            som,\n            obs_comp,\n            interp_sens,\n            dep,\n            anx,\n            anger_host,\n            phob,\n            paran,\n            psych,\n            sleep,\n            //tot_score,\n            tot_tefq51,\n            restriz,\n            disinibiz,\n            fame,\n            sint_fis,\n            impatto_psisoc,\n            //peso_ambiti_vita,\n            bes_score,\n            scl90_score,\n            free_desc_psycho_test,\n            //test_date,\n            scoreIpaq,\n            active,\n            tot_orwell,\n        } = state;\n        const body = {\n            som: som,\n            obs_comp: obs_comp,\n            interp_sens: interp_sens,\n            dep: dep,\n            anx: anx,\n            anger_host: anger_host,\n            phob: phob,\n            paran: paran,\n            psych: psych,\n            sleep: sleep,\n            //tot_score: tot_score,\n            tot_tefq51: tot_tefq51,\n            tot_orwell: tot_orwell,\n            restriz: restriz,\n            disinibiz: disinibiz,\n            fame: fame,\n            sint_fis: sint_fis,\n            impatto_psisoc: impatto_psisoc,\n            //peso_ambiti_vita: peso_ambiti_vita,\n            bes_score: bes_score,\n            scl90_score: scl90_score,\n            free_desc_psycho_test: free_desc_psycho_test,\n            scoreIpaq: scoreIpaq,\n            active: active,\n            //test_date: Timestamp.now(),\n        }\n        try {\n            await pushPatientVisitData(body, visit, patient);\n            onClickNext();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    const isMountedRef = React.useRef(null)\n\n    React.useEffect(() => {\n\n        const parseToFloat = (input) => {\n            if (input !== undefined &&\n                (typeof input === \"number\" || typeof input === \"string\") &&\n                !isNaN(input) &&\n                input !== null &&\n                input !== \"null\" &&\n                input !== \"undefined\") {\n                let parsed = parseFloat(input);\n                //console.debug(parsed);\n                return parsed;\n            } else {\n                //console.debug(\"value zero for\\t\", input);\n                return 0;\n            }\n        }\n\n        const fetchData = async (visit, patient) => {\n            try {\n\n                const snapshot = await fetchPatientVisitData(visit, patient);\n\n                if (!snapshot.exists()) {\n                    return (console.debug(\"empty\"))\n                }\n\n                const data = snapshot.data();\n\n                const body = {\n                    som: parseToFloat(data.som),\n                    obs_comp: parseToFloat(data.obs_comp),\n                    interp_sens: parseToFloat(data.interp_sens),\n                    dep: parseToFloat(data.dep),\n                    anx: parseToFloat(data.anx),\n                    anger_host: parseToFloat(data.anger_host),\n                    phob: parseToFloat(data.phob),\n                    paran: parseToFloat(data.paran),\n                    psych: parseToFloat(data.psych),\n                    sleep: parseToFloat(data.sleep),\n                    tot_tefq51: parseToFloat(data.tot_tefq51),\n                    tot_orwell: parseToFloat(data.tot_orwell),\n                    disinibiz: parseToFloat(data.disinibiz),\n                    restriz: parseToFloat(data.restriz),\n                    fame: parseToFloat(data.fame),\n                    sint_fis: parseToFloat(data.sint_fis),\n                    impatto_psisoc: parseToFloat(data.impatto_psisoc),\n                    bes_score: parseToFloat(data.bes_score),\n                    scl90_score: parseToFloat(data.scl90_score),\n                    free_desc_psycho_test: data.free_desc_psycho_test || \"\",\n                    scoreIpaq: parseToFloat(data.scoreIpaq),\n                    active: data.active || \"\", // if undefined then empty string\n                }\n\n                if (isMountedRef.current) {\n                    setState(state => ({ ...state, ...body }));\n                }\n\n            } catch (error) {\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        if (visit !== undefined && patient !== undefined)\n            fetchData(visit, patient)\n        return () => isMountedRef.current = false\n    }, [visit, patient, fetchPatientVisitData]);\n\n    const average = arr => arr.reduce((a, b) => a + b, 0) / arr.length\n\n    const sum = arr => arr.reduce((a, b) => a + b, 0);\n\n    const handleChangeText = ({ target }) => setState(s => ({ ...s, [target.name]: target.value }));\n\n    const handleORWELLChange = ({ target }) => {\n        setState(state => {\n            let s = { ...state, [target.name]: parseFloat(target.value) }\n            const {\n                sint_fis,\n                impatto_psisoc,\n            } = s;\n            return ({ ...s, tot_orwell: sum([sint_fis, impatto_psisoc]) })\n        })\n    }\n\n    const handleChange = ({ target }) => {\n        setState(state => {\n            // update field with new value\n            return ({ ...state, [target.name]: parseFloat(target.value) })\n        })\n    }\n\n    const handleTEFQ51Change = ({ target }) => {\n        setState(state => {\n            // update field with new value\n            let s = { ...state, [target.name]: parseFloat(target.value) }\n            const {\n                disinibiz,\n                fame,\n                restriz,\n            } = s;\n            return ({ ...s, tot_tefq51: sum([disinibiz, fame, restriz]) })\n        })\n    }\n\n    const { openBackdrop } = state;\n\n    if (openBackdrop) {\n        return (\n            <Backdrop className={classes.backdrop} open={openBackdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    const {\n        som,\n        obs_comp,\n        interp_sens,\n        dep,\n        anx,\n        anger_host,\n        phob,\n        paran,\n        psych,\n        sleep,\n        disinibiz,\n        fame,\n        restriz,\n        tot_tefq51,\n        sint_fis,\n        impatto_psisoc,\n        tot_orwell,\n        bes_score,\n        scl90_score,\n        free_desc_psycho_test,\n        active,\n    } = state;\n\n    return (\n        <Grid container spacing={1} direction=\"row\">\n            <Grid item xs={12}>\n                <TitleStepper paragraph>{pageName}</TitleStepper>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography paragraph variant='h6' color=\"textSecondary\">\n                    {\"SCL punteggio\"}\n                </Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <TextField\n                    id=\"score-scl90\"\n                    key=\"score-scl90\"\n                    name=\"scl90_score\"\n                    label=\"SCL90 Punteggio\"\n                    helperText=\"SCL90 punteggio\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={scl90_score}\n                    onChange={handleChange}\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"som\"\n                    key=\"som\"\n                    name=\"som\"\n                    label=\"Som\"\n                    helperText=\"som\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={som}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"obs-comp\"\n                    key=\"obs-comp\"\n                    name=\"obs_comp\"\n                    label=\"Obs Comp\"\n                    helperText=\"obs comp\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={obs_comp}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"interp-sens\"\n                    key=\"interp-sens\"\n                    name=\"interp_sens\"\n                    label=\"Interp Sens\"\n                    helperText=\"interp sens\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={interp_sens}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"dep\"\n                    key=\"dep\"\n                    name=\"dep\"\n                    label=\"Dep\"\n                    helperText=\"dep\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={dep}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"anx\"\n                    key=\"anx\"\n                    name=\"anx\"\n                    label=\"Anx\"\n                    helperText=\"anx\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={anx}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"anger-host\"\n                    key=\"anger-host\"\n                    name=\"anger_host\"\n                    label=\"Anger Host\"\n                    helperText=\"anger host\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={anger_host}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"phob\"\n                    key=\"phob\"\n                    name=\"phob\"\n                    label=\"Phob\"\n                    helperText=\"phob\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={phob}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"paran\"\n                    key=\"paran\"\n                    name=\"paran\"\n                    label=\"Paran\"\n                    helperText=\"paran\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={paran}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"psych\"\n                    key=\"psych\"\n                    name=\"psych\"\n                    label=\"Psych\"\n                    helperText=\"psych\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={psych}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"sleep\"\n                    key=\"sleep\"\n                    name=\"sleep\"\n                    label=\"Sleep\"\n                    helperText=\"sleep\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={sleep}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Typography paragraph variant='h6' color=\"textSecondary\">\n                    {\"BES punteggio\"}\n                </Typography>\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"bes-score\"\n                    key=\"bes-score\"\n                    name=\"bes_score\"\n                    label=\"BES punteggio\"\n                    helperText=\"bes punteggio\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={bes_score}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Typography paragraph variant='h6' color=\"textSecondary\">\n                    {\"TEFQ51 punteggio\"}\n                </Typography>\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"restriz\"\n                    key=\"restriz\"\n                    name=\"restriz\"\n                    label=\"Restriz.\"\n                    helperText=\"restriz\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={restriz}\n                    onChange={handleTEFQ51Change}\n                    fullWidth\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"disinibiz\"\n                    key=\"disinibiz\"\n                    name=\"disinibiz\"\n                    label=\"Disinibiz.\"\n                    helperText=\"disinibiz\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={disinibiz}\n                    onChange={handleTEFQ51Change}\n                    fullWidth\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"fame\"\n                    key=\"fame\"\n                    name=\"fame\"\n                    label=\"Fame\"\n                    helperText=\"fame\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={fame}\n                    onChange={handleTEFQ51Change}\n                    fullWidth\n                    margin='normal'\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"tot_tefq51\"\n                    key=\"tot_tefq51\"\n                    name=\"tot_tefq51\"\n                    label=\"TEFQ51 Punteggio\"\n                    helperText=\"tefq51 punteggio\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    value={tot_tefq51}\n                    fullWidth\n                    margin='normal'\n                    InputProps={{ readOnly: true }}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Typography paragraph variant='h6' color=\"textSecondary\">\n                    {\"ORWELL punteggio\"}\n                </Typography>\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"sint-fis\"\n                    key=\"sint-fis\"\n                    name=\"sint_fis\"\n                    label=\"Sint fis.\"\n                    helperText=\"sint fis\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={sint_fis}\n                    onChange={handleORWELLChange}\n                    fullWidth\n                    margin=\"normal\"\n                />\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"impatto_psisoc\"\n                    key=\"impatto_psisoc\"\n                    name=\"impatto_psisoc\"\n                    label=\"Impatto psisoc.\"\n                    helperText=\"impatto psisoc.\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={impatto_psisoc}\n                    onChange={handleORWELLChange}\n                    fullWidth\n                    margin=\"normal\"\n                />\n            </Grid>\n            <Grid item xs={2}>\n                {/* <TextField\n                    id=\"peso_ambiti_vita\"\n                    key=\"peso_ambiti_vita\"\n                    name=\"peso_ambiti_vita\"\n                    helperText=\"peso_ambiti_vita\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={peso_ambiti_vita}\n                    onChange={handleChange}\n                    size='small'\n                    className={classes.textfield}\n               />*/}\n                <TextField\n                    id=\"tot_orwell\"\n                    key=\"tot_orwell\"\n                    name=\"tot_orwell\"\n                    label=\"ORWELL punteggio\"\n                    helperText=\"tot orwell\"\n                    type=\"number\"\n                    variant=\"filled\"\n                    value={tot_orwell}\n                    //onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin=\"normal\"\n                    InputProps={{ readOnly: true }}\n\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <TitleStepper paragraph>Abitudini Motorie</TitleStepper>\n                <Typography paragraph variant='h6' color=\"textSecondary\">\n                    IPAQ punteggio\n                </Typography>\n            </Grid>\n            <Grid item xs={2}>\n                <TextField\n                    id=\"ipaq-score\"\n                    key=\"ipaq-score\"\n                    name=\"scoreIpaq\"\n                    label=\"IPAQ punteggio\"\n                    helperText=\"ipaq punteggio\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={state.scoreIpaq}\n                    onChange={handleChange}\n                    fullWidth\n                    //size='small'\n                    margin=\"normal\"\n                />\n                <FormControl fullWidth variant=\"outlined\">\n                    <InputLabel id='demo-simple-select-label'>Comportamento</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        name=\"active\"\n                        value={active}\n                        onChange={handleSelectionChanges}\n                        fullWidth\n                        label=\"Comportamento\"\n                        variant='outlined'\n                    >\n                        <MenuItem value=\"\"><em>-</em></MenuItem>\n                        <MenuItem value=\"idle\">Inattivo</MenuItem>\n                        <MenuItem value=\"suff_active\">Sufficientemente attivo</MenuItem>\n                        <MenuItem value=\"active\">Attivo o molto attivo</MenuItem>\n                    </Select>\n                </FormControl>\n                <TextField\n                    type=\"text\"\n                    minRows={2}\n                    maxRows={5}\n                    multiline\n                    name=\"free_desc_psycho_test\"\n                    id=\"free_desc_psycho_test\"\n                    value={free_desc_psycho_test}\n                    onChange={handleChangeText}\n                    //helperText=\"nota libera\"\n                    label=\"Nota\"\n                    fullWidth\n                    variant=\"outlined\"\n                    margin='normal'\n                />\n            </Grid>\n            <Grid\n                item\n                xs={12}\n            //style={{ display: 'flex', justifyContent: 'flex-end', }}\n            >\n                <ButtonGroup variant='contained'>\n                    <Button\n                        //variant=\"outlined\"\n                        //color=\"default\"\n                        //size=\"small\"\n                        onClick={handleBackClick}\n                        startIcon={<ArrowBackIosIcon />}\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.back}\n                    </Button>\n                    <Button\n                        //variant=\"contained\"\n                        //color=\"primary\"\n                        //size=\"small\"\n                        onClick={handleNextClick}\n                        endIcon={<ArrowForwardIosIcon />}\n                    //style={{ margin: 8 }}\n                    >\n                        {strings.general.next}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n\n        </Grid>\n    )\n}","import React from 'react'\nimport { Stepper, Step, Snackbar, Grid, Button, StepButton, Paper, Slide, } from '@material-ui/core';\nimport { Alert, AlertTitle, } from '@material-ui/lab'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\nimport { FamilyHistory } from './FamilyHistory/'\nimport { PersonalData } from './PersonalData/'\nimport { PhysiologicalAnamnesis } from './PhysiologicalAnamnesis/'\nimport { PathologicalHistory } from './PathologicalHistory/'\nimport { PhysicalExamination } from './PhysicalExamination/'\nimport { BloodChemistryTest } from './BloodChemistryTest/'\nimport { MetabolismCalculation } from './MetabolismCalculation/'\nimport { BioimpedanceAnalysis } from './BioimpedanceAnalysis/'\nimport { WeightHistory } from './WeightHistory/'\nimport { FoodAnamnesis } from './FoodAnamnesis/'\nimport { EatingBehavior } from './EatingBehavior/'\nimport { NutritionalPlan } from './NutritionalPlan/'\nimport { Allergies } from './Allergies/'\nimport { TestPerformance } from './PerformanceTest';\nimport { PsychometricTest } from './PsychometricTest';\nimport { useAuth } from '../../contexts/AuthContext'\nimport StepConnector from '@material-ui/core/StepConnector'\nimport Check from '@material-ui/icons/Check'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport strings from '../Language/'\nimport { useParams } from 'react-router-dom';\n\n/*function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}*/\n\nfunction SlideTransition(props) {\n    return <Slide {...props} direction=\"left\" />;\n}\n\nconst QontoConnector = withStyles({\n    alternativeLabel: {\n        top: 10,\n        left: 'calc(-50% + 16px)',\n        right: 'calc(50% + 16px)',\n    },\n    active: {\n        '& $line': {\n            borderColor: '#784af4',\n        },\n    },\n    completed: {\n        '& $line': {\n            borderColor: '#784af4',\n        },\n    },\n    line: {\n        borderColor: '#eaeaf0',\n        borderTopWidth: 3,\n        borderRadius: 1,\n    },\n})(StepConnector);\n\nconst useQontoStepIconStyles = makeStyles({\n    root: {\n        color: '#eaeaf0',\n        display: 'flex',\n        height: 22,\n        alignItems: 'center',\n    },\n    active: {\n        color: '#784af4',\n    },\n    circle: {\n        width: 8,\n        height: 8,\n        borderRadius: '50%',\n        backgroundColor: 'currentColor',\n    },\n    completed: {\n        color: '#784af4',\n        zIndex: 1,\n        fontSize: 18,\n    },\n});\n\nfunction QontoStepIcon(props) {\n    const classes = useQontoStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active,\n            })}\n        >\n            {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\n        </div>\n    );\n}\n\nQontoStepIcon.propTypes = {\n    /**\n     * Whether this step is active.\n     */\n    active: PropTypes.bool,\n    /**\n     * Mark the step as completed. Is passed to child components.\n     */\n    completed: PropTypes.bool,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    stepper: {\n        padding: theme.spacing(3, 0, 5),\n        backgroundColor: 'transparent',\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    button: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n    },\n    root: {\n        width: 'auto',\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n    },\n    paper: {\n        //marginTop: theme.spacing(3),\n        //marginBottom: theme.spacing(3),\n        padding: theme.spacing(3),\n        borderRadius: 24\n    }\n}))\n\nexport function Visit() {\n    const params = useParams();\n    const patient = params.patientId;\n    const visit = params.visitId;\n\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [state, setState] = React.useState({\n        snackbar: false,\n        csvContent: \"data:text/csv;charset=utf-8,\",\n    });\n\n    const { pullPatientVisitData } = useAuth();\n\n    const fetchPatientVisitData = React.useCallback((visitId, patientId) => pullPatientVisitData(visitId, patientId), [pullPatientVisitData]);\n\n    const classes = useStyles();\n\n    const steps = [\n        strings.visit.steps.data_patient,\n        strings.visit.steps.family_history,\n        strings.visit.steps.physiological_anamnesis,\n        strings.visit.steps.pathological_anamnesis,\n        strings.visit.steps.physical_examination,\n        strings.visit.steps.blood_chemistry,\n        strings.visit.steps.calculation_metabolism,\n        strings.visit.steps.bioimpedance,\n        strings.visit.steps.weight_history,\n        strings.visit.steps.food_anamnesis,\n        strings.visit.steps.eating_behavior,\n        strings.visit.steps.nutritional_plan,\n        strings.visit.steps.allergies,\n        strings.visit.steps.test_performance,\n        strings.visit.steps.test_psychometric,\n    ]\n\n    const getStepContent = (step) => {\n        switch (step) {\n            case 0:\n                return (\n                    <PersonalData\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 1:\n                return (\n                    <FamilyHistory\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 2:\n                return (\n                    <PhysiologicalAnamnesis\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 3:\n                return (\n                    <PathologicalHistory\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 4:\n                return (\n                    <PhysicalExamination\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 5:\n                return (\n                    <BloodChemistryTest\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 6:\n                return (\n                    <MetabolismCalculation\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 7:\n                return (\n                    <BioimpedanceAnalysis\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 8:\n                return (\n                    <WeightHistory\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 9:\n                return (\n                    <FoodAnamnesis\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 10:\n                return (\n                    <EatingBehavior\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 11:\n                return (\n                    <NutritionalPlan\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 12:\n                return (\n                    <Allergies\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 13:\n                return (\n                    <TestPerformance\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            case 14:\n                return (\n                    <PsychometricTest\n                        onClickBack={handleBack}\n                        onClickNext={handleNext}\n                        patient={patient}\n                        pageName={steps[step]}\n                        visit={visit}\n                    />\n                )\n            default:\n                return null\n        }\n    }\n\n    const handleStep = (step) => () => {\n        setActiveStep(step);\n    }\n\n    const handleNext = () => {\n        setActiveStep((activeStep) => {\n            let newStep = activeStep + 1;\n            if (newStep === steps.length) {\n                // if last step show snackbar\n                setState(s => ({ ...s, snackbar: true }))\n            }\n            return newStep;\n        });\n    }\n\n    const handleExport = async () => {\n        try {\n\n            let snapshot = await fetchPatientVisitData(visit, patient);\n\n            if (!snapshot.exists()) {\n                return\n            }\n\n            const data = snapshot.data();\n            let header = [];\n            let values = [];\n\n            Object.keys(data).forEach((key) => {\n                const label = key.toLowerCase();\n                let value = data[key];\n                /*if (typeof value === \"boolean\") {\n                    value = value ? 'si' : 'no'\n                }*/\n                header.push(label);\n                values.push(value);\n            })\n\n            let { csvContent } = state;\n            csvContent += header.join(\";\").concat(\"\\n\");\n            csvContent += values.join(\";\").concat(\"\\n\");\n\n            let link = document.createElement(\"a\");\n            link.setAttribute('href', encodeURI(csvContent))\n            link.setAttribute('download', `${patient}.csv`.toLowerCase())\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const handleBack = () => {\n        setActiveStep((activeStep) => {\n            const newStep = activeStep - 1;\n            if (newStep >= 0) {\n                return newStep;\n            }\n            return 0;\n        });\n    }\n\n    const handleCloseSnackbar = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setState(s => ({ ...s, snackbar: false }))\n    }\n\n    return (\n        <div className={classes.root} id=\"visit-wrapper-page\">\n            <Paper className={classes.paper}>\n\n                <Stepper\n                    nonLinear\n                    activeStep={activeStep}\n                    className={classes.stepper}\n                    alternativeLabel\n                // connector={<QontoConnector />}\n                >\n                    {steps.map((label, index) => (\n                        <Step key={label.toString().toLowerCase().trim()}>\n                            {/*<StepLabel\n                             StepIconComponent={QontoStepIcon}\n                            >\n                                {label}\n                            </StepLabel>*/}\n                            <StepButton onClick={handleStep(index)}>\n                                {label}\n                            </StepButton>\n                        </Step>\n                    ))}\n                </Stepper>\n                {\n                    activeStep === steps.length ? (\n                        <>\n                            <Snackbar\n                                id=\"success-snackbar\"\n                                key=\"succcess-snackbar\"\n                                autoHideDuration={5000}\n                                TransitionComponent={SlideTransition}\n                                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                                open={state.snackbar}\n                                onClose={handleCloseSnackbar}\n                            >\n                                <Alert onClose={handleCloseSnackbar} severity=\"success\">\n                                    <AlertTitle>{\"Dati recuperati correttamente\"}</AlertTitle>\n                                </Alert>\n                            </Snackbar>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justifyContent=\"center\"\n                                alignItems=\"center\">\n                                <Grid item xs={2}>\n                                    <Button\n                                        fullWidth\n                                        // variant=\"contained\"\n                                        // color=\"primary\"\n                                        // size=\"large\"\n                                        startIcon={<CloudDownloadIcon />}\n                                        onClick={handleExport}\n                                    >\n                                        {strings.pageTitles.export_data}\n\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </>\n                    ) : getStepContent(activeStep)}\n            </Paper>\n        </div>\n    )\n}","import React, { useState, useRef } from \"react\"\nimport {\n    Grid,\n    CircularProgress,\n    Backdrop,\n    Container,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    IconButton,\n    Tooltip,\n} from \"@material-ui/core\";\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport strings from '../Language/'\nimport { useAuth } from '../../contexts/AuthContext'\nimport { useParams } from 'react-router-dom'\nimport { Timestamp } from \"firebase/firestore\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default function PatientDetails() {\n\n    const { patientId } = useParams();\n\n    const classes = useStyles()\n\n    const [state, setState] = useState({\n        backdrop: false,\n        patient: {\n            dateOfBirth: new Date(),\n            name: \"\",\n            surname: \"\",\n            gender: strings.general.male,\n            email: \"\",\n            appointments: [],\n        },\n        refreshPage: 1,\n    })\n\n    const { getPatient, currentLanguage } = useAuth();\n\n    const fetchPatientData = React.useCallback((patientId) => getPatient(patientId), [getPatient]);\n\n    const [expanded, setExpanded] = React.useState(false);\n\n    const handleChange = (panel) => (event, isExpanded) => {\n        setExpanded(isExpanded ? panel : false);\n    }\n\n    const isMountedRef = useRef(null);\n    React.useEffect(() => {\n        const fetchData = async (patientId, currentLanguage) => {\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdrop: true }))\n\n            const ordered_appointments = [];\n\n            try {\n                let snapshot = await fetchPatientData(patientId);\n\n                let data = snapshot.data();\n                let id = snapshot.id;\n\n                const gender_value = strings.general[data.gender];\n\n                if (data.appointments !== undefined) {\n                    data.appointments.sort((a, b) => b.valueOf() - a.valueOf()).forEach((item) => {\n                        ordered_appointments.push(item);\n                    });\n                }\n\n                //const dateOfBirth = data.dateOfBirth.toDate().toLocaleDateString(currentLanguage); // ok\n\n                let patient = {\n                    appointments: ordered_appointments, // if no appointment then empty array\n                    //dateOfBirth: dateOfBirth,\n                    //age: data.age,\n                    email: data.email,\n                    gender: gender_value,\n                    id: id,\n                    name: data.name,\n                    surname: data.surname,\n                    height: data.height,\n                    therapyEndDate: data.therapyEndDate,\n                    therapyStartDate: data.therapyStartDate,\n                    //createdAt: data.createdAt,\n                }\n\n                const { createdAt } = data;\n                if (createdAt !== undefined) {\n                    if (typeof createdAt === 'string') {\n                        patient.createdAt = new Date(createdAt);\n                    } else if (createdAt instanceof Timestamp) {\n                        patient.createdAt = createdAt.toDate();\n                    }\n                    //patient.createdAt = createdAt.toDate().toLocaleDateString(currentLanguage);\n                }\n\n                const { dateOfBirth } = data;\n                if (dateOfBirth !== undefined) {\n                    if (typeof dateOfBirth === 'string') {\n                        patient.dateOfBirth = new Date(dateOfBirth);\n                    } else if (dateOfBirth instanceof Timestamp) {\n                        patient.dateOfBirth = dateOfBirth.toDate();\n                    }\n                    //patient.dateOfBirth = dateOfBirth.toDate().toLocaleDateString(currentLanguage);\n                }\n\n\n                if (isMountedRef.current)\n                    setState((s) => ({ ...s, patient: patient, backdrop: false }))\n            } catch (error) {\n                console.error(error);\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, backdrop: false }))\n                }\n            }\n        }\n        isMountedRef.current = true\n        if (patientId !== undefined)\n            fetchData(patientId, currentLanguage);\n        return () => (isMountedRef.current = false)\n    }, [patientId, currentLanguage, state.refreshPage, fetchPatientData]);\n\n    const handleRefresh = () => setState(state => ({ ...state, refreshPage: state.refreshPage + 1 }));\n\n    const { backdrop, patient } = state;\n    if (backdrop)\n        return (\n            <Backdrop open={backdrop} className={classes.backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n\n    return (\n        <Container maxWidth=\"md\">\n            <Grid container direction=\"row\" spacing={2}>\n                <Grid item xs={12}>\n                    <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1bh-content\"\n                            id=\"panel1bh-header\"\n                        >\n                            <Typography className={classes.heading}>Anagrafica</Typography>\n                            <Typography className={classes.secondaryHeading}>Dati personali</Typography>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <List dense>\n                                <ListItem>\n                                    <ListItemText secondary={\"Nome Cognome\"} primary={`${patient.name} ${patient.surname}`} />\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemText secondary={strings.patient.dateOfBirth} primary={patient.dateOfBirth.toLocaleDateString(currentLanguage)} />\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemText secondary={strings.patient.gender} primary={patient.gender} />\n                                </ListItem>\n                            </List>\n                        </AccordionDetails>\n                    </Accordion>\n                </Grid>\n                <Grid item xs={12}>\n                    <Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1bh-content\"\n                            id=\"panel1bh-header\"\n                        >\n                            <Typography className={classes.heading}>Account</Typography>\n                            <Typography className={classes.secondaryHeading}>Utenza digitale</Typography>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <List>\n                                <ListItem>\n                                    <ListItemText secondary={\"Data creazione\"} primary={patient.createdAt?.toLocaleDateString(currentLanguage)} />\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemText secondary={\"E-mail\"} primary={patient.email} />\n                                </ListItem>\n                                <ListItem>\n                                    <ListItemText secondary={\"ID univoco paziente\"} primary={patient.id} />\n                                </ListItem>\n                            </List>\n                        </AccordionDetails>\n                    </Accordion>\n                </Grid>\n                <Grid item xs={12}>\n                    <Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1bh-content\"\n                            id=\"panel1bh-header\"\n                        >\n                            <Typography className={classes.heading}>Appuntamenti</Typography>\n                            <Typography className={classes.secondaryHeading}>Elenco di tutti gli appuntamenti (in ordine)</Typography>\n                        </AccordionSummary>\n                        <AccordionDetails style={{ flexDirection: \"initial\", flexWrap: \"wrap\" }}>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justifyContent=\"flex-end\"\n                                alignItems=\"center\"\n                            >\n                                <Grid item>\n                                    <Tooltip title=\"Ricarica\">\n                                        <IconButton onClick={handleRefresh}>\n                                            <RefreshIcon />\n                                        </IconButton>\n                                    </Tooltip>\n                                </Grid>\n                                <Grid item xs={12}>\n\n                                    <List style={{ width: '100%' }} dense>\n                                        {patient.appointments.length ? patient.appointments.map((item, i) => {\n\n                                            const key = `appointment-key-${i + 1}`;\n\n                                            if (item instanceof Timestamp) {\n\n                                                const currentTime = Timestamp.now();\n\n                                                const done = item.valueOf() < currentTime.valueOf();\n\n                                                const timestamp = item.toDate().toLocaleString(currentLanguage);\n\n                                                return (\n                                                    <ListItem key={key} button dense>\n                                                        {/*<ListItemIcon>\n                                                    {done ? (<CheckCircleIcon />) : (<CheckCircleOutlineIcon />)}\n                                                </ListItemIcon>*/}\n                                                        <ListItemText primary={timestamp} />\n                                                        <ListItemSecondaryAction>\n                                                            {done ? (<CheckCircleIcon />) : (<CheckCircleOutlineIcon />)}\n                                                        </ListItemSecondaryAction>\n                                                    </ListItem>\n                                                )\n                                            } else {\n                                                return (\n                                                    <ListItem key={key}>\n                                                        <ListItemText primary=\"Wrong timestamp\" secondary=\"Timestamp is not instance of firebase Timestamp\" />\n                                                    </ListItem>\n                                                )\n                                            }\n                                        }) : (\n                                            <ListItem>\n                                                <ListItemText primary={\"Nessun appuntamento\"} />\n                                            </ListItem>\n                                        )}\n                                    </List>\n                                </Grid>\n                            </Grid>\n                        </AccordionDetails>\n                    </Accordion>\n                </Grid>\n            </Grid>\n        </Container>\n\n    )\n}\n","import React from 'react';\n//import PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport { CircularProgress, Backdrop, Container, Grid, } from '@material-ui/core'\nimport { useAuth } from '../../contexts/AuthContext';\nimport strings from '../Language';\nimport { Toolbar, Tooltip } from '@material-ui/core';\nimport PrintIcon from '@material-ui/icons/Print';\nimport LooksOneIcon from '@material-ui/icons/LooksOne';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { Timestamp } from 'firebase/firestore';\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n    tableContainer: {\n        maxHeight: 640,\n    },\n});\n\nfunction Row(props) {\n    const { patient } = props;\n    const [open, setOpen] = React.useState(false);\n    const classes = useRowStyles();\n    const isMountedRef = React.useRef(null);\n    const { getPatientVisits, currentLanguage } = useAuth();\n\n    const [state, setState] = React.useState({\n        visits: [],\n        headers: [],\n        values: [],\n    })\n\n    React.useEffect(() => {\n        const fetchData = async (id) => {\n            let visits = {};\n            let first = [];\n            let second = [];\n            try {\n\n                let result = await getPatientVisits(id);\n\n                result.docs.forEach(doc => {\n                    let data = doc.data();\n                    let id = doc.id;\n                    visits[id] = ({\n                        weight: data.weight || 0,\n                        height: data.height || 0,\n                        bmi: data.bmi || '',\n                        neck_circumference: data.neck_circumference || 0,\n                        waist_circumference: data.waist_circumference || 0,\n                        heart_tones: data.heart_tones || false,\n                        heart_murmur: data.heart_murmur || false,\n                        heart_rate: data.heart_rate || 0,\n                        mv_chest: data.mv_chest || false,\n                        pathological_noises: data.pathological_noises || false,\n                        murphy_blumberg: data.murphy_blumberg || false,\n                        palpable_liver: data.palpable_liver || false,\n                        palpable_thyroid: data.palpable_thyroid || false,\n                        declining_edema: data.declining_edema || false,\n                        carotid_murmurs: data.carotid_murmurs || false,\n                        min_blood_pressure: data.min_blood_pressure || 0,\n                        max_blood_pressure: data.max_blood_pressure || 0,\n                    })\n                })\n\n                let _first = visits.first;\n                const headers = [];\n\n                _first !== undefined && Object.keys(_first).forEach(k => {\n                    const label = strings.visit[k];\n                    headers.push(label);\n                    first.push({ label: label, value: _first[k] });\n                });\n\n                let _second = visits.second;\n                _second !== undefined && Object.keys(_second).forEach(k => {\n\n                    second.push({ label: strings.visit[k], value: _second[k] });\n                });\n\n\n                if (isMountedRef.current) {\n                    // console.debug(first);\n                    setState(s => ({ ...s, first: first, second: second, headers: headers }));\n                }\n\n            } catch (error) {\n                console.error(error);\n            }\n        }\n        isMountedRef.current = true;\n        //fetchData(patient.uid);\n        return () => isMountedRef.current = false\n    }, []);\n\n    React.useEffect(() => {\n\n        const fetchData = async (patientId) => {\n\n            let values = [];\n            let headers = [];\n\n            try {\n\n                const patientVisits = await getPatientVisits(patientId);\n\n                patientVisits.docs.forEach((doc) => {\n\n                    let visit = doc.data();\n\n                    let data = {\n                        // strings.measures.age\n                        patient_age: visit.patient_age, // PersonalData\n                        // strings.patient.gender\n                        gender: visit.gender, // PersonalData\n                        // strings.patient.occupation\n                        patient_occupation: visit.patient_occupation, // PersonalData\n                        // strings.patient.educational_qualification\n                        educational_qualification: visit.educational_qualification, // PersonalData\n                        // strings.patient.marital_status\n                        marital_status: visit.marital_status, // PersonalData\n                        // strings.patient.ethnicity\n                        ethnicity: visit.ethnicity, // PersonalData\n                        // strings.general.consent\n                        consent: visit.consent, // PersonalData\n                        // strings.patient.smoker\n                        smoker: visit.smoker, // PhysiologicalAnamnesis\n                        // strings.patient.ex_smoker\n                        ex_smoker: visit.ex_smoker, // PhysiologicalAnamnesis\n                        // strings.patient.alcoholic\n                        alcoholic: visit.alcoholic, // PhysiologicalAnamnesis\n                        // strings.patient.laxatives_uses\n                        use_laxatives: visit.use_laxatives, // PhysiologicalAnamnesis\n                        // strings.patient.incontinence\n                        incontinence: visit.incontinence, // PhysiologicalAnamnesis\n                        // strings.patient.snoring\n                        snoring: visit.snoring, // PhysiologicalAnamnesis\n                        // strings.patient.insomnia\n                        insomnia: visit.insomnia, // PhysiologicalAnamnesis\n                        // strings.patient.menopause\n                        menopause: visit.menopause, // PhysiologicalAnamnesis\n                        // strings.patient.pregnancies\n                        pregnancies: visit.pregnancies, // PhysiologicalAnamnesis\n                        // strings.patient.abortions\n                        abortions: visit.abortions, // PhysiologicalAnamnesis\n                        // strings.patient.amount_cigarettes\n                        amount_cigarettes: visit.amount_cigarettes, // PhysiologicalAnamnesis\n                        // strings.patient.alvo\n                        alvo: visit.alvo, // PhysiologicalAnamnesis\n                        // strings.patient.menstrual_cycles\n                        menstrual_cycles: visit.menstrual_cycles, // PhysiologicalAnamnesis\n                        // strings.visit.eating_disorder\n                        eating: visit.eating, // PathologicalHistory\n                        // strings.visit.mood_disturbance\n                        mood: visit.mood, // PathologicalHistory\n                        // strings.visit.anxiety_disorder\n                        anxiety: visit.anxiety, // PathologicalHistory\n                        // strings.visit.psychosis\n                        psychosis: visit.psychosis, // PathologicalHistory\n                        // strings.visit.personality_disorder\n                        personality: visit.personality, // PathologicalHistory\n                        // strings.visit.pathologies_previous\n                        //previous_pathologies: visit.previous_pathologies, // PathologicalHistory\n                        // strings.visit.pathologies_inprogress\n                        //inprogress_pathologies: visit.inprogress_pathologies, // PathologicalHistory\n                        // strings.visit.weight\n                        weight: visit.weight, // PhysicalExamination\n                        // strings.visit.height\n                        height: visit.height, // PhysicalExamination\n                        // strings.visit.bmi\n                        bmi: visit.bmi, // PhysicalExamination\n                        // strings.visit.neck_circumference\n                        neck_circumference: visit.neck_circumference, // PhysicalExamination\n                        // strings.visit.waist_circumference\n                        waist_circumference: visit.waist_circumference, // PhysicalExamination\n                        // strings.visit.heart_tones\n                        heart_tones: visit.heart_tones, // PhysicalExamination\n                        // strings.visit.heart_murmur\n                        heart_murmur: visit.heart_murmur, // PhysicalExamination\n                        // strings.visit.heart_rate\n                        heart_rate: visit.heart_rate, // PhysicalExamination\n                        // strings.visit.mv_chest\n                        mv_chest: visit.mv_chest, // PhysicalExamination\n                        // strings.visit.pathological_noises\n                        pathological_noises: visit.pathological_noises, // PhysicalExamination\n                        // strings.visit.murphy_blumberg\n                        murphy_blumberg: visit.murphy_blumberg, // PhysicalExamination\n                        // strings.visit.palpable_liver\n                        palpable_liver: visit.palpable_liver, // PhysicalExamination\n                        // strings.visit.palpable_thyroid\n                        palpable_thyroid: visit.palpable_thyroid, // PhysicalExamination\n                        // strings.visit.declining_edema\n                        declining_edema: visit.declining_edema, // PhysicalExamination\n                        // strings.visit.carotid_murmurs\n                        carotid_murmurs: visit.carotid_murmurs, // PhysicalExamination\n                        // strings.visit.min_blood_pressure\n                        min_blood_pressure: visit.min_blood_pressure, // PhysicalExamination\n                        // strings.visit.max_blood_pressure\n                        max_blood_pressure: visit.max_blood_pressure, // PhysicalExamination\n                        abdomen: visit.abdomen, // PhysicalExamination\n                        waist_circumference_iliac_spine_height: visit.waist_circumference_iliac_spine_height, // PhysicalExamination\n                        waist_circumference_narrowest_point: visit.waist_circumference_narrowest_point, // PhysicalExamination\n                        hb: visit.hb, // BloodChemistryTest\n                        cholesterol: visit.cholesterol, // BloodChemistryTest\n                        hdl: visit.hdl, // BloodChemistryTest\n                        ldl: visit.ldl, // BloodChemistryTest\n                        triglycerides: visit.triglycerides, // BloodChemistryTest\n                        glycemia: visit.glycemia, // BloodChemistryTest\n                        glycated_hb: visit.glycated_hb, // BloodChemistryTest\n                        uric_acid: visit.uric_acid, // BloodChemistryTest\n                        creatininemia: visit.creatininemia, // BloodChemistryTest\n                        alt: visit.alt, // BloodChemistryTest\n                        ggt: visit.ggt, // BloodChemistryTest\n                        tsh: visit.tsh, // BloodChemistryTest\n                        exam_date: visit.exam_date, // BloodChemistryTest\n                        daily_energy_expenditure: visit.daily_energy_expenditure, // MetabolismCalculation\n                        tot_energy_expenditure: visit.tot_energy_expenditure, // MetabolismCalculation\n                        body_fat: visit.body_fat, // BioimpedanceAnalysis\n                        lean_mass: visit.lean_mass, // BioimpedanceAnalysis\n                        body_water: visit.body_water, // BioimpedanceAnalysis\n                        yourselfDiets: visit.yourselfDiets, // ok WeightHistory\n                        proDiets: visit.proDiets, // ok WeightHistory\n                        weightLoss: visit.weightLoss, // ok WeightHistory\n                        weightGain: visit.weightGain, // ok WeightHistory\n                        heavyweight: visit.heavyweight, // ok WeightHistory\n                        weightMaintained: visit.weightMaintained, // ok WeightHistory\n                        maximumWeightLoss: visit.maximumWeightLoss, // WeightHistory\n                        yearGetFat: visit.yearGetFat, // ok WeightHistory\n                        monthsGetFat: visit.monthsGetFat, // WeightHistory\n                        diets: visit.diets, // ok WeightHistory\n                        averageCalories: visit.averageCalories, // FoodAnamnesis\n                        // strings.visit.nutrients\n                        nutrients: visit.nutrients, // FoodAnamnesis\n                        alcoholCalories: visit.alcoholCalories, // FoodAnamnesis\n                        // strings.nutrients.carbs\n                        grams_carbs: visit.grams_carbs, // FoodAnamnesis\n\n                        grams_lipidi: visit.grams_lipidi, // FoodAnamnesis\n                        // strings.nutrients.prots\n                        grams_prots: visit.grams_prots, // FoodAnamnesis\n                        prandial_hyperphagia: visit.prandial_hyperphagia, // EatingBehavior\n                        compulsive_binge: visit.compulsive_binge, // EatingBehavior\n                        plucking: visit.plucking, // EatingBehavior\n                        emotional_eating: visit.emotional_eating, // EatingBehavior\n                        night_eating: visit.night_eating, // EatingBehavior\n                        selective_craving: visit.selective_craving, // EatingBehavior\n                        createdAt: visit.createdAt.toDate().toLocaleDateString(currentLanguage),\n                        kcal_therapeutic_target: visit.kcal_therapeutic_target, // NutritionalPlan\n                        kcal_carb_target: visit.kcal_carb_target, // NutritionalPlan\n                        kcal_lipids_target: visit.kcal_lipids_target, // NutritionalPlan\n                        kcal_prot_target: visit.kcal_prot_target, // NutritionalPlan\n                        exercise_target: visit.exercise_target, // NutritionalPlan\n                        foods: visit.foods, // Allergies\n                        foods_text: visit.foods_text, // Allergies\n                        medications: visit.medications, // Allergies\n                        medications_text: visit.medications_text, // Allergies\n                        lifted_from_chair: visit.lifted_from_chair, // TestPerformance\n                        gate_speed: visit.gate_speed, // TestPerformance\n                        walking_test_meters: visit.walking_test_meters, // TestPerformance\n                        walking_test_time: visit.walking_test_time, // TestPerformance\n                        handgripMano: visit.handgripMano, // TestPerformance\n                        som: visit.som, // PsychometricTest\n                        obs_comp: visit.obs_comp, // PsychometricTest\n                        interp_sens: visit.interp_sens, // PsychometricTest\n                        dep: visit.dep, // PsychometricTest\n                        anx: visit.anx, // PsychometricTest\n                        anger_host: visit.anger_host, // PsychometricTest\n                        phob: visit.phob, // PsychometricTest\n                        paran: visit.paran, // PsychometricTest\n                        psych: visit.psych, // PsychometricTest\n                        sleep: visit.sleep, // PsychometricTest\n                        tot_tefq51: visit.tot_tefq51, // PsychometricTest\n                        tot_orwell: visit.tot_orwell, // PsychometricTest\n                        restriz: visit.restriz, // PsychometricTest\n                        disinibiz: visit.disinibiz, // PsychometricTest\n                        fame: visit.fame, // PsychometricTest\n                        sint_fis: visit.sint_fis, // PsychometricTest\n                        impatto_psisoc: visit.impatto_psisoc, // PsychometricTest\n                        bes_score: visit.bes_score, // PsychometricTest\n                        scl90_score: visit.scl90_score, // PsychometricTest\n                        free_desc_psycho_test: visit.free_desc_psycho_test, // PsychometricTest\n                        scoreIpaq: visit.scoreIpaq, // PsychometricTest\n                        active: visit.active, // PsychometricTest\n                    }\n\n                    let { inprogress_pathologies, previous_pathologies } = visit;\n\n                    if (previous_pathologies !== undefined && previous_pathologies.length > 0) {\n                        data = {\n                            ...data,\n                            pathologies_previous: previous_pathologies.map(({ name }) => name.trim().toLowerCase())\n                                .join(','),\n                        }\n                    }\n\n                    if (inprogress_pathologies !== undefined && inprogress_pathologies.length > 0) {\n                        data = {\n                            ...data,\n                            pathologies_inprogress: inprogress_pathologies.map(({ name }) => name.trim().toLowerCase())\n                                .join(','),\n                        }\n                    }\n\n                    Object.keys(data).forEach(k => {\n                        // keep labels as header table\n                        if (!headers.includes(k))\n                            headers.push(k);\n                    });\n\n                    // check if all fields are defined\n                    /*if (!data_values.includes(undefined)) {\n                        headers.forEach(field => {\n                            if (!(values[field])) {\n                                values[field] = [];\n                            }\n                            values[field].push(data[field])\n                        });\n                    }*/\n\n                    values.push(data);\n                });\n\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, headers: headers, values: values }))\n                }\n\n            } catch (err) {\n                console.error(err);\n            }\n\n            //console.debug(visits);\n\n        }\n        isMountedRef.current = true;\n        fetchData(patient.uid)\n        return () => isMountedRef.current = false\n\n    }, [patient, currentLanguage]);\n\n    const handleClickPrint = () => {\n\n        const { values, headers } = state;\n        let csvContent = \"data:text/csv;charset=utf-8,\";\n        csvContent += headers.join(\";\").concat('\\n');\n        values.forEach(visit => {\n            headers.forEach(header => {\n                if (visit[header] !== undefined) {\n                    csvContent += `${visit[header]}`\n                }\n                csvContent += \";\"\n            })\n            csvContent += \"\\n\"\n        })\n\n\n        let link = document.createElement(\"a\");\n        link.setAttribute('href', encodeURI(csvContent))\n        link.setAttribute('download', `${patient.uid}.csv`.toLowerCase())\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n\n    }\n\n    return (\n        <>\n            <TableRow className={classes.root}>\n                <TableCell>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {`${patient.name} ${patient.surname}`}\n                </TableCell>\n                <TableCell align=\"right\">{`${patient.dateOfBirth}`}</TableCell>\n                <TableCell align=\"right\">{patient.therapyStartDate}</TableCell>\n                <TableCell align=\"right\">{patient.therapyEndDate}</TableCell>\n                <TableCell align=\"right\">{patient.email}</TableCell>\n                <TableCell>\n                    <Tooltip title=\"Esporta\">\n                        <IconButton onClick={handleClickPrint} size=\"small\">\n                            <PrintIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={7}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1}>\n                            <TableContainer className={classes.tableContainer}>\n                                <Table size=\"small\" aria-label=\"purchases\" style={{ width: '100%' }} stickyHeader>\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell />\n                                            {state.values.map((visit, i) => (\n                                                <TableCell key={`header-visit-key${i + 1}`} style={{ fontWeight: 'bold' }}>\n                                                    {visit.createdAt}\n                                                </TableCell>\n                                            ))}\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {state.headers.map((header, i) => {\n                                            let row_label = strings.visit[header];\n                                            // if (row_label === undefined) {\n                                            //     console.debug(i + 1, header);\n                                            // }\n                                            if (header !== 'createdAt')\n                                                return (\n                                                    <TableRow key={`row-${i + 1}`} hover>\n                                                        <TableCell>{`${i + 1}. ${row_label}`}</TableCell>\n                                                        {state.values.map((visit, j) => {\n                                                            if (visit[header] === undefined) {\n                                                                return (\n                                                                    <TableCell key={`row-${i + 1}-cell-${j + 1}`}>\n                                                                        {\"-\"}\n                                                                    </TableCell>\n                                                                )\n                                                            }\n                                                            if (typeof visit[header] === 'boolean') {\n                                                                if (visit[header]) {\n                                                                    return (\n                                                                        <TableCell key={`row-${i + 1}-cell-${j + 1}`}>\n                                                                            <DoneIcon fontSize='small' />\n                                                                        </TableCell>\n                                                                    )\n                                                                } else {\n                                                                    return (\n                                                                        <TableCell key={`row-${i + 1}-cell-${j + 1}`}>\n                                                                            <CloseIcon fontSize='small' />\n                                                                        </TableCell>\n                                                                    )\n                                                                }\n                                                            }\n                                                            if (typeof visit[header] === 'string') {\n                                                                let strValue = visit[header];\n                                                                if (strValue === 'male') {\n                                                                    return (\n                                                                        <TableCell key={`row-${i + 1}-cell-${j + 1}`}>\n                                                                            {strings.general.male}\n                                                                        </TableCell>\n                                                                    )\n                                                                }\n                                                                if (strValue === 'female') {\n                                                                    return (\n                                                                        <TableCell key={`row-${i + 1}-cell-${j + 1}`}>\n                                                                            {strings.general.female}\n                                                                        </TableCell>\n                                                                    )\n                                                                }\n                                                                return (\n                                                                    <TableCell key={`row-${i + 1}-cell-${j + 1}`}>\n                                                                        {strValue}\n                                                                    </TableCell>\n                                                                )\n                                                            }\n                                                            return (\n                                                                <TableCell key={`row-${i + 1}-cell-${j + 1}`}>\n                                                                    {`${visit[header]}`}\n                                                                </TableCell>\n                                                            )\n                                                        })}\n                                                    </TableRow>\n                                                )\n                                        })}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n}\n\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n        // color: theme.palette.text.primary,\n        // backgroundColor: theme.palette.secondary.dark,\n    },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst TableToolbar = () => {\n    const classes = useToolbarStyles();\n    return (\n        <Toolbar className={classes.root}>\n            <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                Esporta dati visite mediche\n            </Typography>\n            <Tooltip title=\"More\">\n                <IconButton>\n                    <MoreVertIcon />\n                </IconButton>\n            </Tooltip>\n        </Toolbar>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    }\n}))\n\n/**\n * @description\n * @version 1.0.1\n * @name VisitData\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n */\nexport default function VisitData() {\n\n    const [state, setState] = React.useState({\n        patients: [],\n        backdrop: false,\n    })\n\n    const classes = useStyles();\n\n    const { getPatients, currentLanguage } = useAuth();\n\n    const isMountedRef = React.useRef(null)\n    React.useEffect(() => {\n        const fetchData = async (currentLanguage) => {\n            try {\n                let result = await getPatients();\n\n                const patients = result.docs.map(doc => {\n                    const data = doc.data();\n                    // const dateOfBirth_timestamp = data.dateOfBirth;\n                    let dateOfBirth = data.dateOfBirth;\n                    if (dateOfBirth instanceof Timestamp) {\n                        dateOfBirth = dateOfBirth.toDate().toLocaleDateString(currentLanguage);\n                    }\n\n                    let therapyStartDate = data.therapyStartDate;\n                    if (therapyStartDate instanceof Timestamp) {\n                        therapyStartDate = therapyStartDate.toDate().toLocaleDateString(currentLanguage);\n                    }\n\n                    let therapyEndDate = data.therapyEndDate;\n                    if (therapyEndDate instanceof Timestamp) {\n                        therapyEndDate = therapyEndDate.toDate().toLocaleDateString(currentLanguage);\n                    }\n\n                    return ({\n                        ...data,\n                        uid: doc.id,\n                        dateOfBirth: dateOfBirth,\n                        therapyStartDate: therapyStartDate,\n                        therapyEndDate: therapyEndDate,\n                    })\n                });\n                if (isMountedRef.current)\n                    setState((s) => ({ ...s, patients: patients }));\n            } catch (error) {\n                console.error(error);\n            }\n\n        }\n        isMountedRef.current = true\n        fetchData(currentLanguage);\n        return () => isMountedRef.current = false\n    }, [currentLanguage]);\n\n    if (state.backdrop) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={state.backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Container maxWidth={false}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <Paper style={{ width: '100%' }}>\n                        <TableToolbar />\n                        <TableContainer>\n                            <Table aria-label=\"collapsible table\">\n                                <caption>Ulteriore descrizione su questa tabella.</caption>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell />\n                                        <TableCell style={{ fontWeight: 'bold' }}>\n                                            {strings.formatString(strings.patient.full_name, strings.patient.first_name, strings.patient.last_name)}\n                                        </TableCell>\n                                        <TableCell align=\"right\" style={{ fontWeight: 'bold' }}>{strings.patient.dateOfBirth}</TableCell>\n                                        <TableCell align=\"right\" style={{ fontWeight: 'bold' }}>{strings.therapy.start}</TableCell>\n                                        <TableCell align=\"right\" style={{ fontWeight: 'bold' }}>{strings.therapy.end}</TableCell>\n                                        <TableCell align=\"right\" style={{ fontWeight: 'bold' }}>{strings.patient.email}</TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {state.patients.map((patient) => (\n                                        <Row key={patient.uid} patient={patient} />\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}","import React from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport {\n    Button,\n    Grid,\n    Container,\n    Typography,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Checkbox,\n    Avatar,\n    IconButton,\n    Backdrop,\n    CircularProgress,\n    Paper,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles'\n// import FolderIcon from '@material-ui/icons/Folder';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport GroupIcon from '@material-ui/icons/Group';\nimport strings from '../Language';\n\nconst useStyles = makeStyles((theme) => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport default function Export() {\n    const [state, setState] = React.useState({\n        // lQXwhwyprZcOI1p40IyL\n        patients: [],\n        visits: [],\n        header: [\n            'patient_id',\n            'visit_id',\n            'patient_age',\n            'gender',\n            'patient_occupation',\n            'educational_qualification',\n            'marital_status',\n            'ethnicity',\n            'consent',\n            'smoker',\n            'ex_smoker',\n            'alcoholic',\n            'use_laxatives',\n            'incontinence',\n            'snoring',\n            'insomnia',\n            'menopause',\n            'pregnancies',\n            'abortions',\n            'amount_cigarettes',\n            'alvo',\n            'menstrual_cycles',\n            'eating',\n            'mood',\n            'anxiety',\n            'psychosis',\n            'personality',\n            'weight',\n            'height',\n            'bmi',\n            'neck_circumference',\n            'waist_circumference',\n            'heart_tones',\n            'heart_murmur',\n            'heart_rate',\n            'mv_chest',\n            'pathological_noises',\n            'murphy_blumberg',\n            'palpable_liver',\n            'palpable_thyroid',\n            'declining_edema',\n            'carotid_murmurs',\n            'min_blood_pressure',\n            'max_blood_pressure',\n            'abdomen',\n            'waist_circumference_iliac_spine_height',\n            'waist_circumference_narrowest_point',\n            'hb',\n            'cholesterol',\n            'hdl',\n            'ldl',\n            'triglycerides',\n            'glycemia',\n            'glycated_hb',\n            'uric_acid',\n            'creatininemia',\n            'alt',\n            'ggt',\n            'tsh',\n            'exam_date',\n            'daily_energy_expenditure',\n            'tot_energy_expenditure',\n            'body_fat',\n            'lean_mass',\n            'body_water',\n            'yourselfDiets',\n            'proDiets',\n            'weightLoss',\n            'weightGain',\n            'heavyweight',\n            'weightMaintained',\n            'maximumWeightLoss',\n            'yearGetFat',\n            'monthsGetFat',\n            'diets',\n            'averageCalories',\n            'nutrients',\n            'alcoholCalories',\n            'grams_carbs',\n            'grams_lipidi',\n            'grams_prots',\n            'prandial_hyperphagia',\n            'compulsive_binge',\n            'plucking',\n            'emotional_eating',\n            'night_eating',\n            'selective_craving',\n            'createdAt',\n            'kcal_therapeutic_target',\n            'kcal_carb_target',\n            'kcal_lipids_target',\n            'kcal_prot_target',\n            'exercise_target',\n            'foods',\n            'foods_text',\n            'medications',\n            'medications_text',\n            'lifted_from_chair',\n            'gate_speed',\n            'walking_test_meters',\n            'walking_test_time',\n            'handgripMano',\n            'som',\n            'obs_comp',\n            'interp_sens',\n            'dep',\n            'anx',\n            'anger_host',\n            'phob',\n            'paran',\n            'psych',\n            'sleep',\n            'tot_tefq51',\n            'tot_orwell',\n            'restriz',\n            'disinibiz',\n            'fame',\n            'sint_fis',\n            'impatto_psisoc',\n            'bes_score',\n            'scl90_score',\n            'free_desc_psycho_test',\n            'scoreIpaq',\n            'active',\n        ],\n        pats: [],\n        isLoading: false,\n    });\n    const { exportPatientVisits, getPatients, } = useAuth();\n    const _exportPatientVisits = React.useCallback((patients, headers) => exportPatientVisits(patients, headers), []);\n    const isMountedRef = React.useRef(null);\n    React.useEffect(() => {\n\n        const fetchData = async (header, patients) => {\n            try {\n\n                let { data } = await _exportPatientVisits(patients, header);\n                if (isMountedRef.current) {\n                    setState(state => {\n                        return ({ ...state, visits: data.visits })\n                    });\n                }\n\n            } catch (err) {\n                console.error(err);\n            }\n        }\n\n        isMountedRef.current = true;\n\n        //fetchData(state.header, state.patients);\n\n        return () => isMountedRef.current = false\n\n    }, [_exportPatientVisits, state.header, state.patients]);\n\n    const exportVisits = async () => {\n        let { patients, header } = state;\n        try {\n\n            let result = await _exportPatientVisits(patients, header);\n\n            let { data } = result;\n\n            let csvContent = \"data:text/csv;charset=utf-8,\";\n\n            csvContent += header.join(\";\").concat('\\n');\n\n            data.visits.forEach((visit, i) => {\n                header.forEach((header, j) => {\n                    // csvContent += `${visit[header]}`\n                    csvContent += visit[header]\n                    csvContent += \";\"\n                });\n                csvContent += \"\\n\"\n            })\n\n\n            let link = document.createElement(\"a\");\n            link.setAttribute('href', encodeURI(csvContent))\n            link.setAttribute('download', `download.csv`.toLowerCase())\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n\n\n        } catch (err) {\n            console.error(err);\n        }\n\n    }\n\n    React.useEffect(() => {\n        const fetchData = async () => {\n\n            if (isMountedRef.current) {\n                setState(s => ({ ...s, isLoading: true }))\n            }\n\n            try {\n\n                let result = await getPatients();\n                if (isMountedRef.current) {\n                    setState(state => {\n                        return ({\n                            ...state,\n                            isLoading: false,\n                            pats: result.docs.map(data => ({ ...data.data(), uid: data.id }))\n                        });\n                    });\n                }\n\n            } catch (err) {\n                if (isMountedRef.current) {\n                    setState(s => ({ ...s, isLoading: false }))\n                }\n                console.error(err);\n            }\n\n        }\n        isMountedRef.current = true\n        fetchData();\n        return () => isMountedRef.current = false\n    }, []);\n\n    const handleSelect = (e, name) => {\n        let selected = state.patients;\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setState(s => ({ ...s, patients: newSelected }));\n    }\n\n    const isSelected = (name) => state.patients.indexOf(name) !== -1;\n\n    const handleExportClick = () => {\n        const { visits, header } = state;\n\n        let csvContent = \"data:text/csv;charset=utf-8,\";\n\n        csvContent += header.join(\";\").concat('\\n');\n\n        visits.forEach(visit => {\n            header.forEach(header => {\n                csvContent += `${visit[header]}`\n                csvContent += \";\"\n            });\n            csvContent += \"\\n\"\n        })\n\n\n        let link = document.createElement(\"a\");\n        link.setAttribute('href', encodeURI(csvContent))\n        link.setAttribute('download', `download.csv`.toLowerCase())\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n    }\n\n    const classes = useStyles();\n\n    const { isLoading } = state;\n\n    if (isLoading) {\n        return (\n            <Backdrop timeout={1000} className={classes.backdrop} open={isLoading}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n\n    return (\n        <Container maxWidth=\"md\">\n            <Grid container justifyContent='center' alignItems='center'>\n                <Grid item xs={12}>\n                    <Typography variant=\"body1\" align='center'>\n                        Esporta i dati delle visite mediche dei pazienti\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <List dense>\n                        {state.pats?.map((patient, i) => {\n                            let isItemSelected = isSelected(patient.uid);\n                            return (\n                                <ListItem key={`${i}-list-item-key`} button onClick={(e) => handleSelect(e, patient.uid)}>\n                                    <ListItemAvatar>\n                                        <Avatar>\n                                            {/**\n                                            * check for not true, maybe undefined\n                                            */}\n                                            {patient.controlGroup !== true ? (<GroupIcon />) : (<PeopleOutlineIcon />)}\n                                        </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText primary={`${patient.name} ${patient.surname}`} secondary={patient.uid} />\n                                    <ListItemSecondaryAction>\n                                        <Checkbox checked={isItemSelected} onClick={(e) => handleSelect(e, patient.uid)} />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n                    </List>\n                </Grid>\n                <Grid item xs={12}>\n                    <Button variant='outlined' fullWidth onClick={() => exportVisits()}>{strings.pageTitles.export_data}</Button>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    Button,\n    ButtonGroup,\n    Container,\n    Grid,\n    TextField,\n    Typography,\n    CircularProgress,\n    Backdrop,\n    Paper,\n    FormGroup,\n    FormControlLabel,\n    Switch,\n    RadioGroup,\n    Radio,\n    FormControl,\n    FormLabel,\n    Box,\n    Snackbar,\n    Slide,\n} from '@material-ui/core';\nimport { Alert, AlertTitle, } from '@material-ui/lab'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useParams } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { genSaltSync, hash, hashSync } from 'bcryptjs';\nimport strings from '../../components/Language';\nimport { Timestamp } from 'firebase/firestore';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3),\n        borderRadius: 24,\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nconst GENDER = {\n    MALE: \"male\",\n    FEMALE: \"female\",\n}\n\nconst SEVERITY = {\n    ERROR: \"error\",\n    WARNING: \"warning\",\n    INFO: \"info\",\n    SUCCESS: \"success\",\n}\n\nfunction SlideTransition(props) {\n    return <Slide {...props} direction=\"left\" />;\n}\n\n/**\n * Modify patient data whose doctor id is the current user uid.\n * @returns \n */\nexport default function ModifyPatient() {\n\n    const { patientId } = useParams();\n\n    const { updatePatient, getPatient, getPatientProtected, } = useAuth();\n\n    const fetchData = React.useCallback((patientId) => getPatient(patientId), [getPatient]);\n\n    const fetchPatientData = React.useCallback(patientId => getPatientProtected(patientId), [getPatientProtected]);\n\n    const classes = useStyles();\n\n    const [state, setState] = useState({\n        readOnly: true,\n        patient: {\n            uid: \"\",\n            name: \"\",\n            surname: \"\",\n            phoneNumber: \"\",\n            email: \"\",\n            //password: \"\",\n            isPregnant: false,\n            height: 0,\n            weights: [{ time: \"\", value: 0 }],\n            weight: 0,\n            gender: \"male\",\n        },\n        error_name: false,\n        error_surname: false,\n        error_phone_number: false,\n        error_email: false,\n        error_password: false,\n        backdrop: false,\n        snackbar: {\n            open: false,\n            message: \"\",\n            severity: \"error\",\n        },\n    });\n\n    const isMountedRef = useRef(null);\n\n    useEffect(() => {\n\n        const _fetchData = async (patientId) => {\n\n            if (isMountedRef.current)\n                setState(s => ({ ...s, backdrop: true }))\n\n            try {\n\n                let snapshot = await fetchData(patientId);\n\n                if (!snapshot.exists && isMountedRef.current) {\n                    return setState(state => ({\n                        ...state,\n                        backdrop: false,\n                        snackbar: {\n                            open: true,\n                            message: \"Paziente non trovato\",\n                            severity: SEVERITY.WARNING,\n                        },\n                    }));\n                }\n\n                let patient = snapshot.data();\n\n                const { weight } = patient;\n\n                let weights = weight.sort((a, b) => a.time.valueOf() >= b.time.valueOf());\n\n                patient = {\n                    ...patient,\n                    weights: weights,\n                    weight: weights[0]?.value,\n                    uid: snapshot.id,\n                }\n\n                if (isMountedRef.current) {\n                    setState((s) => ({\n                        ...s,\n                        patient: patient,\n                        backdrop: false,\n                        snackbar: {\n                            open: true,\n                            message: \"Dati recuperati correttamente\",\n                            severity: SEVERITY.SUCCESS,\n                        },\n                    }));\n                }\n\n\n            } catch (err) {\n                if (isMountedRef.current) {\n                    setState(s => ({\n                        ...s,\n                        backdrop: false,\n                        snackbar: {\n                            open: true,\n                            message: \"Something went wrong\",\n                            severity: SEVERITY.ERROR,\n                        },\n                    }));\n                }\n                console.error(err);\n            }\n\n        }\n\n        isMountedRef.current = true;\n\n        if (patientId !== undefined)\n            //_fetchData(patientId);\n\n            return () => isMountedRef.current = false\n\n    }, [patientId, fetchData]);\n\n    React.useEffect(() => {\n\n        const fetchData = async (patientId) => {\n\n            /*let patient = {\n                name: \"\",\n                surname: \"\",\n                phoneNumber: \"\",\n                email: \"\",\n                isPregnant: false,\n                height: 0,\n                gender: \"male\",\n            }*/\n\n            if (isMountedRef.current) {\n                setState(state => ({\n                    ...state,\n                    snackbar: {\n                        open: true,\n                        message: \"Caricamento...\",\n                        severity: SEVERITY.INFO,\n                    },\n                }))\n            }\n\n            try {\n\n                let patient = await fetchPatientData(patientId);\n\n                const { weight } = patient;\n\n                let weights = weight.sort((a, b) => a.time.valueOf() >= b.time.valueOf());\n\n                patient = {\n                    ...patient,\n                    weights: weights,\n                    weight: weights[0]?.value,\n                }\n\n                if (isMountedRef.current) {\n                    setState(state => ({\n                        ...state,\n                        patient: patient,\n                        //backdrop: false,\n                        snackbar: {\n                            open: true,\n                            message: \"Dati recuperati correttamente\",\n                            severity: SEVERITY.SUCCESS,\n                        },\n                    }));\n                }\n\n            } catch (error) {\n                if (isMountedRef.current)\n                    setState(state => ({\n                        ...state,\n                        //backdrop: false,\n                        snackbar: {\n                            open: true,\n                            message: error.message,\n                            severity: SEVERITY.ERROR,\n                        },\n                    }))\n            }\n\n        }\n\n        isMountedRef.current = true;\n        if (patientId !== undefined) {\n            fetchData(patientId);\n        }\n\n    }, [patientId, fetchPatientData])\n\n    const handleSwitchChange = (event) => {\n        setState(s => ({ ...s, patient: { ...s.patient, isPregnant: event.target.checked } }));\n    }\n\n    const handleSaveClick = async () => {\n\n        const { patient } = state;\n        const { weights } = patient;\n\n        weights.splice(0, 1, { time: Timestamp.now(), value: parseInt(patient.weight) });\n\n        try {\n\n            let data = {\n                name: patient.name,\n                email: patient.email,\n                surname: patient.surname,\n                phoneNumber: patient.phoneNumber,\n                isPregnant: patient.isPregnant,\n                weight: weights,\n                height: patient.height,\n                gender: patient.gender,\n            }\n\n            let result = await updatePatient(patientId, data);\n\n            console.debug(result);\n\n            setState(state => ({\n                ...state,\n                snackbar: {\n                    open: true,\n                    message: \"Data aggiornati correttamente\",\n                    severity: SEVERITY.SUCCESS,\n                }\n            }))\n\n        } catch (err) {\n            setState(state => ({\n                ...state,\n                snackbar: {\n                    open: true,\n                    message: err.message,\n                    severity: SEVERITY.ERROR,\n                }\n            }))\n            console.error(err);\n        }\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const data = new FormData(e.currentTarget);\n        const password = data.get('password');\n        const confirmPassword = data.get('confirmPassword');\n        if (confirmPassword !== password) {\n            return setState(state => ({ ...state, error_password: true }));\n        }\n        try {\n\n            await updatePatient(patientId, { password: hashSync(password, genSaltSync(10)).toString() })\n\n            setState(state => ({ ...state, snackbar: { open: true, message: \"Password aggiornata\", severity: SEVERITY.SUCCESS, } }))\n\n        } catch (error) {\n            console.error(error);\n            setState(state => ({ ...state, snackbar: { open: true, message: error.message, severity: SEVERITY.ERROR, } }));\n        }\n    }\n\n    const handleModifyClick = () => {\n        setState(s => ({ ...s, readOnly: !s.readOnly }));\n    }\n\n    const handleChange = ({ target }) => {\n        setState(s => ({ ...s, patient: { ...s.patient, [target.name]: target.value } }));\n    }\n\n    const handleGenderChange = (event) => {\n        setState(s => ({ ...s, patient: { ...s.patient, gender: event.target.value } }))\n    }\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setState(state => ({ ...state, snackbar: { ...state.snackbar, open: false } }));\n    };\n\n    /*const { backdrop } = state\n\n    if (backdrop) {\n        return (\n            <Backdrop open={backdrop} className={classes.backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }*/\n\n    const { patient, snackbar } = state;\n\n    return (\n        <Container id=\"wrapper-content\" maxWidth=\"md\">\n            <Paper className={classes.root} elevation={2}>\n\n                <Grid\n                    id=\"container-page\"\n                    container\n                    direction=\"row\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"flex-start\"\n                    spacing={2}\n                >\n                    <Snackbar\n                        anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n                        open={snackbar.open}\n                        onClose={handleSnackbarClose}\n                        autoHideDuration={5000}\n                        TransitionComponent={SlideTransition}\n                    >\n                        <Alert severity={snackbar.severity} onClose={handleSnackbarClose}>\n                            {<AlertTitle>{snackbar.message}</AlertTitle>}\n                            {/*snackbar.message*/}\n                        </Alert>\n                    </Snackbar>\n\n                    <Grid item xs={6}>\n                        <Typography variant=\"h5\">\n                            {strings.account.modify_patient_data}\n                        </Typography>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <Typography align=\"right\" variant=\"h5\" >\n                            {\"Modifica password\"}\n                        </Typography>\n                    </Grid>\n\n                    <Grid item xs={4}>\n\n                        <TextField\n                            id=\"patient-id\"\n                            name=\"uid\"\n                            type=\"text\"\n                            InputProps={{ readOnly: true }}\n                            value={patient.uid}\n                            margin=\"normal\"\n                            fullWidth\n                            variant=\"outlined\"\n                            label={strings.patient.patient_id}\n                        />\n\n                        <TextField\n                            id=\"patient-name\"\n                            name=\"name\"\n                            type=\"text\"\n                            InputProps={{ readOnly: state.readOnly }}\n                            error={state.error_name}\n                            value={patient.name}\n                            onChange={handleChange}\n                            margin=\"normal\"\n                            fullWidth\n                            variant=\"outlined\"\n                            label={strings.patient.first_name}\n                        />\n\n                        <TextField\n                            id=\"patient-surname\"\n                            name=\"surname\"\n                            type=\"text\"\n                            InputProps={{ readOnly: state.readOnly }}\n                            error={state.error_surname}\n                            value={patient.surname}\n                            onChange={handleChange}\n                            margin=\"normal\"\n                            fullWidth\n                            variant=\"outlined\"\n                            label={strings.patient.last_name}\n                        />\n\n                        <TextField\n                            id=\"patient-phone-number\"\n                            name=\"phoneNumber\"\n                            type=\"tel\"\n                            InputProps={{ readOnly: state.readOnly }}\n                            error={state.error_phone_number}\n                            value={patient.phoneNumber}\n                            onChange={handleChange}\n                            margin=\"normal\"\n                            fullWidth\n                            variant=\"outlined\"\n                            label={strings.general.phone_number}\n                        />\n                        {/*<TextField\n                            id=\"patient-email\"\n                            name=\"email\"\n                            type=\"text\"\n                            InputProps={{ readOnly: state.readOnly }}\n                            error={state.error_email}\n                            value={patient.email}\n                            onChange={handleChange}\n                            margin=\"normal\"\n                            fullWidth\n                            variant=\"outlined\"\n                            label={strings.patient.email}\n                        />\n                        <TextField\n                            id=\"patient-password\"\n                            name=\"password\"\n                            type=\"password\"\n                            InputProps={{ readOnly: state.readOnly }}\n                            error={state.error_password}\n                            value={patient.password}\n                            onChange={handleChange}\n                            margin=\"normal\"\n                            fullWidth\n                            variant=\"outlined\"\n                            label={\"Password\"}\n                        />*/}\n\n\n                        <TextField\n                            id=\"patient-weight\"\n                            name=\"weight\"\n                            type=\"number\"\n                            InputProps={{ readOnly: state.readOnly }}\n                            inputProps={{ min: 0 }}\n                            error={state.error_weight}\n                            value={patient.weight}\n                            onChange={handleChange}\n                            margin=\"normal\"\n                            fullWidth\n                            variant=\"outlined\"\n                            label={strings.measures.weight}\n                        />\n                        <TextField\n                            id=\"patient-height\"\n                            name=\"height\"\n                            type=\"number\"\n                            inputProps={{ min: 0, }}\n                            InputProps={{ readOnly: state.readOnly, }}\n                            error={state.error_height}\n                            value={patient.height}\n                            onChange={handleChange}\n                            margin=\"normal\"\n                            fullWidth\n                            variant=\"outlined\"\n                            label={strings.measures.height}\n                        />\n\n                        {/*<TextField\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"new-password\"\n                            variant='outlined'\n                            margin='normal'\n                            value={patient.password}\n                        />\n                        <TextField\n                            fullWidth\n                            name=\"confirmPassword\"\n                            label=\"Password Confirmation\"\n                            type=\"password\"\n                            id=\"confirm-password\"\n                            autoComplete=\"new-password\"\n                            variant='outlined'\n                            margin=\"normal\"\n                            value={patient.confirmPassword}\n                        />*/}\n\n                        <FormControl disabled={state.readOnly}>\n                            <FormLabel>{strings.patient.gender}</FormLabel>\n                            <RadioGroup aria-label=\"gender\" name=\"gender\" value={patient.gender} onChange={handleGenderChange} row>\n                                <FormControlLabel value=\"female\" control={<Radio color='secondary' />} label={strings.general.female} />\n                                <FormControlLabel value=\"male\" control={<Radio color=\"primary\" />} label={strings.general.male} />\n                            </RadioGroup>\n                        </FormControl>\n\n                        <FormGroup row>\n                            <FormControlLabel\n\n                                control={<Switch\n                                    size=\"medium\"\n                                    checked={patient.isPregnant}\n                                    onChange={handleSwitchChange}\n                                    name=\"isPregnant\"\n                                />}\n                                label={strings.patient.pregnant}\n                                disabled={patient.gender === GENDER.MALE}\n                            />\n                        </FormGroup>\n\n                        <ButtonGroup variant=\"outlined\" fullWidth>\n                            <Button\n                                onClick={handleModifyClick}\n                                id=\"modify-patient-data\"\n                                color=\"primary\"\n                            //disabled={!state.readOnly}\n                            >\n                                {state.readOnly ? strings.general.modify : strings.general.cancel}\n                            </Button>\n                            <Button\n                                onClick={handleSaveClick}\n                                id=\"save-patient-data\"\n                                color=\"secondary\"\n                            >\n                                {strings.general.save}\n                            </Button>\n                        </ButtonGroup>\n\n                    </Grid>\n                    <Grid item xs={4}>\n                        <Box component=\"form\" noValidate onSubmit={handleSubmit}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        fullWidth\n                                        id=\"email\"\n                                        label={strings.patient.email}\n                                        name=\"email\"\n                                        autoComplete=\"email\"\n                                        variant=\"outlined\"\n                                        InputProps={{ readOnly: true }}\n                                        error={state.error_email}\n                                        value={patient.email}\n                                        //onChange={handleChange}\n                                        margin=\"normal\"\n                                        type=\"email\"\n                                    />\n                                    <TextField\n                                        required\n                                        fullWidth\n                                        name=\"password\"\n                                        label={strings.account.password}\n                                        type=\"password\"\n                                        id=\"password\"\n                                        autoComplete=\"new-password\"\n                                        variant=\"outlined\"\n                                        margin='normal'\n                                    />\n\n                                    <TextField\n                                        required\n                                        fullWidth\n                                        name=\"confirmPassword\"\n                                        label={strings.account.confirm_password}\n                                        type=\"password\"\n                                        id=\"confirm-password\"\n                                        autoComplete=\"new-password\"\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Button\n                                        type=\"submit\"\n                                        fullWidth\n                                        variant='outlined'\n                                        color=\"primary\"\n                                    >\n                                        {\"Aggiorna email e password\"}\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Grid>\n\n                </Grid>\n            </Paper>\n\n        </Container>\n    );\n};\n","import React, { useEffect, useCallback, useState, useRef } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport clsx from 'clsx';\nimport {\n    Container,\n    Grid,\n    Switch,\n    FormControlLabel,\n    TablePagination,\n    TableCell,\n    Checkbox,\n    Table,\n    TableRow,\n    TableContainer,\n    Paper,\n    IconButton,\n    Tooltip,\n    Typography,\n    TableHead,\n    TableSortLabel,\n    Toolbar,\n    TableBody,\n    TextField,\n    InputAdornment,\n    ThemeProvider,\n    Backdrop,\n    CircularProgress,\n} from '@material-ui/core';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { makeStyles, lighten, withStyles, createTheme, alpha } from '@material-ui/core/styles';\nimport NoteIcon from '@material-ui/icons/Note';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport WarningIcon from '@material-ui/icons/Warning'\nimport PropTypes from 'prop-types';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SearchIcon from '@material-ui/icons/Search';\n// import FilterListIcon from '@material-ui/icons/FilterList';\nimport { Timestamp } from 'firebase/firestore';\nimport strings from '../../components/Language';\n\nconst WarningIconStyled = withStyles(() => ({\n    root: {\n        color: \"#ffc107\",\n    },\n}))(({ children, ...rest }) => <WarningIcon {...rest} />);\n\nconst ErrorIconStyled = withStyles(() => ({\n    root: {\n        color: '#f44336',\n    },\n}))(({ children, ...rest }) => <ErrorIcon {...rest} />);\n\nconst CheckCircleIconStyled = withStyles(() => ({\n    root: {\n        color: \"#4caf50\",\n    },\n}))(({ children, ...rest }) => <CheckCircleIcon {...rest} />)\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, headCells, } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all desserts' }}\n                        color=\"primary\"\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.primary.main,\n                backgroundColor: lighten(theme.palette.primary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.primary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nfunction EnhancedTableToolbar(props) {\n    const {\n        numSelected,\n        handleSearch,\n        onRequestNotes,\n        onRequestVisit,\n    } = props;\n    const classes = useToolbarStyles();\n\n    // const [state, setState] = useState({\n    //     search: \"\",\n    // });\n\n    //const handleSearchChange = ({ target }) => setState(state => ({ ...state, [target.name]: target.value }))\n\n    const handleSearchChange = ({ target }) => handleSearch(target.value)\n\n    return (\n        <Toolbar\n            className={\n                clsx(classes.root, {\n                    [classes.highlight]: numSelected > 0,\n                })\n            }\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selezionato/i\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Pazienti Gruppo di controllo\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <>\n                    {\n                        numSelected == 1 ? (\n                            <>\n                                <Tooltip title=\"Note\">\n                                    <IconButton onClick={onRequestNotes}>\n                                        <NoteIcon />\n                                    </IconButton>\n                                </Tooltip>\n                                <Tooltip title=\"Visita medica\">\n                                    <IconButton onClick={onRequestVisit}>\n                                        <LocalHospitalIcon />\n                                    </IconButton>\n                                </Tooltip>\n                            </>\n\n                        ) : (null)\n                    }\n\n                </>\n\n            ) : (\n                // <Tooltip title=\"Filter list\">\n                //     <IconButton aria-label=\"filter list\">\n                //         <FilterListIcon />\n                //     </IconButton>\n                // </Tooltip>\n                <TextField\n                    id=\"search\"\n                    type=\"search\"\n                    //value={state.search}\n                    onChange={handleSearchChange}\n                    name=\"search\"\n                    margin='none'\n                    size='small'\n                    label=\"Cerca\"\n                    //helperText=\"Cerca per nome o cognome\"\n                    variant='outlined'\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">\n                            <IconButton aria-label='search patient'>\n                                <SearchIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    }}\n                />\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n        borderRadius: 24,\n        padding: theme.spacing(3),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nexport function ControlGroupPatientsTable({ rows, headCells, handleSearch, history, classes }) {\n    const [order, setOrder] = React.useState('desc');\n    const [orderBy, setOrderBy] = React.useState('createdAt');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.uid);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, uid) => {\n        const selectedIndex = selected.indexOf(uid);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, uid);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    // const handleChangePage = (event, newPage) => {\n    //     setPage(newPage);\n    // };\n\n    // const handleChangeRowsPerPage = (event) => {\n    //     setRowsPerPage(parseInt(event.target.value, 10));\n    //     setPage(0);\n    // };\n\n    // const handleChangeDense = (event) => {\n    //     setDense(event.target.checked);\n    // };\n\n    const isSelected = (uid) => selected.indexOf(uid) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n\n\n    const handlePatientNotes = () => {\n        let id = selected[0];\n        history.push(`/${id}/notes`, {\n            patientId: id,\n            titlePage: strings.pageTitles.notes,\n        });\n    }\n\n    const handlePatientVisit = () => {\n        let id = selected[0];\n        history.push(`/${id}/medical-visit`, {\n            patientId: id,\n            titlePage: strings.pageTitles.medical_visit,\n        });\n    }\n\n    const handleClickSeeMore = (e, patientId) => {\n        history.push(`/${patientId}/patient-details`, { patientId: patientId, titlePage: strings.pageTitles.details_patient, })\n    }\n\n    const theme = createTheme();\n    theme.overrides = {\n        MuiTableRow: {\n            root: {\n                '&$selected, &$selected:hover': {\n                    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n                },\n            }\n        }\n    }\n\n    return (\n        <div className={classes.root}>\n            <ThemeProvider theme={theme}>\n                <Paper className={classes.paper}>\n                    <EnhancedTableToolbar\n                        numSelected={selected.length}\n                        handleSearch={handleSearch}\n                        onRequestNotes={handlePatientNotes}\n                        onRequestVisit={handlePatientVisit}\n                    />\n                    <TableContainer>\n                        <Table\n                            className={classes.table}\n                            aria-labelledby=\"tableTitle\"\n                            size={dense ? 'small' : 'medium'}\n                            aria-label=\"enhanced table\"\n                        >\n                            <EnhancedTableHead\n                                classes={classes}\n                                numSelected={selected.length}\n                                order={order}\n                                orderBy={orderBy}\n                                onSelectAllClick={handleSelectAllClick}\n                                onRequestSort={handleRequestSort}\n                                rowCount={rows.length}\n                                headCells={headCells}\n                            />\n                            <TableBody>\n                                {stableSort(rows, getComparator(order, orderBy))\n                                    // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    .map((row, index) => {\n                                        const isItemSelected = isSelected(row.uid);\n                                        const labelId = `enhanced-table-checkbox-${index}`;\n\n\n\n                                        return (\n                                            <TableRow\n                                                hover\n                                                // role=\"checkbox\"\n                                                // aria-checked={isItemSelected}\n                                                tabIndex={-1}\n                                                key={row.uid}\n                                                selected={isItemSelected}\n                                            >\n                                                <TableCell padding=\"checkbox\">\n                                                    <Checkbox\n                                                        onClick={(event) => handleClick(event, row.uid)}\n                                                        checked={isItemSelected}\n                                                        inputProps={{ 'aria-labelledby': labelId }}\n                                                        color=\"primary\"\n                                                    />\n                                                </TableCell>\n                                                {/* <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                    {row.uid}\n                                                </TableCell> */}\n                                                <TableCell align=\"left\">{row.name}</TableCell>\n                                                <TableCell align=\"left\">{row.surname}</TableCell>\n                                                <TableCell align=\"right\">{row.therapyStartDate}</TableCell>\n                                                <TableCell align=\"right\">{row.therapyEndDate}</TableCell>\n\n                                                <TableCell align=\"right\">\n                                                    <IconButton onClick={(event) => handleClickSeeMore(event, row.uid)} size=\"small\">\n                                                        <ChevronRightIcon fontSize=\"small\" />\n                                                    </IconButton>\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                {emptyRows > 0 && (\n                                    <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                        <TableCell colSpan={6} />\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    {/* <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={rows.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onPageChange={handleChangePage}\n                        onRowsPerPageChange={handleChangeRowsPerPage}\n                    /> */}\n                </Paper>\n            </ThemeProvider>\n            {/* <FormControlLabel\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\n                label=\"Dense padding\"\n            /> */}\n        </div>\n    );\n}\n\nexport function ControlGroup(props) {\n\n    const { history } = props;\n\n    const [state, setState] = useState({\n        patients: [],\n        filtered: [],\n        backdrop: false,\n    });\n\n    const { getPatients, currentLanguage, removeControlGroupPatient, } = useAuth();\n\n    const fetchPatients = useCallback(() => getPatients(), [getPatients]);\n\n    const isMountedRef = useRef(null);\n\n    useEffect(() => {\n        isMountedRef.current = true;\n\n        const fetchData = async () => {\n            try {\n                if (isMountedRef.current)\n                    setState(state => ({ ...state, backdrop: true }))\n                const snapshot = await fetchPatients();\n                if (snapshot.empty) {\n                    return;\n                }\n                let patients = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const createdAt = data.createdAt;\n                    let patient = { ...data }\n                    if (typeof createdAt === \"string\") {\n                        patient = { ...patient, createdAt: new Date(createdAt).toLocaleString(currentLanguage) }\n                    } else if (createdAt instanceof Timestamp) {\n                        patient = { ...patient, createdAt: createdAt.toDate().toLocaleString(currentLanguage) }\n                    }\n                    const status = data.status;\n                    if (status === undefined) {\n                        patient = { ...patient, status: 'green' }\n                    }\n\n                    const { therapyStartDate } = patient;\n                    if (typeof therapyStartDate === \"string\") {\n                        patient = { ...patient, therapyStartDate: new Date(therapyStartDate).toLocaleDateString(currentLanguage), }\n                    } else if (therapyStartDate instanceof Timestamp) {\n                        patient = { ...patient, therapyStartDate: therapyStartDate.toDate().toLocaleDateString(currentLanguage), }\n                    }\n\n                    const { therapyEndDate } = patient;\n                    if (typeof therapyEndDate === \"string\") {\n                        patient = { ...patient, therapyEndDate: new Date(therapyEndDate).toLocaleDateString(currentLanguage), }\n                    } else if (therapyEndDate instanceof Timestamp) {\n                        patient = { ...patient, therapyEndDate: therapyEndDate.toDate().toLocaleDateString(currentLanguage), }\n                    }\n\n                    return ({ ...patient, uid: doc.id });\n                })\n                    .filter(patient => {\n                        const { controlGroup } = patient;\n                        return typeof controlGroup === 'boolean' && controlGroup;\n                    });\n\n\n                if (isMountedRef.current)\n                    setState(state => ({\n                        ...state,\n                        patients: patients,\n                        filtered: patients,\n                        backdrop: false,\n                    }))\n            } catch (err) {\n                if (isMountedRef.current)\n                    setState(state => ({\n                        ...state,\n                        backdrop: false,\n                    }))\n                console.error(err);\n            }\n        }\n\n        fetchData();\n\n        return () => isMountedRef.current = false\n\n    }, [fetchPatients, currentLanguage,]);\n\n    const headCells = [\n        // { id: 'uid', numeric: false, disablePadding: true, label: 'ID' },\n        { id: 'name', numeric: false, disablePadding: false, label: 'Nome' },\n        { id: 'surname', numeric: false, disablePadding: false, label: 'Cognome' },\n        // { id: 'createdAt', numeric: true, disablePadding: false, label: \"Data iscrizione\" },\n        { id: 'therapyStartDate', numeric: true, disablePadding: false, label: \"Inizio\" },\n        { id: 'therapyEndDate', numeric: true, disablePadding: false, label: \"Fine\" },\n        // { id: 'status', numeric: true, disablePadding: false, label: \"Status\" },\n        { id: 'seeMore', numeric: true, disablePadding: false, label: \"See more\", }\n    ];\n\n    const handleSearch = (searchText) => {\n        if (searchText === undefined || searchText.length === 0) {\n            return setState(state => ({ ...state, filtered: state.patients, }))\n        }\n        setState((state) => ({\n            ...state,\n            filtered: state.patients.filter(({ name, surname }) => {\n                return (\n                    name.includes(searchText) ||\n                    surname.includes(searchText)\n                )\n            }),\n        })\n        );\n    }\n\n    const handleRemovePatients = async (patientIds) => {\n        try {\n\n            // remove list of patients by given ids\n            await removeControlGroupPatient(patientIds);\n            /*console.debug(\"delete in batch \", res);\n\n            setState((state) => {\n                const { patients } = state;\n                let result = patients.filter(({ uid }) => !([...patientIds].includes(uid)))\n                return ({\n                    ...state,\n                    patients: result,\n                    filtered: result,\n                })\n            });*/\n\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const classes = useStyles();\n\n    function createData(uid, name, surname, therapyStartDate, therapyEndDate) {\n        return ({ uid, name, surname, therapyStartDate, therapyEndDate });\n    }\n\n    const { filtered, backdrop, } = state;\n\n    let rows = filtered.map(({ uid, name, surname, therapyStartDate, therapyEndDate }) => {\n        return createData(uid, name, surname, therapyStartDate, therapyEndDate);\n    });\n\n    if (backdrop) {\n        return (\n            <Backdrop open={backdrop} timeout={2000} className={classes.backdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )\n    }\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <ControlGroupPatientsTable\n                        classes={classes}\n                        rows={rows}\n                        headCells={headCells}\n                        handleSearch={handleSearch}\n                        handleRemovePatients={handleRemovePatients}\n                        history={history}\n                    />\n                </Grid>\n            </Grid>\n        </Container>\n\n    )\n}","import React, { useCallback, useRef, useState, useEffect, } from 'react'\nimport {\n    Container,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    Toolbar,\n    Typography,\n    Table,\n    TableRow,\n    TableBody,\n    TableCell,\n    Checkbox,\n    TableContainer,\n    Paper,\n    Switch,\n    FormControlLabel,\n    TablePagination,\n    IconButton,\n    TableSortLabel,\n    TableHead,\n    Tooltip,\n    TextField,\n    InputAdornment,\n    ThemeProvider,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { makeStyles, lighten, withStyles, createTheme, alpha } from '@material-ui/core/styles'\nimport { useAuth } from '../../contexts/AuthContext';\nimport SearchIcon from '@material-ui/icons/Search';\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n        borderRadius: 24,\n        padding: theme.spacing(3),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all desserts' }}\n                        color='primary'\n                    />\n                </TableCell>\n                {[{\n                    id: 'id',\n                    numeric: false,\n                    disablePadding: true,\n                    label: 'ID Paziente',\n                }, {\n                    id: 'name',\n                    numeric: false,\n                    disablePadding: false,\n                    label: 'Nome',\n\n                }, {\n                    id: 'surname',\n                    numeric: false,\n                    disablePadding: false,\n                    label: 'Cognome',\n                }, {\n                    id: 'email',\n                    numeric: false,\n                    disablePadding: false,\n                    label: 'E-mail',\n                }, {\n                    id: 'droppedAt',\n                    numeric: false,\n                    disablePadding: false,\n                    label: 'Data esclusione',\n                }].map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.primary.main,\n                backgroundColor: lighten(theme.palette.primary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.primary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected, handleSearch } = props;\n\n    const handleSearchChange = ({ target }) => handleSearch(target.value)\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selezionato/i\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Patients dropped out\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                // <Tooltip title=\"Delete\">\n                //     <IconButton aria-label=\"delete\">\n                //         <DeleteIcon />\n                //     </IconButton>\n                // </Tooltip>\n                null\n            ) : (\n                // <Tooltip title=\"Filter list\">\n                //     <IconButton aria-label=\"filter list\">\n                //         <FilterListIcon />\n                //     </IconButton>\n                // </Tooltip>\n                <TextField\n                    id=\"search\"\n                    type=\"search\"\n                    onChange={handleSearchChange}\n                    name=\"search\"\n                    margin='none'\n                    size='small'\n                    label='Cerca'\n                    variant='outlined'\n                    InputProps={{\n                        endAdornment: <InputAdornment position='end'>\n                            <IconButton aria-label='search patient'>\n                                <SearchIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    }}\n                />\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nexport function DroppedPatients() {\n\n    const [rows, setRows] = useState([]);\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.id);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, id) => {\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    const classes = useStyles();\n\n    const isMountedRef = useRef(null);\n\n    const { getDroppedPatients, getPatients } = useAuth();\n    const fetchPatients = useCallback(() => getDroppedPatients(), [getDroppedPatients]);\n\n    useEffect(() => {\n        isMountedRef.current = true;\n        const fetchData = async () => {\n            try {\n\n                const snapshot = await fetchPatients();\n\n                if (snapshot.empty) {\n                    console.debug(\"empty list\");\n                    return\n                }\n\n                setRows(() => (\n                    snapshot.docs.map(doc => {\n                        let data = doc.data();\n                        return ({\n                            id: doc.id,\n                            name: data.name,\n                            surname: data.surname,\n                            email: data.email,\n                            droppedAt: data.droppedAt.toDate().toLocaleDateString(),\n                        })\n                    })\n                ))\n\n            } catch (err) {\n                console.error(err);\n            }\n        }\n        fetchData();\n        return () => isMountedRef.current = false\n    }, [fetchPatients]);\n\n    const handleSearch = (searchText) => {\n        if (searchText === undefined || searchText.length === 0) {\n            return;\n        }\n    }\n\n    const theme = createTheme();\n    theme.overrides = {\n        MuiTableRow: {\n            root: {\n                '&$selected, &$selected:hover': {\n                    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n                },\n            }\n        }\n    }\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <ThemeProvider theme={theme}>\n\n                        <Paper className={classes.paper}>\n                            <EnhancedTableToolbar numSelected={selected.length} handleSearch={handleSearch} />\n                            <TableContainer>\n                                <Table\n                                    className={classes.table}\n                                    aria-labelledby=\"tableTitle\"\n                                    size={dense ? 'small' : 'medium'}\n                                    //size='small'\n                                    aria-label=\"enhanced table\"\n\n                                >\n                                    <EnhancedTableHead\n                                        classes={classes}\n                                        numSelected={selected.length}\n                                        order={order}\n                                        orderBy={orderBy}\n                                        onSelectAllClick={handleSelectAllClick}\n                                        onRequestSort={handleRequestSort}\n                                        rowCount={rows.length}\n                                    />\n                                    <TableBody>\n                                        {stableSort(rows, getComparator(order, orderBy))\n                                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            .map((row, index) => {\n                                                const isItemSelected = isSelected(row.id);\n                                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                                return (\n                                                    <TableRow\n                                                        hover\n                                                        onClick={(event) => handleClick(event, row.id)}\n                                                        role=\"checkbox\"\n                                                        aria-checked={isItemSelected}\n                                                        tabIndex={-1}\n                                                        key={row.id}\n                                                        selected={isItemSelected}\n                                                    >\n                                                        <TableCell padding=\"checkbox\">\n                                                            <Checkbox\n                                                                checked={isItemSelected}\n                                                                inputProps={{ 'aria-labelledby': labelId }}\n                                                                color=\"primary\"\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                            {row.id}\n                                                        </TableCell>\n                                                        <TableCell align=\"left\">{row.name}</TableCell>\n                                                        <TableCell align=\"left\">{row.surname}</TableCell>\n                                                        <TableCell align=\"left\">{row.email}</TableCell>\n                                                        <TableCell align=\"left\">{row.droppedAt}</TableCell>\n                                                    </TableRow>\n                                                );\n                                            })}\n                                        {emptyRows > 0 && (\n                                            <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                                <TableCell colSpan={6} />\n                                            </TableRow>\n                                        )}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10, 25]}\n                                component=\"div\"\n                                count={rows.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onPageChange={handleChangePage}\n                                onRowsPerPageChange={handleChangeRowsPerPage}\n                            />\n                        </Paper>\n                    </ThemeProvider>\n\n                    <FormControlLabel\n                        control={<Switch checked={dense} onChange={handleChangeDense} />}\n                        label=\"Dense padding\"\n                    />\n                </Grid>\n\n            </Grid>\n        </Container>\n    )\n}","import SignUp from \"./components/Signup\"\nimport Login from \"./components/Login\"\nimport HomePage from \"./components/HomePage\"\nimport NutritionalPlan from \"./components/NutritionalPlan\"\nimport TemplateNutritionalPlan from './components/NutritionalPlan/TemplateNutritionalPlan'\n// import Foods from \"./components/Foods\"\nimport Foods from './views/Foods/index'\n// import Workouts from \"./components/Workouts\"\nimport Workouts from './views/Workouts/index'\nimport CreatePatient from \"./components/create-patient/CreatePatient\"\nimport PatientStatistics from \"./components/PatientStatistics\"\nimport TherapyStatus from \"./components/TherapyStatus\"\nimport Notifications from \"./components/Notifications\"\n// import NotesPatient from \"./views/NotesPatient\"\n// import NotesPatient from \"./components/Notes\"\nimport { PatientNotes } from \"./views/Notes\"\nimport Patients from \"./views/Patients\"\nimport PhysicalExercises from \"./components/PhysicalExercises\"\nimport { ForgotPassword } from \"./components/ForgotPassword\"\nimport { Profile } from './components/DoctorProfile'\nimport { UpdateProfile } from \"./components/UpdateProfile\"\nimport { VisitPage } from \"./views/Visit/\"\nimport { Visit } from \"./components/Visit/\"\nimport PatientDetails from './components/PatientDetails/'\nimport Data from './components/VisitData'\nimport Export from \"./components/VisitData/Export\"\nimport ModifyPatient from \"./views/modify-patient\"\nimport { ControlGroup } from \"./views/ControlGroup\"\nimport { DroppedPatients } from \"./views/DroppedPatients\"\nimport strings from './components/Language/'\n\nexport const authRoutes = [\n    {\n        path: \"/login\",\n        component: Login\n    }, {\n        path: \"/signup\",\n        component: SignUp\n    }, {\n        path: \"/forgot-password\",\n        component: ForgotPassword\n    }\n]\n\nexport const appRoutes = [\n    {\n        path: \"/\",\n        component: Patients,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.patients,\n        description: \"Lista dei pazienti sotto controllo\",\n    }, {\n        path: \"/:patientId/medical-visit\",\n        component: VisitPage,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.medical_visit,\n        description: \"Visita paziente\",\n    }, {\n        path: \"/:patientId/nutritional-plan\",\n        component: NutritionalPlan,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.nutritional_plan,\n        description: \"Piano nutrizionale raccomandato dal dottore\",\n    }, {\n        path: \"/templates-nutritional-plan\",\n        component: TemplateNutritionalPlan,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.nutritional_plans,\n        description: \"Piani nutrizionali\",\n    }, {\n        path: \"/foods\",\n        component: Foods,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.foods,\n        description: \"Pasti disponibili\",\n    }, {\n        path: \"/workouts\",\n        component: Workouts,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.workouts,\n        description: \"Allenamenti disponibili\",\n    }, {\n        path: \"/create-patient\",\n        component: CreatePatient,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.add_patient,\n        description: \"Registra nuovo paziente alla base di dati\",\n    }, {\n        path: \"/statistics\",\n        component: PatientStatistics,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.patient_statistics,\n        description: \"Statistiche pazienti\",\n    }, {\n        path: \"/:patientId/therapy-status\",\n        component: TherapyStatus,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.therapy_status,\n        description: \"Status terapia\",\n    }, {\n        path: \"/:patientId/notifications\",\n        component: Notifications,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.notifications,\n        description: \"Notifiche\",\n    }, {\n        path: \"/physical-exercises\",\n        component: PhysicalExercises,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.physical_exercises,\n        description: \"Allenamenti del paziente\"\n    }, {\n        path: \"/profile\",\n        component: Profile,\n        // layout: \"/reserved\",\n        title: strings.account.profile,\n        description: \"Profilo dottore\",\n    }, {\n        path: \"/update-profile\",\n        component: UpdateProfile,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.update_profile,\n        description: \"Aggiorna profilo dottore\"\n    }, {\n        path: \"/:patientId/patient-details\",\n        component: PatientDetails,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.details_patient,\n        description: \"Dettagli paziente\",\n    }, {\n        path: \"/export\",\n        component: Data,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.export_data,\n        description: \"Esporta dati visite\",\n    }, {\n        path: \"/visit-export\",\n        component: Export,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.export_data,\n        description: \"Esporta dati\",\n    }, {\n        path: \"/:patientId/notes\",\n        component: PatientNotes,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.notes,\n        description: \"Note del paziente\",\n    }, {\n        path: \"/:patientId/visit/:visitId\",\n        component: Visit,\n        // layout: \"/reserved\",\n        title: strings.pageTitles.medical_visit,\n        description: \"Visita medica\",\n    }, {\n        path: \"/:patientId/modify-patient\",\n        component: ModifyPatient, // use params, get patient data and update\n        // layout: \"/reserved\",\n        title: \"Modify patient\",\n        description: \"Modifica dati paziente\",\n    }, {\n        path: \"/control-group\",\n        component: ControlGroup,\n        // layout: \"/reserved\",\n        title: \"Gruppo controllo\",\n        description: \"Gruppo di controllo\",\n    },\n    // {\n    //     path: \"/dropped-out\",\n    //     component: DroppedPatients,\n    //     title: \"Dropped out\",\n    //     description: \"Dropped out patients\",\n    // },\n]","import React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport { Container, Grid } from \"@material-ui/core\";\nimport DenseTable from \"../../components/Workouts/index\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nexport default function Workouts(props) {\n\n    const { getWorkouts } = useAuth();\n    const [state, setState] = useState({\n        workouts: [],\n    });\n\n    const fetchWorkouts = useCallback(() => getWorkouts(), [getWorkouts]);\n    const isMountedRef = useRef();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const snapshot = await fetchWorkouts();\n                if (snapshot.empty) {\n                    return;\n                }\n                const workouts = snapshot.docs.map(doc => ({\n                    ...doc.data(), uid: doc.id,\n                }));\n                setState(state => ({ ...state, workouts: workouts, }));\n            } catch (err) {\n                console.error(err);\n            }\n        }\n        isMountedRef.current = true\n        fetchData();\n\n        return () => isMountedRef.current = false\n\n    }, [fetchWorkouts]);\n\n    const { workouts } = state;\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <DenseTable workouts={workouts} />\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}","import React from \"react\";\nimport { Switch, Route } from 'react-router-dom';\nimport { authRoutes } from '../routes';\n\nfunction AppLayout() {\n    return (\n        <Switch>\n            {authRoutes.map(({ path, component: Component }) => (\n                <Route\n                    path={path}\n                    key={path}\n                    component={Component}\n                />\n            ))}\n        </Switch>\n    )\n}\n\nexport default AppLayout;","import React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Box from '@material-ui/core/Box';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FastfoodIcon from '@material-ui/icons/Fastfood';\nimport FitnessCenterIcon from '@material-ui/icons/FitnessCenter';\nimport PersonIcon from '@material-ui/icons/Person';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport InsertInvitationIcon from '@material-ui/icons/InsertInvitation';\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport NoteIcon from '@material-ui/icons/Note';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport GroupIcon from '@material-ui/icons/Group';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport ReportIcon from '@material-ui/icons/Report';\nimport {\n    Drawer,\n    List,\n    Divider,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    ListItemSecondaryAction,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Avatar,\n    MenuItem,\n    Menu,\n    Badge,\n    FormControl,\n    FormGroup,\n    FormLabel,\n    FormControlLabel,\n    Checkbox,\n    FormHelperText,\n    Button,\n    DialogContent,\n    Dialog,\n    DialogTitle,\n    DialogActions,\n    DialogContentText,\n    TextField,\n    IconButton,\n    InputLabel,\n    Select,\n    Collapse,\n} from '@material-ui/core';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { appRoutes } from '../routes';\nimport { useAuth } from \"../contexts/AuthContext\"\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { Route, useParams, Switch, Redirect, } from 'react-router-dom'\nimport { Timestamp } from '@firebase/firestore';\nimport strings from '../components/Language';\nimport { Helmet } from 'react-helmet'\nimport { Create } from '@material-ui/icons';\n\n// const theme = createTheme();\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        // width: `calc(100% - ${drawerWidth}px)`,\n        // marginLeft: drawerWidth,\n        zIndex: theme.zIndex.drawer + 1\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n    drawerContainer: {\n        overflow: 'auto',\n        //paddingTop: theme.spacing(2)\n    },\n    grow: {\n        flexGrow: 1\n    },\n    content: {\n        flexGrow: 1,\n        // backgroundColor: theme.palette.background.default,\n        padding: theme.spacing(3),\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightBold,\n        textTransform: \"capitalize\"\n        // flexShrink: 0,\n        // flexBasis: '20%'\n    },\n    avatar: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n    },\n    sectionDesktop: {\n        // display: 'none',\n        [theme.breakpoints.up('md')]: {\n            display: 'flex',\n        },\n        display: 'flex',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    },\n}));\n\nfunction ElevationScroll(props) {\n    const { children, window } = props;\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n    const trigger = useScrollTrigger({\n        disableHysteresis: true,\n        threshold: 0,\n        target: window ? window() : undefined,\n    });\n\n    return React.cloneElement(children, {\n        elevation: trigger ? 4 : 0,\n    });\n}\n\nElevationScroll.propTypes = {\n    children: PropTypes.element.isRequired,\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    window: PropTypes.func,\n};\n\nconst ArrowStyled = withStyles((theme) => ({\n    colorPrimary: {\n        color: '#fff'\n    }\n}))(KeyboardArrowRightIcon);\n\nconst StyledBadge = withStyles((theme) => ({\n    badge: {\n        backgroundColor: '#44b700',\n        color: '#44b700',\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n        '&::after': {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            borderRadius: '50%',\n            animation: '$ripple 1.2s infinite ease-in-out',\n            border: '1px solid currentColor',\n            content: '\"\"',\n        },\n    },\n    '@keyframes ripple': {\n        '0%': {\n            transform: 'scale(.8)',\n            opacity: 1,\n        },\n        '100%': {\n            transform: 'scale(2.4)',\n            opacity: 0,\n        },\n    },\n}))(Badge);\n\nfunction ActiveLastBreadcrumb({ links }) {\n    const handleClick = (event) => {\n        event.preventDefault();\n        console.info('You clicked a breadcrumb.');\n    }\n\n    // let parts = links.split('/');\n    // const place = parts[parts.length - 1];\n    // parts = parts.slice(1, parts.length - 1);\n\n    return (\n        <Breadcrumbs aria-label=\"breadcrumb\" separator={<ArrowStyled color=\"primary\" />}>\n            {\n                /*parts.map((part, partIndex) => {\n                    const path = ['', ...parts.slice(0, partIndex + 1)].join('/');\n                    console.debug(path);\n                    return <Link key={partIndex.toString()} to={path}>{part}</Link>\n                })*/\n            }\n            <Link style={{ color: '#fff' }} href=\"/\" onClick={handleClick}>\n                root\n            </Link>\n            <Link style={{ color: '#fff' }} href=\"/\" onClick={handleClick}>\n                home\n            </Link>\n            <Link\n                style={{ color: '#fff' }}\n                href=\"/\"\n                onClick={handleClick}\n                aria-current=\"page\"\n            >\n                current page\n            </Link>\n        </Breadcrumbs>\n    );\n}\n\nfunction ConfirmationDialog(props) {\n    const { onClose, value: valueProp, open, ...other } = props;\n    // const [value, setValue] = React.useState(valueProp);\n    const [value, setValue] = React.useState(valueProp);\n    // const radioGroupRef = React.useRef(null);\n\n    React.useEffect(() => {\n        if (!open) {\n            setValue(() => valueProp);\n        }\n    }, [valueProp, open]);\n\n    // const handleEntering = () => {\n    //     if (radioGroupRef.current != null) {\n    //         radioGroupRef.current.focus();\n    //     }\n    // };\n\n    const handleCancel = () => {\n        onClose();\n    };\n\n    const handleOk = () => {\n        onClose(value);\n    };\n\n    const handleChange = ({ target }) => {\n        setValue(v => ({ ...v, [target.name]: target.checked }));\n    };\n\n    return (\n        <Dialog\n            maxWidth=\"sm\"\n            fullWidth\n            // onEntering={handleEntering}\n            aria-labelledby=\"confirmation-dialog-title\"\n            open={open}\n            onClose={handleCancel}\n            {...other}\n        >\n            <DialogTitle id=\"confirmation-dialog-title\">{strings.general.confirm}</DialogTitle>\n            <DialogContent dividers>\n                {/* <RadioGroup\n                    ref={radioGroupRef}\n                    aria-label=\"ringtone\"\n                    name=\"ringtone\"\n                    value={value}\n                    onChange={handleChange}\n                >\n                    {options.map((option) => (\n                        <FormControlLabel value={option} key={option} control={<Radio />} label={option} />\n                    ))}\n                </RadioGroup> */}\n                <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">Rimuovi</FormLabel>\n                    <FormGroup>\n                        <FormControlLabel\n                            control={<Checkbox checked={value.remove} onChange={handleChange} name=\"remove\" />}\n                            label={strings.general.from_patient_list}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={value.delete} onChange={handleChange} name=\"delete\" />}\n                            label={strings.general.all_patient_data}\n                        />\n\n                    </FormGroup>\n                    <FormHelperText>{strings.general.select_choice_before_confirmation}</FormHelperText>\n                </FormControl>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleCancel} color=\"secondary\" variant=\"text\">\n                    {strings.general.cancel}\n                </Button>\n                <Button onClick={handleOk} color=\"primary\" variant=\"contained\">\n                    {strings.general.confirm}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmationDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    value: PropTypes.object.isRequired,\n};\n\nfunction NewAppointmentDialog(props) {\n    const { open, onClose, value: valueProp, ...rest } = props;\n\n    React.useEffect(() => {\n        if (!open) {\n            setState(() => valueProp);\n        }\n    }, [valueProp, open]);\n\n    const handleCancel = () => {\n        onClose();\n    }\n\n    const handleDateChange = (e) => {\n        e.persist();\n        const name = e.target.name;\n        const value = e.target.value;\n        setState(s => ({ ...s, [name]: value }))\n    }\n\n    const handleTimeChange = (e) => {\n        e.persist();\n        const name = e.target.name;\n        const value = e.target.value;\n        setState(s => ({ ...s, [name]: value }))\n    }\n\n    const handleOk = () => {\n        onClose(state);\n    }\n\n    const [state, setState] = React.useState(valueProp);\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"xs\"\n            {...rest}\n            open={open}\n            onClose={handleCancel}\n        >\n            <DialogTitle>\n                {strings.general.create_new_appointment}\n            </DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText>\n                    {strings.general.select_day_time}\n                </DialogContentText>\n                <TextField\n                    fullWidth\n                    margin=\"normal\"\n                    id=\"date-appointment\"\n                    variant=\"outlined\"\n                    type=\"date\"\n                    helperText={strings.general.day}\n                    name=\"date\"\n                    value={state.date}\n                    onChange={handleDateChange}\n                />\n                <TextField\n                    id=\"time-appointment\"\n                    type=\"time\"\n                    name=\"time\"\n                    fullWidth\n                    variant=\"outlined\"\n                    helperText={strings.general.time}\n                    margin=\"normal\"\n                    value={state.time}\n                    onChange={handleTimeChange}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"text\" color=\"secondary\" onClick={handleCancel}>\n                    {strings.general.cancel}\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleOk}>\n                    {strings.general.create}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default function AuthLayout(props) {\n    const classes = useStyles();\n\n    const { history, location } = props;\n    const { pathname } = location;\n    let { patientId } = useParams();\n    patientId = (patientId === undefined) ? location.state?.patientId : patientId;\n\n    const titlePage = location.state?.titlePage;\n\n    const getPageName = React.useCallback((pathname) => appRoutes.find(({ path }) => path === pathname)?.title || titlePage, [appRoutes, titlePage]);\n\n    const [state, setState] = React.useState({\n        patient: {\n            name: \"\",\n            surname: \"\",\n            therapyEndDate: \"\",\n            therapyStartDate: \"\",\n            weight: \"\",\n            height: \"\",\n            age: \"\",\n            id: \"\",\n        },\n        meanHeight: 0,\n        meanWeight: 0,\n        meanAges: 0,\n        patients: [],\n        males: 0,\n        females: 0,\n        openConfirmationDialog: false,\n        confirmState: {\n            delete: false,\n            remove: true\n        },\n        openNewAppointmentDialog: false,\n        newAppointment: {\n            time: \"\",\n            date: \"\",\n        },\n        updatePatientData: 1,\n        anchorEl: null,\n        openMenu: false,\n        menu: '',\n        notifications: [{\n            body: \"body\",\n            event_time: Timestamp.now(),\n            title: \"title\",\n            uid: \"1\",\n            seen: false,\n        }],\n        openExportCollapseMenuList: false,\n    });\n\n    const handleMenu = (menu) => ({ currentTarget }) => {\n        setState((s) => ({\n            ...s,\n            openMenu: Boolean(currentTarget),\n            anchorEl: currentTarget,\n            menu: menu\n        }));\n    }\n\n    const {\n        logout,\n        currentUser,\n        verifyEmail,\n        getPatient,\n        getPatients,\n        removePatient,\n        unlinkPatient,\n        updatePatientAppointments,\n        currentLanguage,\n        updateCurrentLanguage,\n        getPatientById,\n        //getPatientNotifications,\n    } = useAuth();\n\n    const fetchPatientData = React.useCallback((patientId) => getPatient(patientId), [getPatient]);\n\n    const fetchPatientsData = React.useCallback(() => getPatients(), [getPatients]);\n\n    const fetchPatientById = useCallback((patientId) => getPatientById(patientId), [getPatientById])\n\n    const handleMenuClose = () => {\n        setState(s => ({ ...s, anchorEl: null, openMenu: false }))\n    };\n\n    const redirectToProfile = () => {\n        handleMenuClose();\n        history.push(\"/profile\");\n    }\n\n    const handleSignout = async () => {\n        try {\n            await logout()\n            history.push('/')\n        } catch (error) {\n            console.error(error.message)\n        }\n    }\n\n    const isMountedRef = useRef(null);\n\n    const handleModifyProfile = () => {\n        history.push(\"/update-profile\", {\n            titlePage: \"Modifica profilo\",\n            patientId: patientId,\n        })\n    }\n\n    const verifyAccount = async () => {\n        try {\n            await verifyEmail();\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n\n    const renderNotificationsMenu = (\n        <Menu\n            anchorEl={state.anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={state.openMenu && state.menu === 'notifications'}\n            onClose={handleMenuClose}\n        >\n            {\n                state.notifications\n                    //.map(({ seen }) => seen === false)\n                    //.slice(0, 3)\n                    .map(({ uid, title, body, event_time, seen }, i) => {\n                        //console.debug(uid);\n                        return (\n                            <MenuItem\n                                key={`${i + 1}-${uid}`}\n                                dense\n                                //selected={!seen}\n                                button\n                            >\n                                <ListItemIcon>\n                                    <NotificationsIcon fontSize='small' />\n                                </ListItemIcon>\n                                <ListItemText\n                                    primary={title}\n                                    secondary={\n                                        <>\n                                            <Typography\n                                                component=\"span\"\n                                                variant=\"body2\"\n                                                color=\"textPrimary\"\n                                            >\n                                                {event_time.toDate().toLocaleString()}\n                                                {/*`${event_time}`*/}\n\n                                            </Typography>\n                                            <br />\n                                            <Typography variant=\"caption\">\n                                                {body}\n                                            </Typography>\n                                        </>\n                                    }\n                                />\n                            </MenuItem>\n                        )\n                    })\n            }\n        </Menu>\n    )\n\n    const renderMenu = (\n        <Menu\n            anchorEl={state.anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={\"account-control\"}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            getContentAnchorEl={null} // !Important\n            open={state.openMenu && state.menu === 'user'}\n            onClose={handleMenuClose}\n        >\n            <MenuItem button onClick={redirectToProfile}>\n                <ListItemText primary={`${currentUser.displayName}`} secondary={currentUser.email} />\n            </MenuItem>\n            {currentUser.emailVerified === true ? (null) :\n                <MenuItem button onClick={verifyAccount}>\n                    <ListItemIcon>\n                        <VerifiedUserIcon />\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={strings.account.verify_email}\n                    // secondary={\"check your inbox\"} \n                    />\n                </MenuItem>\n            }\n            <MenuItem button onClick={handleModifyProfile}>\n                <ListItemIcon>\n                    <PersonIcon />\n                </ListItemIcon>\n                <ListItemText primary={strings.account.modify_profile} />\n            </MenuItem>\n            <Divider />\n            <MenuItem button onClick={handleSignout}>\n                <ListItemIcon>\n                    <ExitToAppIcon />\n                </ListItemIcon>\n                <ListItemText primary={strings.account.sign_out} />\n            </MenuItem>\n        </Menu>\n    );\n\n    const isSelected = (path) => path === pathname\n\n    const [expanded, setExpanded] = React.useState(false);\n\n    const handleChange = (panel) => (event, isExpanded) => {\n        setExpanded(isExpanded ? panel : false);\n    };\n\n    const handleOnCloseAppointmentDialog = async (value) => {\n        if (value !== undefined) {\n            //console.debug(value);\n\n            try {\n\n                let { appointments } = state.patient;\n\n                if (appointments === undefined) {\n                    // first time patient has no appointments\n                    appointments = []\n                }\n\n                appointments.push(Timestamp.fromDate(new Date(`${value.date}T${value.time}`)))\n\n                await updatePatientAppointments(appointments, patientId);\n\n                setState(s => ({\n                    ...s,\n                    openNewAppointmentDialog: false,\n                    newAppointment: value,\n                    //updatePatientData: s.updatePatientData + 1,\n                }));\n\n            } catch (error) {\n                console.error(error);\n            }\n\n        } else {\n            setState(s => ({ ...s, openNewAppointmentDialog: false }))\n        }\n    }\n\n    const handleOnCloseDialog = async (confirmState) => {\n        if (confirmState) {\n            try {\n                if (confirmState.delete) {\n                    //console.debug(\"delete\");\n                    await removePatient(patientId);\n                } else if (confirmState.remove) {\n                    //console.debug(\"unlink\");\n                    await unlinkPatient(patientId);\n                }\n                setState(s => ({ ...s, openConfirmationDialog: false, confirmState: confirmState }));\n                history.push(\"/\");\n            } catch (error) {\n                console.debug(error?.message);\n            }\n\n        } else {\n            setState(s => ({ ...s, openConfirmationDialog: false }))\n        }\n    }\n\n    React.useEffect(() => {\n\n        const fetchData = async (patientId, currentLanguage) => {\n\n            /* await fetchPatientById(patientId)\n                .then((doc) => {\n                    const data = doc.data();\n                    let therapyEndDate = data.therapyEndDate;\n                    if (therapyEndDate instanceof Timestamp) {\n                        therapyEndDate = therapyEndDate.toDate().toLocaleDateString(currentLanguage);\n                    }\n                    let therapyStartDate = data.therapyStartDate;\n                    if (therapyStartDate instanceof Timestamp) {\n                        therapyStartDate = therapyStartDate.toDate().toLocaleDateString(currentLanguage);\n                    }\n\n                    const patient = {\n                        ...data,\n                        weight: data.weight[0].value,\n                        id: doc.id,\n                        therapyEndDate: therapyEndDate,\n                        therapyStartDate: therapyStartDate,\n                    }\n\n                    console.debug(patient);\n\n                    if (isMountedRef.current)\n                        setState(s => ({ ...s, patient: patient }))\n                })\n                .catch(error => console.error(error))\n\n                */\n\n            try {\n\n                const data = await fetchPatientById(patientId);\n\n                let {\n                    therapyStartDate,\n                    therapyEndDate,\n                } = data;\n\n                if (therapyEndDate instanceof Timestamp) {\n                    therapyEndDate = therapyEndDate.toDate().toLocaleDateString(currentLanguage);\n                }\n\n                if (therapyStartDate instanceof Timestamp) {\n                    therapyStartDate = therapyStartDate.toDate().toLocaleDateString(currentLanguage);\n                }\n\n                const patient = {\n                    ...data,\n                    weight: data.weight[0].value,\n                    id: patientId,\n                    therapyEndDate: therapyEndDate,\n                    therapyStartDate: therapyStartDate,\n                }\n\n                if (isMountedRef.current)\n                    setState(s => ({ ...s, patient: patient, }))\n\n            } catch (err) {\n                console.error(err);\n            }\n\n        }\n\n        isMountedRef.current = true;\n\n        if (patientId !== undefined)\n            fetchData(patientId, currentLanguage);\n\n        return () => (isMountedRef.current = false)\n    }, [patientId, currentLanguage, fetchPatientData]);\n\n    React.useEffect(() => {\n        // it works and it's fine\n        const avg_reducer = (p, c, i) => p + (c - p) / (i + 1);\n\n        const fetchData = async () => {\n            const promises = [];\n            promises.push(fetchPatientsData());\n            try {\n                const [snapPatients] = await Promise.all(promises);\n                const patients = snapPatients.docs.map(doc => {\n                    const data = doc.data();\n                    const uid = doc.id;\n                    const patient = {\n                        ...data,\n                        weights: data.weight,\n                        height: parseInt(data.height)\n                    }\n                    const weights = patient.weights.map((w) => ({ time: w.time.toDate(), value: w.value }));\n                    // const weight = new Date(Math.max(...weights.map(e => new Date(e.time))));\n                    // console.debug(patient.weight[0].time.toDate());\n                    const weight = weights.reduce((a, b) => {\n                        return a.time > b.time ? a : b;\n                    });\n                    // console.debug(weight);\n                    return ({ ...patient, id: uid, weights: weights, weight: weight });\n                });\n                const males = patients.filter(({ gender }) => gender.toString().toLowerCase() === \"male\").length;\n                const females = Math.abs(patients.length - males);\n                const mean_ages = patients.map(({ age }) => age === undefined ? 0 : age).reduce(avg_reducer, 0);\n                const mean_weight = patients.map(({ weight }) => parseInt(weight.value)).reduce(avg_reducer, 0);\n                const mean_height = patients.map(({ height }) => parseInt(height)).reduce(avg_reducer, 0);\n\n                //const notifications = snapshotNotifications.docs.map((doc) => ({ ...doc.data(), uid: doc.id }))\n\n                if (isMountedRef.current)\n                    setState((s) => ({\n                        ...s,\n                        patients: patients,\n                        meanAges: parseFloat(mean_ages).toFixed(2),\n                        meanWeight: parseFloat(mean_weight).toFixed(2),\n                        meanHeight: parseFloat(mean_height).toFixed(2),\n                        // patients: patients,\n                        males: males,\n                        females: females,\n                        //notifications: notifications,\n                    }));\n                // console.debug(notifications);\n            } catch (error) {\n                console.error(error.code);\n                console.error(error.message)\n            }\n        }\n        isMountedRef.current = true;\n        fetchData();\n        return () => (isMountedRef.current = false)\n    }, [fetchPatientsData]);\n\n    function countryToFlag(isoCode) {\n        return typeof String.fromCodePoint !== 'undefined'\n            ? isoCode\n                .toUpperCase()\n                .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))\n            : isoCode;\n    }\n\n    // const [openTooltip, setOpenTooltip] = React.useState(false);\n\n    // const handleTooltipClose = () => {\n    //     setOpenTooltip(false);\n    // };\n\n    // const handleTooltipOpen = () => {\n    //     setOpenTooltip(true);\n    // };\n    const [open, setOpen] = React.useState(true);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <ConfirmationDialog\n                id=\"confirm-deletion\"\n                keepMounted\n                open={state.openConfirmationDialog}\n                onClose={handleOnCloseDialog}\n                value={state.confirmState}\n            />\n            <NewAppointmentDialog\n                id=\"new-appointment-dialog\"\n                keepMounted\n                open={state.openNewAppointmentDialog}\n                onClose={handleOnCloseAppointmentDialog}\n                value={state.newAppointment}\n            />\n            <ElevationScroll {...props}>\n                <AppBar position=\"fixed\" className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\"> {getPageName(pathname) || \"\"}</Typography>\n\n                        {/* <ActiveLastBreadcrumb links={pathname} /> */}\n                        <div className={classes.grow} />\n                        <div className={classes.sectionDesktop}>\n                            <FormControl fullWidth>\n                                {/* <InputLabel id=\"lang-label-id\">{\"Language\"}</InputLabel> */}\n                                <Select\n                                    labelId='lang-label-id'\n                                    id=\"lang-id\"\n                                    // label=\"Language\"\n                                    name=\"currentLanguage\"\n                                    value={currentLanguage}\n                                    onChange={({ target }) => updateCurrentLanguage(target.value)}\n                                    fullWidth\n                                >\n                                    {[{\n                                        locale: \"it-IT\",\n                                        label: \"ITA\",\n                                        code: \"IT\"\n                                    }, {\n                                        locale: \"en-us\",\n                                        label: \"ING\",\n                                        code: \"GB\"\n                                    }].map(item => (\n                                        <MenuItem value={item.locale} key={item.code.toLowerCase().concat('-key')}>\n                                            <ListItemText primary={countryToFlag(item.code)} />\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                            {/* <IconButton\n                                style={{ padding: 0 }}\n                                edge=\"end\"\n                                aria-label=\"account of current user\"\n                                aria-controls={\"account-control\"}\n                                aria-haspopup=\"true\"\n                                onClick={handleProfileMenuOpen}\n                                color=\"inherit\"\n                            >\n\n                                <Avatar src={avatarURL} />\n\n                            </IconButton> */}\n                            {/* <IconButton style={{ color: '#fff' }} onClick={handleMenu('notifications')}>\n                                <Badge badgeContent={state.notifications.length}>\n                                    <NotificationsIcon />\n                                </Badge>\n                            </IconButton> */}\n                            {/* <ClickAwayListener onClickAway={handleTooltipClose}>\n                                <div> */}\n                            <Tooltip\n                                // PopperProps={{\n                                //     disablePortal: true,\n                                // }}\n                                // onClose={handleTooltipClose}\n                                // open={openTooltip}\n                                disableFocusListener\n                                // disableHoverListener\n                                disableTouchListener\n                                title={<>\n                                    <Typography variant=\"button\">{`${currentUser.displayName}`}</Typography>\n                                    <Typography variant=\"body2\">{currentUser.email}</Typography>\n                                </>}\n                            >\n                                <StyledBadge\n                                    overlap=\"circular\"\n                                    anchorOrigin={{\n                                        vertical: 'bottom',\n                                        horizontal: 'right',\n                                    }}\n                                    // onClick={handleProfileMenuOpen}\n                                    onClick={handleMenu('user')}\n                                    variant=\"dot\"\n                                    aria-label=\"account of current user\"\n                                    aria-controls={\"account-control\"}\n                                    aria-haspopup=\"true\"\n                                >\n                                    <Avatar alt={`${currentUser.displayName}`} />\n                                </StyledBadge>\n                            </Tooltip>\n                            {/* </div>\n                            </ClickAwayListener> */}\n                        </div>\n                    </Toolbar>\n                </AppBar>\n            </ElevationScroll>\n            {renderMenu}\n            {renderNotificationsMenu}\n            {/* <Toolbar /> */}\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n                anchor=\"left\"\n            >\n                {/*<div className={classes.toolbar} >\n                    <Avatar />\n                </div>\n                 <Divider /> */}\n                <Toolbar />\n                <div className={classes.drawerContainer}>\n                    {patientId !== undefined ? (\n                        <>\n                            <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <Typography className={classes.heading}>\n                                        {state.patient?.name}&nbsp; {state.patient?.surname}\n                                    </Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <List dense style={{ width: '100%' }}>\n                                        <ListItem>\n                                            <ListItemText\n                                                secondary={strings.measures.height}\n                                                primary={state.patient?.height}\n                                            />\n                                        </ListItem>\n                                        <ListItem>\n                                            <ListItemText\n                                                secondary={strings.measures.weight}\n                                                primary={`${state.patient?.weight}`}\n                                            />\n                                        </ListItem>\n                                        <ListItem>\n                                            <ListItemText\n                                                secondary={strings.measures.age}\n                                                primary={state.patient.age}\n                                            />\n                                        </ListItem>\n                                        <ListItem>\n                                            <ListItemText\n                                                secondary={strings.therapy.start}\n                                                primary={state.patient?.therapyStartDate}\n                                            />\n                                        </ListItem>\n                                        <ListItem>\n                                            <ListItemText\n                                                secondary={strings.therapy.end}\n                                                primary={state.patient?.therapyEndDate}\n                                            />\n                                        </ListItem>\n                                        {/*<ListItem>\n                                            <ListItemText primary={strings.general.see_more} />\n                                            <ListItemSecondaryAction>\n                                                <IconButton href={`/reserved/${patientId}/patient-details`} component=\"a\" size='small'>\n                                                    <ArrowForwardIosIcon fontSize=\"small\" />\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>*/}\n\n                                    </List>\n                                </AccordionDetails>\n                            </Accordion>\n\n                            <List dense>\n                                {[{\n                                    path: `/${patientId}/notifications`,\n                                    titlePage: strings.pageTitles.notifications,\n                                    icon: <NotificationsIcon />,\n                                    id: 4,\n                                }, {\n                                    path: `/${patientId}/therapy-status`,\n                                    titlePage: strings.pageTitles.therapy_status,\n                                    icon: <AssessmentIcon />,\n                                    id: 3,\n                                }, {\n                                    path: `/${patientId}/nutritional-plan`,\n                                    titlePage: strings.pageTitles.nutritional_plan,\n                                    icon: <ListAltIcon />,\n                                    id: 2\n                                }, {\n                                    path: `/${patientId}/medical-visit`,\n                                    titlePage: strings.pageTitles.medical_visit,\n                                    icon: <LocalHospitalIcon />,\n                                    id: 5,\n                                }, {\n                                    path: `/${patientId}/notes`,\n                                    titlePage: strings.pageTitles.notes,\n                                    icon: <NoteIcon />,\n                                    id: 1,\n                                }, {\n                                    path: `/${patientId}/modify-patient`,\n                                    titlePage: \"Modifica dati paziente\",\n                                    icon: <Create />,\n                                    id: 6,\n                                }].map((item) => (\n                                    <ListItem\n                                        key={item.path}\n                                        button\n                                        selected={isSelected(item.path)}\n                                        onClick={() => {\n                                            item.id === 4 ?\n                                                (history.push(\n                                                    item.path,\n                                                    {\n                                                        patientId: patientId,\n                                                        titlePage: item.titlePage,\n                                                        token: state.patient.firebase_device_token,\n                                                    }\n                                                )) : (\n                                                    history.push(\n                                                        item.path,\n                                                        {\n                                                            patientId: patientId,\n                                                            titlePage: item.titlePage,\n                                                        }\n                                                    )\n                                                )\n                                        }}\n                                    >\n                                        <ListItemIcon>{item.icon}</ListItemIcon>\n                                        <ListItemText primary={item.titlePage} />\n                                    </ListItem>\n                                ))}\n\n                                <ListItem\n                                    button\n                                    onClick={() => setState((s) => ({ ...s, openNewAppointmentDialog: true }))}\n                                >\n                                    <ListItemIcon><InsertInvitationIcon /></ListItemIcon>\n                                    <ListItemText primary={strings.general.create_new_appointment} />\n                                </ListItem>\n                                <ListItem\n                                    button\n                                    onClick={() => setState(s => ({\n                                        ...s,\n                                        openConfirmationDialog: true,\n                                        confirmState:\n                                        {\n                                            remove: true,\n                                            delete: false\n                                        }\n                                    }))}\n                                >\n                                    <ListItemIcon> <RemoveCircleOutlineIcon /></ListItemIcon>\n                                    <ListItemText primary={strings.patient.remove_patient} />\n                                </ListItem>\n                            </List>\n                        </>\n                    ) : (<>\n\n                        <Accordion elevation={0} expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            // style={{ backgroundColor: \"#e3e3e3\", borderRadius: 16 }}\n                            >\n                                <Typography className={classes.heading}>{strings.pageTitles.patient_statistics}</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <List dense style={{ width: '100%' }} disablePadding>\n                                    <ListItem component=\"li\">\n                                        <ListItemText\n                                            primary={`${state.patients.length}`}\n                                            secondary={strings.general.patients_number}\n                                        />\n                                    </ListItem>\n                                    <ListItem>\n                                        <ListItemText\n                                            primary={`${state.females}`}\n                                            secondary={strings.general.female}\n                                        />\n                                    </ListItem>\n                                    <ListItem>\n                                        <ListItemText\n                                            primary={`${state.males}`}\n                                            secondary={strings.general.male}\n                                        />\n                                    </ListItem>\n                                    <ListItem>\n                                        <ListItemText\n                                            primary={`${state.meanWeight}`}\n                                            secondary={strings.visit.middleweight}\n                                        />\n                                    </ListItem>\n                                    <ListItem>\n                                        <ListItemText\n                                            primary={`${state.meanHeight}`}\n                                            secondary={strings.visit.middleheight}\n                                        />\n                                    </ListItem>\n                                    <ListItem>\n                                        <ListItemText\n                                            primary={`${state.meanAges}`}\n                                            secondary={strings.measures.middle_age}\n                                        />\n                                    </ListItem>\n                                    {/* <Divider/> */}\n                                    <ListItem\n                                        button\n                                        onClick={() => history.push(\"/statistics\",\n                                            {\n                                                patientId: patientId,\n                                                titlePage: strings.pageTitles.patient_statistics,\n                                            })}>\n                                        {/* <ListItemIcon>\n                                        <VerticalSplitIcon />\n                                    </ListItemIcon> */}\n                                        <ListItemText primary={strings.general.see_more} />\n                                    </ListItem>\n                                </List>\n                            </AccordionDetails>\n                        </Accordion>\n                    </>)}\n                    <Divider />\n                    <List dense>\n                        {/* <ListItem button onClick={handleClick}>\n                            <ListItemIcon>\n                                <GroupIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"Pazienti\" />\n                            {open ? <ExpandLess /> : <ExpandMore />}\n                        </ListItem>\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                            <List component=\"div\" disablePadding dense>\n                                <ListItem button className={classes.nested} selected={isSelected(\"/reserved/\")}\n\n                                    onClick={() => history.push(\"/reserved/\", {\n                                        titlePage: strings.pageTitles.patients,\n                                        patientId: patientId,\n                                    })}>\n\n\n                                    <ListItemText primary=\"Pazienti\" />\n                                </ListItem>\n                                <ListItem\n                                    button\n                                    className={classes.nested}\n                                    selected={isSelected(\"/reserved/control-group\")}\n\n                                    onClick={() => history.push(\"/reserved/control-group\", {\n                                        titlePage: \"Gruppo controllo\",\n                                        patientId: patientId,\n                                    })}>\n\n\n                                    <ListItemText primary=\"Pazienti GC\" />\n                                </ListItem>\n                                <ListItem\n                                    button\n                                    className={classes.nested}\n                                    selected={isSelected(\"/reserved/drop-out\")}\n                                    onClick={() => history.push(\"/reserved/drop-out\", {\n                                        titlePage: \"Drop out\",\n                                        patientId: patientId,\n                                    })}>\n                                    <ListItemText primary=\"Dropped\" />\n                                </ListItem>\n                            </List>\n                        </Collapse> */}\n                        {[\n                            {\n                                path: \"/\",\n                                titlePage: strings.pageTitles.patients,\n                                icon: <GroupIcon />\n                            }, {\n                                path: \"/control-group\",\n                                titlePage: \"Gruppo controllo\",\n                                icon: <PeopleOutlineIcon />,\n                            },\n                            {\n                                path: \"/statistics\",\n                                titlePage: strings.pageTitles.patient_statistics,\n                                icon: <EqualizerIcon />\n                            }, {\n                                path: \"/export\",\n                                titlePage: strings.pageTitles.export_data,\n                                icon: <GetAppIcon />,\n                            }, {\n                                path: \"/create-patient\",\n                                titlePage: strings.pageTitles.add_patient,\n                                icon: <PersonAddIcon />\n                            }, {\n                                path: \"/foods\",\n                                titlePage: strings.pageTitles.foods,\n                                icon: <FastfoodIcon />\n                            }, {\n                                path: \"/workouts\",\n                                titlePage: strings.pageTitles.workouts,\n                                icon: <FitnessCenterIcon />\n                            }, {\n                                path: \"/templates-nutritional-plan\",\n                                titlePage: strings.pageTitles.nutritional_plans,\n                                icon: <ListAltIcon />,\n                                // id: 1,\n                            },].map((item, i) => {\n                                if (item.path === \"/export\") {\n                                    // console.debug(i, item.path);\n                                    return (\n                                        <>\n                                            <ListItem\n                                                key={item.path}\n                                                button\n                                                // selected={isSelected(item.path)}\n                                                onClick={() => {\n                                                    setState(s => ({ ...s, openExportCollapseMenuList: !s.openExportCollapseMenuList }))\n                                                    // history.push(item.path, {\n                                                    //     titlePage: item.titlePage,\n                                                    //     patientId: patientId,\n                                                    // })\n                                                }}\n                                            >\n                                                <ListItemIcon>{item.icon}</ListItemIcon>\n                                                <ListItemText primary={item.titlePage} />\n                                                {state.openExportCollapseMenuList ? <ExpandLess /> : <ExpandMore />}\n                                            </ListItem>\n                                            <Collapse in={state.openExportCollapseMenuList} timeout=\"auto\" unmountOnExit>\n                                                <List component=\"div\" disablePadding>\n                                                    <ListItem key={\"/view-data\"} button selected={isSelected(item.path)}\n                                                        onClick={() => history.push(item.path, {\n                                                            titlePage: item.titlePage,\n                                                            patientId: patientId\n                                                        })}\n                                                    >\n                                                        {/* <ListItemIcon>{item.icon}</ListItemIcon> */}\n                                                        <ListItemText primary={\"Visulizza dati\"} />\n                                                    </ListItem>\n                                                    <ListItem key={\"/export-data\"} button selected={isSelected(\"/visit-export\")}\n                                                        onClick={() => history.push(\"/visit-export\")}\n                                                    >\n                                                        {/* <ListItemIcon>{item.icon}</ListItemIcon> */}\n                                                        <ListItemText primary={\"Esporta dati\"} />\n                                                    </ListItem>\n                                                </List>\n                                            </Collapse>\n                                        </>\n                                    )\n                                } else {\n                                    // console.debug(i, item.path);\n                                    return (\n                                        <ListItem\n                                            key={item.path}\n                                            button\n                                            selected={isSelected(item.path)}\n                                            onClick={() => history.push(item.path, {\n                                                titlePage: item.titlePage,\n                                                patientId: patientId,\n                                            })}\n                                        >\n                                            <ListItemIcon>{item.icon}</ListItemIcon>\n                                            <ListItemText primary={item.titlePage} />\n                                        </ListItem>\n                                    )\n                                }\n                            })}\n                    </List>\n                </div>\n            </Drawer >\n            <main className={classes.content}>\n                <Toolbar />\n                <Box my={2}>\n                    <Switch>\n                        {appRoutes.map(({ component: Component, ...prop }) => (\n                            <Route\n                                // use exact or wrap with Switch component\n                                exact\n                                // path={prop.layout.concat(prop.path)}\n                                path={prop.path}\n                                render={(props) => (\n                                    <>\n                                        <Helmet>\n                                            <title>{`${prop.title} | JP Obesity`}</title>\n                                            <meta name='author' content='M. Jereghi' />\n                                            <meta name='description' content={prop.description} />\n                                        </Helmet>\n                                        <Component {...props} />\n                                    </>\n                                )}\n                                key={prop.path}\n                            />\n                        ))}\n                        <Redirect from=\"*\" to=\"/404\" />\n                    </Switch>\n                </Box>\n            </main>\n        </div >\n    );\n}","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://jp-obesity.web.app\">\n                JP Obesity web app\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh',\n    },\n    main: {\n        marginTop: theme.spacing(8),\n        marginBottom: theme.spacing(2),\n    },\n    footer: {\n        padding: theme.spacing(3, 2),\n        marginTop: 'auto',\n        backgroundColor:\n            theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n    },\n}));\n\nexport default function NotFound() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <Container component=\"main\" className={classes.main} maxWidth=\"sm\">\n                <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n                    Page not found\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n                    {'Error 404.'}\n                </Typography>\n                {/* <Typography variant=\"body1\">Sticky footer placeholder.</Typography> */}\n            </Container>\n            <footer className={classes.footer}>\n                <Container maxWidth=\"sm\">\n                    <Typography variant=\"body1\">Università degli studi di Verona</Typography>\n                    <Copyright />\n                </Container>\n            </footer>\n        </div>\n    );\n}","import React from \"react\"\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\"\nimport { AuthProvider } from \"./contexts/AuthContext\"\nimport PageNotFound from \"./components/PageNotFound\"\nimport SecureRoute from \"./components/SecureRoute\"\nimport AppLayout from \"./layouts/AppLayout\"\nimport AuthLayout from \"./layouts/AuthLayout\"\nimport NotFound from \"./views/NotFound\"\n\n/**\n * Root application component.\n * @version 1.0.3\n * @name App\n * @author [Marin Jereghi](https://github.com/marinjereghi)\n * @returns Router component\n */\nfunction App() {\n\n    return (\n        <Router>\n            <AuthProvider>\n                <Switch>\n                    <Route path=\"/signup\" component={AppLayout} />\n                    <Route path=\"/login\" component={AppLayout} />\n                    <Route path=\"/forgot-password\" component={AppLayout} />\n                    <Route path=\"/404\" component={NotFound} />\n                    <SecureRoute path=\"/\" component={AuthLayout} />\n                    <Redirect from=\"*\" to=\"/404\" />\n                </Switch>\n            </AuthProvider>\n        </Router>\n    )\n}\n\nexport default App;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}